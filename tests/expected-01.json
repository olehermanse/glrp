{
  "commit": "db6764a16702747306e851fe0744722c0d001a6f",
  "gpg": [
    "Signature made Fri Apr 25 02:43:28 2025 CEST",
    "               using RSA key AFE8C5F43057C0093122299F584211AF6AB3EE12",
    "               issuer \"ole.elgesem@northern.tech\"",
    "Good signature from \"Ole Herman Schumacher Elgesem <ole@cfengine.com>\" [ultimate]",
    "                aka \"Ole Herman Schumacher Elgesem <olehelg@ifi.uio.no>\" [ultimate]",
    "                aka \"Ole Herman Schumacher Elgesem <olehelg@student.matnat.uio.no>\" [ultimate]",
    "                aka \"Ole Herman Schumacher Elgesem <oleherman93@gmail.com>\" [ultimate]",
    "                aka \"Ole Herman Schumacher Elgesem <ole.elgesem@northern.tech>\" [ultimate]",
    "                aka \"Ole Herman Schumacher Elgesem <ole.elgesem@cfengine.com>\" [ultimate]",
    "                aka \"Ole Herman Schumacher Elgesem <ole@northern.tech>\" [ultimate]",
    "                aka \"Ole Herman Schumacher Elgesem <olehelg@ulrik.uio.no>\" [ultimate]",
    "                aka \"Ole Herman Schumacher Elgesem <olehelg@uio.no>\" [ultimate]"
  ],
  "tree": "593a58028375d27f2ffbd9c4a81a77ee68df791c",
  "parent": ["61c6e6461f62464e870d921d33d853ac841c7420"],
  "author": {
    "id": "Ole Herman Schumacher Elgesem <ole.elgesem@northern.tech>",
    "name": "Ole Herman Schumacher Elgesem",
    "email": "ole.elgesem@northern.tech",
    "timestamp": "1745541807",
    "timezone": "+0200"
  },
  "committer": {
    "id": "Ole Herman Schumacher Elgesem <ole.elgesem@northern.tech>",
    "name": "Ole Herman Schumacher Elgesem",
    "email": "ole.elgesem@northern.tech",
    "timestamp": "1745541807",
    "timezone": "+0200"
  },
  "gpgsig": "-----BEGIN PGP SIGNATURE-----\n\niQJOBAABCAA4FiEEr+jF9DBXwAkxIimfWEIRr2qz7hIFAmgK2rAaHG9sZS5lbGdl\nc2VtQG5vcnRoZXJuLnRlY2gACgkQWEIRr2qz7hL/qw//fyrGzn30Cr2gGY/J9wxS\nTuH+jd5DP5gunk4neTIsChBud+XCBOYc6/qCygu71DemWvtheEarjOviBLFnsSWH\nNLtahhC1UCK5ETLHSTNWeJzq7WTCtInwItiaxOv8ojE7y12J1AU+969IdlGJtMv9\ndLP08idsZZ0eJHY3TM9yihFELRvIWOzeWz+el4mXjaML23QAUmXTlZ/tgXn4on63\nBmodNWkBkuQm5blTmuK3CZjyF4B7VTYDZM1RCBgypeC7I+ybQk4vpegOIR9Ac59Q\ngWkYMnpZC7TX3bHjVyLRUlJlGgoknVurLGqgwsRii9jEUW181plTpRj5tcBdP7YQ\nNyT9IyMGV3bBYwTCfc8ob48Uo5ZLa5WxUTJhL4XzxKWxE0LxNolOa9o8K4lDdMoJ\nOdH//Yu3e+JwRDLyCl7IyhAhj9BC4If/T448qd6BAcoWWe8SSqDfsDO9rJa+lo3Y\nyR9cab9OeotSIWpzuKr3ZJYDmY1lPxKlGQs29YOXs0EZ5idCqBZzslT9760syYcq\nDrQ4u+Fsshdax6Td0Tr/24hiyVN+5jeXJ3UpcC3/0XDoZPVcVTAgosmnkWovMivc\nvThXo5BS5nODNJLWAkkmJHAR7EIbD3nTFGAStSlXJZHuZ541Km2kR2Px2xeS3C3Z\nIqjznY4+oz+9d1eUMlafe0U=\n=m9QU\n-----END PGP SIGNATURE-----",
  "message": "Fixed logic\n\nSigned-off-by: Ole Herman Schumacher Elgesem <ole.elgesem@northern.tech>",
  "diff": [
    " internal_parser.py    |   8 +-",
    " 2 files changed, 124 insertions(+), 95 deletions(-)",
    "",
    "diff --git a/git_log_raw_parser.py b/git_log_raw_parser.py",
    "index 1be31c7..e9332db 100644",
    "--- a/git_log_raw_parser.py",
    "+++ b/git_log_raw_parser.py",
    "@@ -1,6 +1,7 @@",
    " import os",
    " import sys",
    " import argparse",
    "+import json",
    " ",
    " from internal_parser import parse, parse_to_all_representations",
    " from cfbs.utils import find, mkdir, rm",
    "@@ -35,6 +36,8 @@ class GlobalState:",
    "         self.set_trusted_fingerprints()",
    " ",
    "     def _get_trusted_fingerprints(self):",
    "+        if not os.path.isdir(\"trusted\"):",
    "+            return",
    "         for file in find(\"trusted\", extension=\".fp\"):",
    "             with open(file, \"r\") as f:",
    "                 for line in f:",
    "@@ -49,28 +52,28 @@ class GlobalState:",
    "     def record_email(self, email):",
    "         if email not in self.emails:",
    "             self.emails[email] = 1",
    "-            print(\"New email: \" + email)",
    "+            # print(\"New email: \" + email)",
    "         else:",
    "             self.emails[email] += 1",
    " ",
    "     def record_name(self, name):",
    "         if name not in self.names:",
    "             self.names[name] = 1",
    "-            print(\"New name: \" + name)",
    "+            # print(\"New name: \" + name)",
    "         else:",
    "             self.names[name] += 1",
    " ",
    "     def record_fingerprint(self, fingerprint):",
    "         if fingerprint not in self.fingerprints:",
    "             self.fingerprints[fingerprint] = 1",
    "-            print(\"New fingerprint: \" + fingerprint)",
    "+            # print(\"New fingerprint: \" + fingerprint)",
    "         else:",
    "             self.fingerprints[fingerprint] += 1",
    " ",
    "     def record_unsigned(self, unsigned):",
    "         if unsigned not in self.unsigneds:",
    "             self.unsigneds[unsigned] = 1",
    "-            print(\"New unsigned: \" + unsigned)",
    "+            # print(\"New unsigned: \" + unsigned)",
    "         else:",
    "             self.unsigneds[unsigned] += 1",
    " ",
    "@@ -105,6 +108,65 @@ class GlobalState:",
    "                 if fingerprint not in self.by_id[id][\"fingerprints\"]:",
    "                     self.by_id[id][\"fingerprints\"].append(fingerprint)",
    " ",
    "+    def record_commit(self, commit):",
    "+        self.record_by(commit)",
    "+        self.record_email(commit[\"author\"][\"email\"])",
    "+",
    "+        if commit[\"author\"][\"email\"] != commit[\"committer\"][\"email\"]:",
    "+            self.record_email(commit[\"committer\"][\"email\"])",
    "+",
    "+        self.record_name(commit[\"author\"][\"name\"])",
    "+        if commit[\"author\"][\"name\"] != commit[\"committer\"][\"name\"]:",
    "+            self.record_name(commit[\"committer\"][\"name\"])",
    "+",
    "+        if \"fingerprint\" in commit:",
    "+            self.record_fingerprint(",
    "+                commit[\"committer\"][\"id\"] + \" \" + commit[\"fingerprint\"]",
    "+            )",
    "+        else:",
    "+            self.record_unsigned(commit[\"committer\"][\"id\"])",
    "+",
    "+        if \"diff\" not in commit:",
    "+            self.commits[\"empty\"].append(commit)",
    "+        elif \"fingerprint\" in commit and commit[\"fingerprint\"] in self.trusted:",
    "+            self.commits[\"signed-trusted\"].append(commit)",
    "+        elif \"fingerprint\" in commit and commit[\"fingerprint\"] not in self.trusted:",
    "+            self.commits[\"signed-untrusted\"].append(commit)",
    "+        else:",
    "+            self.commits[\"unsigned\"].append(commit)",
    "+",
    "+    def generate_summary(self):",
    "+        self.by_email = {",
    "+            k: v",
    "+            for k, v in self.by_email.items()",
    "+            if len(v[\"names\"]) > 1 or len(v[\"fingerprints\"]) > 1",
    "+        }",
    "+        self.by_name = {",
    "+            k: v",
    "+            for k, v in self.by_name.items()",
    "+            if len(v[\"emails\"]) > 1 or len(v[\"fingerprints\"]) > 1",
    "+        }",
    "+        self.by_id = {k: v for k, v in self.by_id.items() if len(v[\"fingerprints\"]) > 1}",
    "+        self.by_fingerprint = {",
    "+            k: v for k, v in self.by_fingerprint.items() if len(v[\"ids\"]) > 1",
    "+        }",
    "+        self.summary = {",
    "+            \"emails\": self.emails,",
    "+            \"names\": self.names,",
    "+            \"fingerprints\": self.fingerprints,",
    "+            \"unsigneds\": self.unsigneds,",
    "+            \"commit_counts\": {",
    "+                \"empty\": len(self.commits[\"empty\"]),",
    "+                \"signed-trusted\": len(self.commits[\"signed-trusted\"]),",
    "+                \"signed-untrusted\": len(self.commits[\"signed-untrusted\"]),",
    "+                \"unsigned\": len(self.commits[\"unsigned\"]),",
    "+            },",
    "+            \"by_name\": self.by_name,",
    "+            \"by_email\": self.by_email,",
    "+            \"by_id\": self.by_id,",
    "+            \"by_fingerprint\": self.by_fingerprint,",
    "+        }",
    "+",
    " ",
    " global_state = GlobalState()",
    " ",
    "@@ -134,101 +196,54 @@ def output_to_directory(output_dir):",
    "     with open(\"./out/summary.json\", \"w\") as f:",
    "         f.write(pretty(global_state.summary) + \"\\n\")",
    " ",
    "-    for key, values in global_state.commits.items():",
    "-        folder = \"./out/\" + key",
    "-        mkdir(folder)",
    "-        with open(folder + \".txt\", \"w\") as links:",
    "-            for commit in values:",
    "-                sha = commit[\"sha\"]",
    "-                links.write(",
    "-                    \"https://github.com/cfengine/masterfiles/commit/\" + sha + \"\\n\"",
    "-                )",
    "-                filename = folder + \"/\" + sha + \".json\"",
    "-                with open(filename, \"w\") as f:",
    "-                    f.write(pretty(commit))",
    "-",
    "-",
    "-def parse_logs(output_dir=None, quiet=False, debug_parser=False):",
    "+",
    "+def dump_commit(raw_commit, split_commit, pretty_commit):",
    "+    sha = pretty_commit[\"sha\"]",
    "+    with open(f\"./debug/{sha}.1.raw.txt\", \"w\") as f:",
    "+        f.write(\"\\n\".join(raw_commit))",
    "+    with open(f\"./debug/{sha}.2.raw.json\", \"w\") as f:",
    "+        f.write(pretty(raw_commit))",
    "+    with open(f\"./debug/{sha}.3.split.json\", \"w\") as f:",
    "+        f.write(pretty(split_commit))",
    "+    with open(f\"./debug/{sha}.4.pretty.json\", \"w\") as f:",
    "+        f.write(pretty(pretty_commit))",
    "+",
    "+",
    "+def parse_logs(",
    "+    output_dir=None, quiet=False, debug_parser=False, summary=False, pretty_print=False",
    "+):",
    "+    assert debug_parser or not quiet or output_dir or summary",
    "+    # If not, there is nothing to do",
    "+",
    "     if debug_parser:",
    "         rm(\"./debug/\")",
    "         mkdir(\"./debug/\")",
    "         for raw_commit, split_commit, pretty_commit in parse_to_all_representations(",
    "             sys.stdin",
    "         ):",
    "-            sha = pretty_commit[\"sha\"]",
    "-            with open(f\"./debug/{sha}.1.raw.txt\", \"w\") as f:",
    "-                f.write(\"\\n\".join(raw_commit))",
    "-            with open(f\"./debug/{sha}.2.raw.json\", \"w\") as f:",
    "-                f.write(pretty(raw_commit))",
    "-            with open(f\"./debug/{sha}.3.split.json\", \"w\") as f:",
    "-                f.write(pretty(split_commit))",
    "-            with open(f\"./debug/{sha}.4.pretty.json\", \"w\") as f:",
    "-                f.write(pretty(pretty_commit))",
    "+            dump_commit(raw_commit, split_commit, pretty_commit)",
    "+            if not quiet:",
    "+                if pretty_print:",
    "+                    print(pretty(pretty_commit))",
    "+                else:",
    "+                    print(json.dumps(pretty_commit))",
    "         return",
    " ",
    "     for commit in parse(sys.stdin):",
    "-        global_state.record_by(commit)",
    "-        global_state.record_email(commit[\"author\"][\"email\"])",
    "-        if commit[\"author\"][\"email\"] != commit[\"committer\"][\"email\"]:",
    "-            global_state.record_email(commit[\"committer\"][\"email\"])",
    "+        if not summary and not quiet:",
    "+            if pretty_print:",
    "+                print(pretty(commit))",
    "+            else:",
    "+                print(json.dumps(commit))",
    "+        if summary or output_dir:",
    "+            global_state.record_commit(commit)",
    "+",
    "+    if not summary and not output_dir:",
    "+        return",
    " ",
    "-        global_state.record_name(commit[\"author\"][\"name\"])",
    "-        if commit[\"author\"][\"name\"] != commit[\"committer\"][\"name\"]:",
    "-            global_state.record_name(commit[\"committer\"][\"name\"])",
    "+    global_state.generate_summary()",
    " ",
    "-        if \"fingerprint\" in commit:",
    "-            global_state.record_fingerprint(",
    "-                commit[\"committer\"][\"id\"] + \" \" + commit[\"fingerprint\"]",
    "-            )",
    "-        else:",
    "-            global_state.record_unsigned(commit[\"committer\"][\"id\"])",
    "-",
    "-        if \"diff\" not in commit:",
    "-            global_state.commits[\"empty\"].append(commit)",
    "-        elif \"fingerprint\" in commit and commit[\"fingerprint\"] in global_state.trusted:",
    "-            global_state.commits[\"signed-trusted\"].append(commit)",
    "-        elif (",
    "-            \"fingerprint\" in commit",
    "-            and commit[\"fingerprint\"] not in global_state.trusted",
    "-        ):",
    "-            global_state.commits[\"signed-untrusted\"].append(commit)",
    "-        else:",
    "-            global_state.commits[\"unsigned\"].append(commit)",
    "-",
    "-    global_state.by_email = {",
    "-        k: v",
    "-        for k, v in global_state.by_email.items()",
    "-        if len(v[\"names\"]) > 1 or len(v[\"fingerprints\"]) > 1",
    "-    }",
    "-    global_state.by_name = {",
    "-        k: v",
    "-        for k, v in global_state.by_name.items()",
    "-        if len(v[\"emails\"]) > 1 or len(v[\"fingerprints\"]) > 1",
    "-    }",
    "-    global_state.by_id = {",
    "-        k: v for k, v in global_state.by_id.items() if len(v[\"fingerprints\"]) > 1",
    "-    }",
    "-    global_state.by_fingerprint = {",
    "-        k: v for k, v in global_state.by_fingerprint.items() if len(v[\"ids\"]) > 1",
    "-    }",
    "-    global_state.summary = {",
    "-        \"emails\": global_state.emails,",
    "-        \"names\": global_state.names,",
    "-        \"fingerprints\": global_state.fingerprints,",
    "-        \"unsigneds\": global_state.unsigneds,",
    "-        \"commit_counts\": {",
    "-            \"empty\": len(global_state.commits[\"empty\"]),",
    "-            \"signed-trusted\": len(global_state.commits[\"signed-trusted\"]),",
    "-            \"signed-untrusted\": len(global_state.commits[\"signed-untrusted\"]),",
    "-            \"unsigned\": len(global_state.commits[\"unsigned\"]),",
    "-        },",
    "-        \"by_name\": global_state.by_name,",
    "-        \"by_email\": global_state.by_email,",
    "-        \"by_id\": global_state.by_id,",
    "-        \"by_fingerprint\": global_state.by_fingerprint,",
    "-    }",
    "-",
    "-    if not quiet:",
    "+    if summary:",
    "         print(pretty(global_state.summary))",
    "     if output_dir:",
    "         output_to_directory(output_dir)",
    "@@ -256,13 +271,31 @@ def get_args():",
    "         action=\"store_true\",",
    "         help=\"Store debug information to ./debug/\",",
    "     )",
    "+    parser.add_argument(",
    "+        \"--summary\",",
    "+        default=False,",
    "+        action=\"store_true\",",
    "+        help=\"Print summary of commits\",",
    "+    )",
    "+    parser.add_argument(",
    "+        \"--pretty\",",
    "+        default=False,",
    "+        action=\"store_true\",",
    "+        help=\"Print commit JSONs on multiple lines, with indentation\",",
    "+    )",
    "     args = parser.parse_args()",
    "     return args",
    " ",
    " ",
    " def main():",
    "     args = get_args()",
    "-    parse_logs(output_dir=args.output_dir, quiet=args.quiet, debug_parser=args.debug)",
    "+    parse_logs(",
    "+        output_dir=args.output_dir,",
    "+        quiet=args.quiet,",
    "+        debug_parser=args.debug,",
    "+        summary=args.summary,",
    "+        pretty_print=args.pretty,",
    "+    )",
    " ",
    " ",
    " if __name__ == \"__main__\":",
    "diff --git a/internal_parser.py b/internal_parser.py",
    "index 179cf63..2430379 100644",
    "--- a/internal_parser.py",
    "+++ b/internal_parser.py",
    "@@ -1,5 +1,3 @@",
    "-from cfbs.pretty import pretty",
    "-",
    " \"\"\"",
    " This file contains the internal / library functions for parsing the output",
    " of 'git log -p --format=raw --show-signature --stat'",
    "@@ -175,7 +173,6 @@ def raw_commits_to_split_commits(raw_commits):",
    "             )",
    "             line = next(lines)",
    " ",
    "-        print(pretty(raw))",
    "         assert line and line.startswith(\"tree \")  # TODO: Always?",
    "         if line and line.startswith(\"tree \"):",
    "             commit[\"tree\"] = remove_prefix(line, \"tree \")",
    "@@ -186,8 +183,6 @@ def raw_commits_to_split_commits(raw_commits):",
    "                 commit[\"parent\"] = []",
    "             commit[\"parent\"].append(remove_prefix(line, \"parent \"))",
    "             line = next(lines)",
    "-        if \"parent\" in commit:",
    "-            assert 0 < len(commit[\"parent\"]) <= 2",
    " ",
    "         assert line and line.startswith(\"author \")  # TODO: Always?",
    "         if line and line.startswith(\"author \"):",
    "@@ -251,8 +246,9 @@ def split_commits_to_pretty_commits(split_commits):",
    " ",
    "         if \"gpg\" in commit:",
    "             assert commit[\"gpg\"][0].startswith(\"Signature made \")",
    "+            commit[\"valid_signature\"] = True",
    "             if not valid_signature(commit):",
    "-                print(\"Bad signature:\" + pretty(commit))",
    "+                commit[\"valid_signature\"] = False",
    "             final[\"fingerprint\"] = remove_prefix(",
    "                 commit[\"gpg\"][1], \"               using RSA key \"",
    "             )",
    ""
  ],
  "valid_signature": true,
  "fingerprint": "AFE8C5F43057C0093122299F584211AF6AB3EE12"
}
