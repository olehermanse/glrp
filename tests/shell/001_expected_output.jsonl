{"commit": "b300e71e187f41fe54139ac2dd160e185bd43967", "gpg": ["Signature made Fri Jun  6 22:15:23 2025 CEST", "               using RSA key AFE8C5F43057C0093122299F584211AF6AB3EE12", "               issuer \"ole.elgesem@northern.tech\"", "Good signature from \"Ole Herman Schumacher Elgesem <ole@cfengine.com>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <olehelg@ifi.uio.no>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <olehelg@student.matnat.uio.no>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <oleherman93@gmail.com>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <ole.elgesem@northern.tech>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <ole.elgesem@cfengine.com>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <ole@northern.tech>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <olehelg@ulrik.uio.no>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <olehelg@uio.no>\" [ultimate]"], "tree": "9f526357117b29aaacdd0f84a278ec5f65f69779", "parent": ["ecf3218b3b6d7707a253f7956999c581bf0fd85f"], "author": {"id": "Ole Herman Schumacher Elgesem <ole.elgesem@northern.tech>", "name": "Ole Herman Schumacher Elgesem", "email": "ole.elgesem@northern.tech", "timestamp": "1749240923", "timezone": "+0200"}, "committer": {"id": "Ole Herman Schumacher Elgesem <ole.elgesem@northern.tech>", "name": "Ole Herman Schumacher Elgesem", "email": "ole.elgesem@northern.tech", "timestamp": "1749240923", "timezone": "+0200"}, "gpgsig": "-----BEGIN PGP SIGNATURE-----\n\niQJOBAABCAA4FiEEr+jF9DBXwAkxIimfWEIRr2qz7hIFAmhDTFsaHG9sZS5lbGdl\nc2VtQG5vcnRoZXJuLnRlY2gACgkQWEIRr2qz7hJZHw//RDtL+StWb9bpmfIByDm/\n3W0oiW5rppU2lhJ7uTMAcGfB5OHeRPro5ii6eZdZev4r13CIC8ju6c8tVZXJHnOd\nw5vclJjB3aiCYb8A0d0eUKQZd/VDp8vW4BFJr1Xyngf8akkpaoWANApRQBVQyvI6\nuMyLopLLlQ3dD0oUb6KM6mAS78iNd7vnN98UQ1UPK+HiSf9xfbtLiMfnAU7Y947v\narBSAgeyDjlPel8K57TyKUCPYlecsWPoKN4BOQrAPB3YTgGAlZV6as58c7U07V0C\nA765UArTmBWUjqb1S5ZS/dfo2owrqE297hF/fdhty7QfD5ct2JocoDrxrv+5+nmt\nCI7Bcc38GkDDOPJFMtnEfoDmIZXPaq06E5VCSPk6IyxClrJEeu85HnHbnrFIfMtX\nviken9vTdL03D4ARrzDokcrl7tCyJDrp21TWyzrabzedWx56cy3eTgCeA4MJobwX\nHZZwDVTb6DMLFQNHrPW0mfStO1QKBBYlgciLgdsMXVQjQRJjQ+ILAgDPG1Nymw5t\nXgTJoOu8xR2cbmEthdgsGthgY8GkWAH5aFkuSxUS5OZ5cwqIr1JapBlE7RtTGSTg\n9Ts9bnTkRbTajXfrlQ7H5GHnQLUmMHt9WYte5s7cQOqve6fqL1wpfvrjHjUNgl22\nRFuUalL7I62OrIJu7fESUMw=\n=1c5+\n-----END PGP SIGNATURE-----", "message": "Removed unnecessary use of global keyword\n\nSigned-off-by: Ole Herman Schumacher Elgesem <ole.elgesem@northern.tech>", "diff": [" 1 file changed, 1 deletion(-)", "", "diff --git a/glrp/cli.py b/glrp/cli.py", "index 3f64753..900cbed 100644", "--- a/glrp/cli.py", "+++ b/glrp/cli.py", "@@ -331,7 +331,6 @@ def parse_logs(", "                 stderr=subprocess.PIPE,", "                 text=True,", "             )", "-            global all_processes", "             all_processes.append(process)", "             input_file = process.stdout", "         else:", ""], "valid_signature": true, "fingerprint": "AFE8C5F43057C0093122299F584211AF6AB3EE12"}
{"commit": "ecf3218b3b6d7707a253f7956999c581bf0fd85f", "gpg": ["Signature made Fri Jun  6 22:14:10 2025 CEST", "               using RSA key AFE8C5F43057C0093122299F584211AF6AB3EE12", "               issuer \"ole.elgesem@northern.tech\"", "Good signature from \"Ole Herman Schumacher Elgesem <ole@cfengine.com>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <olehelg@ifi.uio.no>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <olehelg@student.matnat.uio.no>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <oleherman93@gmail.com>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <ole.elgesem@northern.tech>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <ole.elgesem@cfengine.com>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <ole@northern.tech>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <olehelg@ulrik.uio.no>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <olehelg@uio.no>\" [ultimate]"], "tree": "926eda20ba69989f234b3806dfda42f353159a32", "parent": ["980a9a634739c23f9555736dc415700fb4215d49"], "author": {"id": "Ole Herman Schumacher Elgesem <ole.elgesem@northern.tech>", "name": "Ole Herman Schumacher Elgesem", "email": "ole.elgesem@northern.tech", "timestamp": "1749240850", "timezone": "+0200"}, "committer": {"id": "Ole Herman Schumacher Elgesem <ole.elgesem@northern.tech>", "name": "Ole Herman Schumacher Elgesem", "email": "ole.elgesem@northern.tech", "timestamp": "1749240850", "timezone": "+0200"}, "gpgsig": "-----BEGIN PGP SIGNATURE-----\n\niQJOBAABCAA4FiEEr+jF9DBXwAkxIimfWEIRr2qz7hIFAmhDTBIaHG9sZS5lbGdl\nc2VtQG5vcnRoZXJuLnRlY2gACgkQWEIRr2qz7hJcsA//Vfmx+q2rURZTKff/deAE\nT2LivphGEDhbqup0506axARkXEkVrnXsRw60+9ggSqQ4dMSI29kwx6sspcj9Fcb8\n1rhCK12lwXrbwJg/h+5NiABt1TuRIfKEYnsiYQbbtThQFwLGFs5RwNvj8LHyOGD9\ndUAOkPBWOSfJS8On19Yp3cob3yCgB/OHURPL+3cDe2y0DrJreix4qfra5pvPXUMf\nXpxa3XITp4JkqUHIeaswToIXqjVpv0JEm/9oaN8AUH399igNYbqH6OIjlpOgGAEg\n4gS/DwVXTP+u4ugiezY6muzbpSzIs4j60W5+B08HVLYDg3wAGf51U//lUyKORJhe\nzfXjDO7SyOMJ313dCcmtB8aG3mDvdnrXroW4iAC/baRl0ZPEdSqHieHcdPTWVEnn\nE8Y+GoerzCGnD6wHTTjZjWaY5FHxLhG1xnoF9YNJxEx0ll2j15ahEyKE0OUO9W2O\n0uhArd1JaKy8hLEr9gpV9yGmD6cNbFll2tYnngqSC68U8sd6y3tOt1iOCguFrme6\n2d5Z9MmSHp53oY1avmBIN5I9NYuHk7Ad2UbsXUeGKDD++4SWa0nmqcM75Yu5Z8sW\nKkS1XwjLEcMSRDU7R1lfWqXgVt0NAMwnJCWmWAcGT9bYB59/CtS8QbX8cLkYB897\nz2gqIjQU6wHQbvN60AVq8mg=\n=x4bN\n-----END PGP SIGNATURE-----", "message": "Fixed small f-string mistake\n\nSigned-off-by: Ole Herman Schumacher Elgesem <ole.elgesem@northern.tech>", "diff": [" 1 file changed, 1 insertion(+), 1 deletion(-)", "", "diff --git a/glrp/cli.py b/glrp/cli.py", "index 63ae1ea..3f64753 100644", "--- a/glrp/cli.py", "+++ b/glrp/cli.py", "@@ -211,7 +211,7 @@ def output_to_directory(output_dir):", "             commit,", "         )", "         write_json(", "-            f\"{output_dir}index/{str(index).rjust(6, \"0\")}.json\",", "+            f\"{output_dir}index/{str(index).rjust(6, '0')}.json\",", "             commit,", "         )", "         index += 1", ""], "valid_signature": true, "fingerprint": "AFE8C5F43057C0093122299F584211AF6AB3EE12"}
{"commit": "980a9a634739c23f9555736dc415700fb4215d49", "gpg": ["Signature made Fri Jun  6 22:12:31 2025 CEST", "               using RSA key AFE8C5F43057C0093122299F584211AF6AB3EE12", "               issuer \"ole.elgesem@northern.tech\"", "Good signature from \"Ole Herman Schumacher Elgesem <ole@cfengine.com>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <olehelg@ifi.uio.no>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <olehelg@student.matnat.uio.no>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <oleherman93@gmail.com>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <ole.elgesem@northern.tech>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <ole.elgesem@cfengine.com>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <ole@northern.tech>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <olehelg@ulrik.uio.no>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <olehelg@uio.no>\" [ultimate]"], "tree": "087fbc405d6700bbd329ea8de39b2fe5485cefbd", "parent": ["5bc89db3f6ff6c83717243f0591ae1534714d276"], "author": {"id": "Ole Herman Schumacher Elgesem <ole.elgesem@northern.tech>", "name": "Ole Herman Schumacher Elgesem", "email": "ole.elgesem@northern.tech", "timestamp": "1749240729", "timezone": "+0200"}, "committer": {"id": "Ole Herman Schumacher Elgesem <ole.elgesem@northern.tech>", "name": "Ole Herman Schumacher Elgesem", "email": "ole.elgesem@northern.tech", "timestamp": "1749240729", "timezone": "+0200"}, "gpgsig": "-----BEGIN PGP SIGNATURE-----\n\niQJOBAABCAA4FiEEr+jF9DBXwAkxIimfWEIRr2qz7hIFAmhDS68aHG9sZS5lbGdl\nc2VtQG5vcnRoZXJuLnRlY2gACgkQWEIRr2qz7hLGUxAAkXxpsGlH4c64TRCTBJYm\nZC43yEjFSaF6SVdxD6TDCn2QVoU6rkOPJAOPvN1uiq6PH0bFzqtpBMA5YUAnmQug\nKLstDuMshHENgIskY5MvPlShCq+iaLQ4FR8/nhRLvM/9oEjIXaYvRCrpJqNu/ug/\nmwdPkss6CsAvTrD9wDKvwWBWpuwB4ExpUaB/dRgYmBQo5gskwZTNXZpX+XcCjhMu\n7hqdhG+46uYb1+i5oNQ4KoZcNRyDqRJL/Vv7PvHGazQ+EmF4e/A4cRty05wpjiP7\nAw1fAXibVri0xNkjUY/JlJzenyzeJXgDLHM2Zzmt+mXWvzjsxoYJDp7Gi/8bWll+\nV2KcM3+I1u79m3ZjK0TSJpOGGm5N3DEY8HB1hLRvIbQc8ETYmVXkZ/fKry6EraSq\nc6UgC0kDE+78QDCpbXQyUo7UL/y5FWXRK2Ke3d9DU4/auPNTO05siMvqSqu/K/NR\nGT6xt/ER9i0UCEQuD80YIOyUhjdELhJDaFvitQhYCIy3D9eYZJPuas6QyvVR291S\nvQugAgoQ6ne7oV+E2KcZog+FVPASZ1Z9Tmt2KCzWg7Esb/AiG1tu3EQsKIVJ1Nxv\nnE0woC4Ymh9Dp3G4K7EB51hst2FNYQrwutVhM606gplP84sWisDjqGgnK4UIsFFT\n4hlYQN/q44dO7DRiNuz9OeQ=\n=SDpe\n-----END PGP SIGNATURE-----", "message": "Added argument for input file or folder\n\nSigned-off-by: Ole Herman Schumacher Elgesem <ole.elgesem@northern.tech>", "diff": [" README.md               |  50 +++++++++++--", " glrp/cli.py             | 181 ++++++++++++++++++++++++++++++++++++++----------", " glrp/internal_parser.py |   2 +-", " requirements.txt        |   1 +", " 5 files changed, 194 insertions(+), 45 deletions(-)", "", "diff --git a/.gitignore b/.gitignore", "index ef9b168..f71914e 100644", "--- a/.gitignore", "+++ b/.gitignore", "@@ -4,4 +4,7 @@", " __pycache__/", " /debug/", " /trusted/", "-/core", "\\ No newline at end of file", "+/glrp/VERSION", "+*.egg-info", "+/build/", "+/venv/", "diff --git a/README.md b/README.md", "index c6720fc..3dc59f8 100644", "--- a/README.md", "+++ b/README.md", "@@ -1,4 +1,4 @@", "-# glrp - git-log-raw-parser", "+# glrp - git log raw parser", " ", " A parser for parsing the command:", " ", "@@ -8,13 +8,15 @@ git log -p --format=raw --show-signature --stat", " ", " Simply pipe the output:", " ", "-```", "+```bash", " git log -p --format=raw --show-signature --stat | glrp --pretty", " ```", " ", " The CLI outputs one JSON object per commit.", "-The JSON objects are separated by newlines.", "+Each JSON object is on one line, they are separated by newlines.", "+This format is sometimes referred to as JSONL or JSON lines format.", " With `--pretty`, each JSON object is indented to be more readable and printed across multiple lines.", "+(But then it is no longer JSONL, strictly speaking).", " ", " ## Why?", " ", "@@ -38,23 +40,59 @@ pipx install glrp", " ", " ## Usage", " ", "-Using it is simple, just run the `git log` command and pipe it to the standard input of `git_log_raw_parser`", "+Using it is simple.", "+Run it inside a git repo:", " ", "+```bash", "+glrp .", " ```", "+", "+Or you can pipe `git log` output to it:", "+", "+```bash", " git log -p --format=raw --show-signature --stat | glrp --output-dir=./out/", " ```", " ", " Or perhaps a bit more realistic:", " ", "-```", "+```bash", " git clone https://github.com/cfengine/core", " (cd core && git log -p --format=raw --show-signature --stat HEAD~500..HEAD 2>/dev/null) | glrp", " ```", " ", " (Clone CFEngine core, start subshell which enters the subdirectory and runs git log for the past 500 commits).", " ", "+### Specifying input", "+", "+By default, `glrp` parses standard input, and outputs to stdout.", "+To take input from somewhere else, supply a filename:", "+", "+```bash", "+glrp some_file.jsonl", "+```", "+", "+The file, `some_file.jsonl` is opened and read, its content is used instead of standard input.", "+You can also specify the path to a folder:", "+", "+```bash", "+glrp some_dir/", "+```", "+", "+The `glrp` tool will run the git log command (`git log -p --format=raw --show-signature --stat`) inside that folder.", "+Output from the `git` command will be parsed instead of standard input.", "+", "+### Specifying output", "+", "+You can use shell redirection to print to file instead of standard output:", "+", "+```bash", "+glrp . > output.txt", "+```", "+", " ## Important notes", " ", "+**Note:** This tool is meant specifically as a parser for the command shown above, not as a generic parser for all the different things `git log` can output.", "+", " **Warning:** The output of `--show-signature` varies depending on which keys you have imported / trusted in your installation of GPG.", " Make sure you import the correct GPG keys beforehand, and don't expect output to be identical across different machines with different GPG states.", " ", "@@ -66,4 +104,4 @@ This tool can be used for searching / analyzing commits, but don't use it as som", " ## Details", " ", " For details on how the parsing works, try running with `--debug` and look at the resulting `./debug/` folder.", "-Also, see the comments in the source code; [./git_log_raw_parser.py](./git_log_raw_parser.py)", "+Also, see the comments in the source code; [./glrp/internal_parser.py](./glrp/internal_parser.py)", "diff --git a/glrp/cli.py b/glrp/cli.py", "index d5e50c4..63ae1ea 100644", "--- a/glrp/cli.py", "+++ b/glrp/cli.py", "@@ -1,16 +1,20 @@", "+import subprocess", " import os", " import sys", " import argparse", " import json", "+from typing import Optional", " ", " from glrp.internal_parser import parse, parse_to_all_representations", " from glrp.version import string as version_string", "-from cfbs.utils import find, mkdir, rm", "-from cfbs.pretty import pretty", "+from cfbs.utils import find, mkdir, rm, write_json", "+from cfbs.pretty import pretty as prettify", " ", " # Usage:", " # git log -p --format=raw --show-signature --stat | python3 git_log_raw_parser.py", " ", "+all_processes = []", "+", " ", " class GlobalState:", "     def __init__(self):", "@@ -20,13 +24,15 @@ class GlobalState:", "         self.fingerprints = {}", "         self.unsigneds = {}", " ", "-        self.commits = {", "+        self.counts = {", "             \"empty\": [],", "             \"unsigned\": [],", "             \"signed-trusted\": [],", "             \"signed-untrusted\": [],", "         }", " ", "+        self.commits = {}", "+", "         self.by_name = {}", "         self.by_email = {}", "         self.by_fingerprint = {}", "@@ -110,6 +116,7 @@ class GlobalState:", "                     self.by_id[id][\"fingerprints\"].append(fingerprint)", " ", "     def record_commit(self, commit):", "+        self.commits[commit[\"commit\"]] = commit", "         self.record_by(commit)", "         self.record_email(commit[\"author\"][\"email\"])", " ", "@@ -128,13 +135,13 @@ class GlobalState:", "             self.record_unsigned(commit[\"committer\"][\"id\"])", " ", "         if \"diff\" not in commit:", "-            self.commits[\"empty\"].append(commit)", "+            self.counts[\"empty\"].append(commit)", "         elif \"fingerprint\" in commit and commit[\"fingerprint\"] in self.trusted:", "-            self.commits[\"signed-trusted\"].append(commit)", "+            self.counts[\"signed-trusted\"].append(commit)", "         elif \"fingerprint\" in commit and commit[\"fingerprint\"] not in self.trusted:", "-            self.commits[\"signed-untrusted\"].append(commit)", "+            self.counts[\"signed-untrusted\"].append(commit)", "         else:", "-            self.commits[\"unsigned\"].append(commit)", "+            self.counts[\"unsigned\"].append(commit)", " ", "     def generate_summary(self):", "         self.by_email = {", "@@ -157,10 +164,10 @@ class GlobalState:", "             \"fingerprints\": self.fingerprints,", "             \"unsigneds\": self.unsigneds,", "             \"commit_counts\": {", "-                \"empty\": len(self.commits[\"empty\"]),", "-                \"signed-trusted\": len(self.commits[\"signed-trusted\"]),", "-                \"signed-untrusted\": len(self.commits[\"signed-untrusted\"]),", "-                \"unsigned\": len(self.commits[\"unsigned\"]),", "+                \"empty\": len(self.counts[\"empty\"]),", "+                \"signed-trusted\": len(self.counts[\"signed-trusted\"]),", "+                \"signed-untrusted\": len(self.counts[\"signed-untrusted\"]),", "+                \"unsigned\": len(self.counts[\"unsigned\"]),", "             },", "             \"by_name\": self.by_name,", "             \"by_email\": self.by_email,", "@@ -192,10 +199,22 @@ def output_to_directory(output_dir):", " ", "     rm(output_dir, missing_ok=True)", " ", "-    mkdir(\"./out/\", exist_ok=True)", "+    mkdir(f\"{output_dir}\", exist_ok=True)", "+", "+    with open(f\"{output_dir}summary.json\", \"w\") as f:", "+        f.write(prettify(global_state.summary) + \"\\n\")", " ", "-    with open(\"./out/summary.json\", \"w\") as f:", "-        f.write(pretty(global_state.summary) + \"\\n\")", "+    index = 0", "+    for sha, commit in global_state.commits.items():", "+        write_json(", "+            f\"{output_dir}shas/{sha}.json\",", "+            commit,", "+        )", "+        write_json(", "+            f\"{output_dir}index/{str(index).rjust(6, \"0\")}.json\",", "+            commit,", "+        )", "+        index += 1", " ", " ", " def dump_commit(raw_commit, split_commit, pretty_commit):", "@@ -203,37 +222,66 @@ def dump_commit(raw_commit, split_commit, pretty_commit):", "     with open(f\"./debug/{sha}.1.raw.txt\", \"w\") as f:", "         f.write(\"\\n\".join(raw_commit))", "     with open(f\"./debug/{sha}.2.raw.json\", \"w\") as f:", "-        f.write(pretty(raw_commit))", "+        f.write(prettify(raw_commit))", "     with open(f\"./debug/{sha}.3.split.json\", \"w\") as f:", "-        f.write(pretty(split_commit))", "+        f.write(prettify(split_commit))", "     with open(f\"./debug/{sha}.4.pretty.json\", \"w\") as f:", "-        f.write(pretty(pretty_commit))", "+        f.write(prettify(pretty_commit))", " ", " ", "-def parse_logs(", "-    output_dir=None, quiet=False, debug_parser=False, summary=False, pretty_print=False", "+def _validate(", "+    input: Optional[str] = None,", "+    output: Optional[str] = None,", "+    output_dir: Optional[str] = None,", "+    quiet: bool = False,", "+    debug: bool = False,", "+    summary: Optional[str] = None,", "+    pretty: bool = False,", " ):", "-    assert debug_parser or not quiet or output_dir or summary", "-    # If not, there is nothing to do", "-", "-    if debug_parser:", "+    assert (", "+        input == None or input == \"-\" or os.path.isfile(input) or os.path.isdir(input)", "+    )", "+    if output is not None:", "+        assert isinstance(output, str) and len(output) > 0", "+        assert os.path.isfile(output) or not os.path.exists(output)", "+    if output_dir is not None:", "+        assert isinstance(output_dir, str) and len(output_dir) > 0", "+        assert os.path.isdir(output_dir) or not os.path.exists(output_dir)", "+    assert quiet == True or quiet == False", "+    assert debug == True or debug == False", "+    if summary is not None:", "+        assert isinstance(summary, str) and len(summary) > 0", "+        assert os.path.isfile(summary) or not os.path.exists(summary)", "+    assert pretty == True or pretty == False", "+    return", "+", "+", "+def _parse_logs(", "+    input,", "+    output_dir: Optional[str],", "+    quiet: bool,", "+    debug: bool,", "+    summary: Optional[str],", "+    pretty: bool,", "+):", "+    if debug:", "         rm(\"./debug/\")", "         mkdir(\"./debug/\")", "         for raw_commit, split_commit, pretty_commit in parse_to_all_representations(", "-            sys.stdin", "+            input", "         ):", "             dump_commit(raw_commit, split_commit, pretty_commit)", "             if not quiet:", "-                if pretty_print:", "-                    print(pretty(pretty_commit))", "+                if pretty:", "+                    print(prettify(pretty_commit))", "                 else:", "                     print(json.dumps(pretty_commit))", "         return", " ", "-    for commit in parse(sys.stdin):", "+    for commit in parse(input):", "         if not summary and not quiet:", "-            if pretty_print:", "-                print(pretty(commit))", "+            if pretty:", "+                print(prettify(commit))", "             else:", "                 print(json.dumps(commit))", "         if summary or output_dir:", "@@ -245,9 +293,63 @@ def parse_logs(", "     global_state.generate_summary()", " ", "     if summary:", "-        print(pretty(global_state.summary))", "+        print(prettify(global_state.summary))", "     if output_dir:", "         output_to_directory(output_dir)", "+    pass", "+", "+", "+class UserError(Exception):", "+    pass", "+", "+", "+def parse_logs(", "+    input: Optional[str] = None,", "+    output_dir: Optional[str] = None,", "+    quiet: bool = False,", "+    debug: bool = False,", "+    summary: Optional[str] = None,", "+    pretty: bool = False,", "+):", "+    _validate(", "+        input=input,", "+        output_dir=output_dir,", "+        quiet=quiet,", "+        debug=debug,", "+        summary=summary,", "+        pretty=pretty,", "+    )", "+", "+    if input in (None, \"-\"):", "+        input_file = sys.stdin", "+    else:", "+        if os.path.isdir(input):", "+            process = subprocess.Popen(", "+                [\"git\", \"log\", \"-p\", \"--format=raw\", \"--show-signature\", \"--stat\"],", "+                cwd=input,", "+                stdout=subprocess.PIPE,", "+                stderr=subprocess.PIPE,", "+                text=True,", "+            )", "+            global all_processes", "+            all_processes.append(process)", "+            input_file = process.stdout", "+        else:", "+            try:", "+                input_file = open(input, \"r\")", "+            except:", "+                raise UserError(f\"Could not open '{input}'.\")", "+", "+    _parse_logs(", "+        input=input_file,", "+        output_dir=output_dir,", "+        quiet=quiet,", "+        debug=debug,", "+        summary=summary,", "+        pretty=pretty,", "+    )", "+    for process in all_processes:", "+        process.wait()", " ", " ", " def get_args():", "@@ -255,6 +357,12 @@ def get_args():", "         prog=\"glrp\",", "         description=\"Parses the output of 'git log -p --format=raw --show-signature --stat'\",", "     )", "+    parser.add_argument(", "+        \"input\",", "+        type=str,", "+        nargs=\"?\",", "+        help=\"File to read input from or folder to run 'git' in\",", "+    )", "     parser.add_argument(\"--version\", action=\"version\", version=version_string())", "     parser.add_argument(", "         \"-o\", \"--output-dir\", help=\"Output commits to a folder structure\"", "@@ -269,15 +377,13 @@ def get_args():", "     parser.add_argument(", "         \"-d\",", "         \"--debug\",", "-        default=False,", "         action=\"store_true\",", "-        help=\"Store debug information to ./debug/\",", "+        help=\"Enable debug information\",", "     )", "     parser.add_argument(", "         \"--summary\",", "-        default=False,", "-        action=\"store_true\",", "-        help=\"Print summary of commits\",", "+        type=str,", "+        help=\"Filename for JSON summary\",", "     )", "     parser.add_argument(", "         \"--pretty\",", "@@ -292,11 +398,12 @@ def get_args():", " def main():", "     args = get_args()", "     parse_logs(", "+        input=args.input,", "         output_dir=args.output_dir,", "         quiet=args.quiet,", "-        debug_parser=args.debug,", "+        debug=args.debug,", "         summary=args.summary,", "-        pretty_print=args.pretty,", "+        pretty=args.pretty,", "     )", " ", " ", "diff --git a/glrp/internal_parser.py b/glrp/internal_parser.py", "index a9762fa..acd7d92 100644", "--- a/glrp/internal_parser.py", "+++ b/glrp/internal_parser.py", "@@ -41,7 +41,7 @@ def _reconfigure(input_stream):", "     # encounter exceptions for commit messages / diffs with weird characters.", "     # So we need to assume that sys.stdin is actually TextIOWrapper,", "     # the assertion makes this assumption explicit and makes strict typecheckers like Pyright happy.", "-    assert isinstance(input_stream, TextIOWrapper)", "+    # assert isinstance(input_stream, TextIOWrapper)", "     input_stream.reconfigure(errors=\"replace\")", " ", " ", "diff --git a/requirements.txt b/requirements.txt", "index 8a5aa8e..9e54bef 100644", "--- a/requirements.txt", "+++ b/requirements.txt", "@@ -1,3 +1,4 @@", " cf-remote==0.6.4", " cfbs==4.4.0", " requests==2.32.2", "+setuptools==80.9.0", ""], "valid_signature": true, "fingerprint": "AFE8C5F43057C0093122299F584211AF6AB3EE12"}
{"commit": "5bc89db3f6ff6c83717243f0591ae1534714d276", "gpg": ["Signature made Tue Jun  3 03:32:30 2025 CEST", "               using RSA key AFE8C5F43057C0093122299F584211AF6AB3EE12", "               issuer \"ole.elgesem@northern.tech\"", "Good signature from \"Ole Herman Schumacher Elgesem <ole@cfengine.com>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <olehelg@ifi.uio.no>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <olehelg@student.matnat.uio.no>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <oleherman93@gmail.com>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <ole.elgesem@northern.tech>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <ole.elgesem@cfengine.com>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <ole@northern.tech>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <olehelg@ulrik.uio.no>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <olehelg@uio.no>\" [ultimate]"], "tree": "6ea78e55d70221aba0528591d8702a353cfc3d73", "parent": ["5703d17d8b1a10d1e6cc1c78397b488ee40d19d5"], "author": {"id": "Ole Herman Schumacher Elgesem <ole.elgesem@northern.tech>", "name": "Ole Herman Schumacher Elgesem", "email": "ole.elgesem@northern.tech", "timestamp": "1748914350", "timezone": "+0200"}, "committer": {"id": "Ole Herman Schumacher Elgesem <ole.elgesem@northern.tech>", "name": "Ole Herman Schumacher Elgesem", "email": "ole.elgesem@northern.tech", "timestamp": "1748914350", "timezone": "+0200"}, "gpgsig": "-----BEGIN PGP SIGNATURE-----\n\niQJOBAABCAA4FiEEr+jF9DBXwAkxIimfWEIRr2qz7hIFAmg+UK4aHG9sZS5lbGdl\nc2VtQG5vcnRoZXJuLnRlY2gACgkQWEIRr2qz7hI8aRAAjsFEI0oRGnXaDyBWL/vT\nUp5C0i6wwLK/8Z5QJ7i5BlNN8A627/X2T6Ob59RTTg72J9POJy9W9GHJqWKurohY\n/z22zspwRgmBymvW7Q7TkfcP9Aoo7eYn5KPVeyV9DU0PIcZXrWf2VaSFTHtTTHmi\n9Ft5N9RJP9CMXMDIHqA+aKqz8Ov5u20b+BCOTevyoZH1ZZK5NgmPDLsVfLSYk2HP\n+Qx1goFo4w7ONw7XvqERrSefq7tdMjst614vOpfWVRkJaBCE6aRlPhIhpL1zJleu\nSXJNndMetJ8uvehRl6kRH4iHEhnzLbDh01UdFKCyuZtRt+mjqyP8AuLuzziCG6AB\nLScYEE0ulJmyIVndnKBlDqHh33yg11SDMgE76VYGbnpWpEy1myA9LXYrltc78HoS\n6Pqwq6lXTkF2626ygl7npfbMspUEpo0BDLFYGSBBcNKmSYqoO6mySL3gGe9DQK5I\nm8giXgx0TV5wn3v0qxP06872ZGAucLNOzqtfeuaSOE9aKkOKoFcpLJWZicby/nH1\n3//7zzdoTLUgXbRtfXiI3dddsJZfDY2QgQeE3qamah77kUZFvNgISIALDko3BTyV\n8U3bliOSq9OhDH/UsZxBQRSDLYHQJQL/NV1HfKBLAW0otflDguDdW5fRXB2lG6tZ\nAbj02FxZ2dxBM33DQmq8HMg=\n=/jsl\n-----END PGP SIGNATURE-----", "message": "Improved README with better instructions\n\nSigned-off-by: Ole Herman Schumacher Elgesem <ole.elgesem@northern.tech>", "diff": [" 1 file changed, 12 insertions(+), 2 deletions(-)", "", "diff --git a/README.md b/README.md", "index 48611f1..c6720fc 100644", "--- a/README.md", "+++ b/README.md", "@@ -6,6 +6,16 @@ A parser for parsing the command:", " git log -p --format=raw --show-signature --stat", " ```", " ", "+Simply pipe the output:", "+", "+```", "+git log -p --format=raw --show-signature --stat | glrp --pretty", "+```", "+", "+The CLI outputs one JSON object per commit.", "+The JSON objects are separated by newlines.", "+With `--pretty`, each JSON object is indented to be more readable and printed across multiple lines.", "+", " ## Why?", " ", " The above command provides a lot of useful information about git commits, which we can analyze, including:", "@@ -31,14 +41,14 @@ pipx install glrp", " Using it is simple, just run the `git log` command and pipe it to the standard input of `git_log_raw_parser`", " ", " ```", "-git log -p --format=raw --show-signature --stat | python3 -m glrp --output-dir=./out/", "+git log -p --format=raw --show-signature --stat | glrp --output-dir=./out/", " ```", " ", " Or perhaps a bit more realistic:", " ", " ```", " git clone https://github.com/cfengine/core", "-(cd core && git log -p --format=raw --show-signature --stat HEAD~500..HEAD 2>/dev/null) | python3 git_log_raw_parser.py", "+(cd core && git log -p --format=raw --show-signature --stat HEAD~500..HEAD 2>/dev/null) | glrp", " ```", " ", " (Clone CFEngine core, start subshell which enters the subdirectory and runs git log for the past 500 commits).", ""], "valid_signature": true, "fingerprint": "AFE8C5F43057C0093122299F584211AF6AB3EE12"}
{"commit": "5703d17d8b1a10d1e6cc1c78397b488ee40d19d5", "gpg": ["Signature made Tue Jun  3 03:09:51 2025 CEST", "               using RSA key AFE8C5F43057C0093122299F584211AF6AB3EE12", "               issuer \"ole.elgesem@northern.tech\"", "Good signature from \"Ole Herman Schumacher Elgesem <ole@cfengine.com>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <olehelg@ifi.uio.no>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <olehelg@student.matnat.uio.no>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <oleherman93@gmail.com>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <ole.elgesem@northern.tech>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <ole.elgesem@cfengine.com>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <ole@northern.tech>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <olehelg@ulrik.uio.no>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <olehelg@uio.no>\" [ultimate]"], "tree": "860dfaa6032ba5b269abe5e2f08d049b2079aa16", "parent": ["9440ef6739881f78fb67d6aa201c4cbf1d1d8223"], "author": {"id": "Ole Herman Schumacher Elgesem <ole.elgesem@northern.tech>", "name": "Ole Herman Schumacher Elgesem", "email": "ole.elgesem@northern.tech", "timestamp": "1748912991", "timezone": "+0200"}, "committer": {"id": "Ole Herman Schumacher Elgesem <ole.elgesem@northern.tech>", "name": "Ole Herman Schumacher Elgesem", "email": "ole.elgesem@northern.tech", "timestamp": "1748912991", "timezone": "+0200"}, "gpgsig": "-----BEGIN PGP SIGNATURE-----\n\niQJOBAABCAA4FiEEr+jF9DBXwAkxIimfWEIRr2qz7hIFAmg+S18aHG9sZS5lbGdl\nc2VtQG5vcnRoZXJuLnRlY2gACgkQWEIRr2qz7hI0bw/9ENvxTFlWPho86HgWqxn1\nMhizt4So4uyYj9COepRw5aZF9XiFCt4X+ivLV8PC+arqpf/ilbKIoTCWKo8Nc7io\n3QfInXyiiZ5tVgLXz/HN7MdMUNZyFh/882jfHXqGuyaAFtmtoGV1tgympLvvtYkW\nl3G3lT4NOBg5ZyJjGrKT0IjO7OZS31q/JdcSQORPQgMI1rbEbeUJ2IrSH/vnhwii\nQO5j19h6f6Un2dGlbTNJ4qoZ6smImXyOrG5lFO/pH/qCdF+EUj1vkuZz1WgOxWgM\nAXU54KMAA5V3u5sBh2c87/rbXcjBYtOUUmGARo2vSvbBSbAHznYSb308T8KCxC35\np6smPi7wb2a8QN0sKqcZgSYWATsaTpinhM6LNhRlV5fgziZ8XlsWZ73z8/OvVxFz\nG8tzQRfoKdAtEIjsYfRNKf5MJB9U9UeKtYYwHWzB84l9LCoxaGGzOk9KbWJeanaV\ndbJ8T46Vz4XSHjpAeItgVIUiGO6GgRnRJj3S6Jm5zAteEeyOLoqPnl4FzoUfhU1r\na+kvGhQGAJqeea5vLQIkw+8MT8dMM4NYiwSbLM0isS6owjqCiTiCu5hYTX7tGUNu\n3atLfM1U6Y3U1cIRnsxnNHK6RIxT6DZr79AJKkIlhE8JvDRXkWVFixFRh1x9eM3j\ne5sMXP+0edYxO6DEh87daUE=\n=4djw\n-----END PGP SIGNATURE-----", "message": "Fixed license in setup.py\n\nSigned-off-by: Ole Herman Schumacher Elgesem <ole.elgesem@northern.tech>", "diff": [" 1 file changed, 3 insertions(+), 3 deletions(-)", "", "diff --git a/setup.py b/setup.py", "index c19e867..2b9cd53 100644", "--- a/setup.py", "+++ b/setup.py", "@@ -29,8 +29,8 @@ with open(\"README.md\", \"r\", encoding=\"utf-8\") as fh:", " setuptools.setup(", "     name=\"glrp\",", "     version=glrp_version,", "-    author=\"Northern.tech, Inc.\",", "-    author_email=\"contact@northern.tech\",", "+    author=\"Ole Herman Schumacher Elgesem\",", "+    author_email=\"\",", "     description=\"Parser for git log --raw\",", "     long_description=long_description,", "     long_description_content_type=\"text/markdown\",", "@@ -40,7 +40,7 @@ setuptools.setup(", "     include_package_data=True,", "     classifiers=[", "         \"Programming Language :: Python :: 3\",", "-        \"License :: OSI Approved :: GNU General Public License v3 (GPLv3)\",", "+        \"License :: OSI Approved :: MIT License\",", "         \"Operating System :: OS Independent\",", "     ],", "     python_requires=\">=3.6\",", ""], "valid_signature": true, "fingerprint": "AFE8C5F43057C0093122299F584211AF6AB3EE12"}
{"commit": "9440ef6739881f78fb67d6aa201c4cbf1d1d8223", "gpg": ["Signature made Tue Jun  3 02:59:52 2025 CEST", "               using RSA key AFE8C5F43057C0093122299F584211AF6AB3EE12", "               issuer \"ole.elgesem@northern.tech\"", "Good signature from \"Ole Herman Schumacher Elgesem <ole@cfengine.com>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <olehelg@ifi.uio.no>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <olehelg@student.matnat.uio.no>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <oleherman93@gmail.com>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <ole.elgesem@northern.tech>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <ole.elgesem@cfengine.com>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <ole@northern.tech>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <olehelg@ulrik.uio.no>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <olehelg@uio.no>\" [ultimate]"], "tree": "c72457c35751742d7a01cbd931490739d1000457", "parent": ["46376e74108572f3ac528880e69544df1412e6ee"], "author": {"id": "Ole Herman Schumacher Elgesem <ole.elgesem@northern.tech>", "name": "Ole Herman Schumacher Elgesem", "email": "ole.elgesem@northern.tech", "timestamp": "1748912378", "timezone": "+0200"}, "committer": {"id": "Ole Herman Schumacher Elgesem <ole.elgesem@northern.tech>", "name": "Ole Herman Schumacher Elgesem", "email": "ole.elgesem@northern.tech", "timestamp": "1748912392", "timezone": "+0200"}, "gpgsig": "-----BEGIN PGP SIGNATURE-----\n\niQJOBAABCAA4FiEEr+jF9DBXwAkxIimfWEIRr2qz7hIFAmg+SQgaHG9sZS5lbGdl\nc2VtQG5vcnRoZXJuLnRlY2gACgkQWEIRr2qz7hLHTBAAoRNWy5gBv16XEoh82axN\nwXx1wCbIMAk+Yep//WWWuJXkL0pFMrO5ZMx+ChywADWnY5ef1D9M3WVZ60TqU34C\nMoHE0tdPb7YzXkl4DbaspTszNRCJW4fM4XAkDGHyNiB5zf+KieH40ENqULcKz5jB\nnG98Kiiu0LkSOSwaYppXRJCeQrhZa2Yd0JK0fDP6ewSyaGgxufa7yR4Sg4Psf+7N\nAEKEFAnJWq2xbSKdptPNDxUS6/AzSsxtZcXM8EFc3et2mDnuLMR0xe5guii40Vv9\nDBfZEExpluKLJI1+r/bkFFG8uqKwkrlTpLY/W9L1JRnaxgoo5ubg69q61sPGEUYt\ngmQOBkeiOocTMEWx3NRjatZ7uHfomTi2sarYGOixHexpAvr0xzO+3MmrKy7knDLF\nMV92wSEPrqT4T/6h+iArtSeOxdfTZbz69SOp1GwW+MRFEMos129rRQ/jc70I0uMl\n+GPRcYhvmL8s3jWFpf9JCW3hAEz8OVxdncGr7GQGP5JL/v+9FYSckDrGtEi6qspV\n8/l1/a4prFH+r2BqwnVJvwfSKDWzlUzMiBTSZUd0UHXDilzgZLFTM2oz0k8t9g0k\nzS3wcTyGuPDGhSX2tz644RX3vVbU3NVMY2UOoztQaL28dj9k/PoSTQkeehIuT0yK\nnGO3hqTD03YwJotYiZbOFUQ=\n=Hq/y\n-----END PGP SIGNATURE-----", "message": "Fixed version string import\n\nSigned-off-by: Ole Herman Schumacher Elgesem <ole.elgesem@northern.tech>", "diff": [" 1 file changed, 1 insertion(+), 1 deletion(-)", "", "diff --git a/glrp/cli.py b/glrp/cli.py", "index a9f281d..d5e50c4 100644", "--- a/glrp/cli.py", "+++ b/glrp/cli.py", "@@ -4,7 +4,7 @@ import argparse", " import json", " ", " from glrp.internal_parser import parse, parse_to_all_representations", "-import glrp.version.string as version_string", "+from glrp.version import string as version_string", " from cfbs.utils import find, mkdir, rm", " from cfbs.pretty import pretty", " ", ""], "valid_signature": true, "fingerprint": "AFE8C5F43057C0093122299F584211AF6AB3EE12"}
{"commit": "46376e74108572f3ac528880e69544df1412e6ee", "gpg": ["Signature made Tue Jun  3 02:56:59 2025 CEST", "               using RSA key AFE8C5F43057C0093122299F584211AF6AB3EE12", "               issuer \"ole.elgesem@northern.tech\"", "Good signature from \"Ole Herman Schumacher Elgesem <ole@cfengine.com>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <olehelg@ifi.uio.no>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <olehelg@student.matnat.uio.no>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <oleherman93@gmail.com>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <ole.elgesem@northern.tech>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <ole.elgesem@cfengine.com>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <ole@northern.tech>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <olehelg@ulrik.uio.no>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <olehelg@uio.no>\" [ultimate]"], "tree": "bf22de0a91c110e3fbc08565640cf70f3fef79ea", "parent": ["3c1d604be73c7b0fa5fecad39643ff4725504227"], "author": {"id": "Ole Herman Schumacher Elgesem <ole.elgesem@northern.tech>", "name": "Ole Herman Schumacher Elgesem", "email": "ole.elgesem@northern.tech", "timestamp": "1748912219", "timezone": "+0200"}, "committer": {"id": "Ole Herman Schumacher Elgesem <ole.elgesem@northern.tech>", "name": "Ole Herman Schumacher Elgesem", "email": "ole.elgesem@northern.tech", "timestamp": "1748912219", "timezone": "+0200"}, "gpgsig": "-----BEGIN PGP SIGNATURE-----\n\niQJOBAABCAA4FiEEr+jF9DBXwAkxIimfWEIRr2qz7hIFAmg+SFsaHG9sZS5lbGdl\nc2VtQG5vcnRoZXJuLnRlY2gACgkQWEIRr2qz7hKT3A//dhjSvbaT1PM3P0ysVsM3\nGGv31aA6Tv4LaBawhCWAoFn6IgMeEPVp7PaBiKmVyUxqhXJsCIFl5dp9ZGeEBA2s\nYJe1xaw8A5dG/gWL3EeQ0Aj/dHquJQvCFRe+vnVd8/HpEEbN19/fjkjZoMSPtRA0\nTYYnENkUEivOwS/jCgY9x7KXDy8AQDyln6Dg/CGuZj/LVzFPQzr7RSMhiNeq/X8M\nFVH7vefTD0sAhGdK0+imMq0JqoU5DA6j2nIcZECpXN+2gli5L2LO7TXep8gfamNe\nbjPJawl291nK4TSPH2ASrm9dmCL6BB4fdq2TK2xT9Q/VQLcYa7Kg60aspFaP3UYP\nO6H22+qCwu9cdQS47Mna/ZPQEoN06B4TM52JYsSLzFAnyKDojcVCHF7UEP6tyNkj\ncITNRY21nNYrqdKTXg64DspBFm49COhyivDu9P6IUrO4VqjA/4LamjXRtjHWZgfW\nsVY7Ggr7Cqm486tAHb6gqN+JaJ5zAdV6VAx1g6hIggPRFKjFXKRZ7Ian7MYO17Eq\nnL1Axw6bPfRdTFn2x7iUCq0/hGlo7Fj0h5aWCfmiJREKitOfOz/XrYaTc8Wh/Qtx\nzKUd5vHVO2MYa+FTmgXco6wBUrZz8p3nRg4JwTfPIrPs8ZnmRDu0Z/U78W/DMF4k\n0yCi7iL3TeU4vJB8UHbsBw8=\n=gnc1\n-----END PGP SIGNATURE-----", "message": "Fixed README\n\nSigned-off-by: Ole Herman Schumacher Elgesem <ole.elgesem@northern.tech>", "diff": [" 1 file changed, 9 insertions(+), 3 deletions(-)", "", "diff --git a/README.md b/README.md", "index fbeb3c9..48611f1 100644", "--- a/README.md", "+++ b/README.md", "@@ -1,8 +1,8 @@", "-# git-log-raw-parser", "+# glrp - git-log-raw-parser", " ", " A parser for parsing the command:", " ", "-```", "+```bash", " git log -p --format=raw --show-signature --stat", " ```", " ", "@@ -20,6 +20,12 @@ The above command provides a lot of useful information about git commits, which", " On its own, git log does not output its information in a format which is easy for other programs to use.", " So, this tool parses the output and turns it into JSON which is more easy to analyze and check.", " ", "+## Installation", "+", "+```bash", "+pipx install glrp", "+```", "+", " ## Usage", " ", " Using it is simple, just run the `git log` command and pipe it to the standard input of `git_log_raw_parser`", "@@ -37,7 +43,7 @@ git clone https://github.com/cfengine/core", " ", " (Clone CFEngine core, start subshell which enters the subdirectory and runs git log for the past 500 commits).", " ", "-## Improtant notes", "+## Important notes", " ", " **Warning:** The output of `--show-signature` varies depending on which keys you have imported / trusted in your installation of GPG.", " Make sure you import the correct GPG keys beforehand, and don't expect output to be identical across different machines with different GPG states.", ""], "valid_signature": true, "fingerprint": "AFE8C5F43057C0093122299F584211AF6AB3EE12"}
{"commit": "3c1d604be73c7b0fa5fecad39643ff4725504227", "gpg": ["Signature made Tue Jun  3 02:54:34 2025 CEST", "               using RSA key AFE8C5F43057C0093122299F584211AF6AB3EE12", "               issuer \"ole.elgesem@northern.tech\"", "Good signature from \"Ole Herman Schumacher Elgesem <ole@cfengine.com>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <olehelg@ifi.uio.no>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <olehelg@student.matnat.uio.no>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <oleherman93@gmail.com>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <ole.elgesem@northern.tech>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <ole.elgesem@cfengine.com>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <ole@northern.tech>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <olehelg@ulrik.uio.no>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <olehelg@uio.no>\" [ultimate]"], "tree": "7a953222f2d50da9b2b61858e1a4bc906a6d7fac", "parent": ["78d4cef6eafe5fb8c7dfc7cddc9c5e5b44f4c642"], "author": {"id": "Ole Herman Schumacher Elgesem <ole.elgesem@northern.tech>", "name": "Ole Herman Schumacher Elgesem", "email": "ole.elgesem@northern.tech", "timestamp": "1748912066", "timezone": "+0200"}, "committer": {"id": "Ole Herman Schumacher Elgesem <ole.elgesem@northern.tech>", "name": "Ole Herman Schumacher Elgesem", "email": "ole.elgesem@northern.tech", "timestamp": "1748912069", "timezone": "+0200"}, "gpgsig": "-----BEGIN PGP SIGNATURE-----\n\niQJOBAABCAA4FiEEr+jF9DBXwAkxIimfWEIRr2qz7hIFAmg+R8oaHG9sZS5lbGdl\nc2VtQG5vcnRoZXJuLnRlY2gACgkQWEIRr2qz7hIBcA/+PCTRM58U+gNeYg+mfCwA\nme02JQ4zSyrjkdYs2JPU/f2elzGT6TlDqo/ovjO0xMeS7glDcNcwOjS0ja4bHwHE\noLVJZLZYY38Kys3f4MqMMQE4dVpEXEnWUwWoSsGjmTE8tkKjAc9rMijkruORNaya\nCbyQum9NF+85StqFGuNeDhV7el9WuyQx2ONNwNz+GWDwThB2pBUPNAedO/E6OXgi\nPtTuH35BZqRch1i+heSXNJqmsX/quXwzGJInJAecNIDMCOyieuDuDdHvVz77+IRD\n8Jx/9kRzEihi8a2/xKwe2mC9B/7rMPQ7AuDVZRlBtRaKotNuy0+wd3oj7/4hLgKO\n/vp6QQe01VcLCuMya/QFmEpG+Zs/eCcmvZys7ngd1pdH6s7Z2VnZ6mcAwWgGcEqK\ni73jAxI/cnRtowP2hTjFN7vn0dRIsxuSef8jYyoDQFycJ1LDYUj6cTwXz+VY+X9u\nLeZ6hKo7NrTzUcIAozeB4OYFmiKoObC0A6yu6z5fA/LvDd/9eMJPPGoP+j8e9NeF\nVTSatBz/LBfwW9/WnlsvnRkP09Poo2XODbGvLOaNJJpUmhMrib70SYNlRjUy2GvR\nqiKKiIfltgEu4zwTsOTb+yv45v09JUrR3/4J+haYrj0XX6EJViE8ANVc0dedqvXL\nZW7XiXQ0lgcc5n0Bnlymdpc=\n=cqBF\n-----END PGP SIGNATURE-----", "message": "Traceback when installed from PyPI\n\nSigned-off-by: Ole Herman Schumacher Elgesem <ole.elgesem@northern.tech>", "diff": [" 1 file changed, 1 insertion(+), 1 deletion(-)", "", "diff --git a/setup.py b/setup.py", "index 55fffed..c19e867 100644", "--- a/setup.py", "+++ b/setup.py", "@@ -44,7 +44,7 @@ setuptools.setup(", "         \"Operating System :: OS Independent\",", "     ],", "     python_requires=\">=3.6\",", "-    entry_points={\"console_scripts\": [\"glrp = glrp.main:main\"]},", "+    entry_points={\"console_scripts\": [\"glrp = glrp.cli:main\"]},", "     install_requires=[", "         \"cf-remote >= 0.6.4\",", "         \"cfbs >= 4.4.0\",", ""], "valid_signature": true, "fingerprint": "AFE8C5F43057C0093122299F584211AF6AB3EE12"}
{"commit": "78d4cef6eafe5fb8c7dfc7cddc9c5e5b44f4c642", "gpg": ["Signature made Tue Jun  3 02:54:02 2025 CEST", "               using RSA key AFE8C5F43057C0093122299F584211AF6AB3EE12", "               issuer \"ole.elgesem@northern.tech\"", "Good signature from \"Ole Herman Schumacher Elgesem <ole@cfengine.com>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <olehelg@ifi.uio.no>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <olehelg@student.matnat.uio.no>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <oleherman93@gmail.com>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <ole.elgesem@northern.tech>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <ole.elgesem@cfengine.com>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <ole@northern.tech>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <olehelg@ulrik.uio.no>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <olehelg@uio.no>\" [ultimate]"], "tree": "22cd59f9f5503d2a959cb3c1f5b12696d99fed17", "parent": ["da15fe7dd410a3189bb070b7f9f516092ecb0850"], "author": {"id": "Ole Herman Schumacher Elgesem <ole.elgesem@northern.tech>", "name": "Ole Herman Schumacher Elgesem", "email": "ole.elgesem@northern.tech", "timestamp": "1748912042", "timezone": "+0200"}, "committer": {"id": "Ole Herman Schumacher Elgesem <ole.elgesem@northern.tech>", "name": "Ole Herman Schumacher Elgesem", "email": "ole.elgesem@northern.tech", "timestamp": "1748912042", "timezone": "+0200"}, "gpgsig": "-----BEGIN PGP SIGNATURE-----\n\niQJOBAABCAA4FiEEr+jF9DBXwAkxIimfWEIRr2qz7hIFAmg+R6oaHG9sZS5lbGdl\nc2VtQG5vcnRoZXJuLnRlY2gACgkQWEIRr2qz7hLJBhAAmmaMQO8fqv+AOipJTPZ+\n5DCjtwxUKwO4DasninAj09BPAg2+LU9eFmHsw62tCPG1Rq34fOC/KW1+KGNFcCrr\ndbj7RXkpeWWKs31IrYUpq7vGK8ZgI3pums3ozG6fNBmU62TjbBuSIgmr5Nktj/cT\nyCHSNT13LGrnXctd8gtNv+KY+FnWi4Ug2yfEqh1BB5eZIZTyQBozbrzjsZweGTnd\nGbLuV1ZW4iIlg1DTQGYVNOF55WeKXyIjor2brWTR9LEOIgtZNgas+hYBKf1NKmiN\nXunGScXGEpmhxEPrQ8/yzK/nUqGaV0/QyMzSDLAPvsuZQbDQizXsJU/9XWKrI48a\nS121cXapILF3I+/2gt+9sBd2MABtQ7NfIoLHoamJGQEOs6uCGeRk2nkmEc8mH0UK\ng/TConca4R7/w9ny3HD4kci1o6zJfq7zuyyZKrsWoepvgh7Ko0nBPv0CDOBIe/xD\nbL0x1IKsBp6YZqKjKLeImnLmY8ghmv/1BvqI2jF/X5S19I8SWdc2uiiDnrx/f1GX\nzCMAqqjp/EFDCgOoepkkvKwTVFfPNmLHK1L1QRzk81PeHfRjrYggKjS7nbXS1Pq7\nY/peELKqRZftoZhEYuHwYDYlrucVzazvdJ1mm0vEmxAGweXElAouStqdYxTcmm+D\nT5GXkr5lbGzJciCi8fLiRxY=\n=Oh+x\n-----END PGP SIGNATURE-----", "message": "Added --version\n\nSigned-off-by: Ole Herman Schumacher Elgesem <ole.elgesem@northern.tech>", "diff": [" 1 file changed, 3 insertions(+), 1 deletion(-)", "", "diff --git a/glrp/cli.py b/glrp/cli.py", "index 405bffd..a9f281d 100644", "--- a/glrp/cli.py", "+++ b/glrp/cli.py", "@@ -4,6 +4,7 @@ import argparse", " import json", " ", " from glrp.internal_parser import parse, parse_to_all_representations", "+import glrp.version.string as version_string", " from cfbs.utils import find, mkdir, rm", " from cfbs.pretty import pretty", " ", "@@ -251,9 +252,10 @@ def parse_logs(", " ", " def get_args():", "     parser = argparse.ArgumentParser(", "-        prog=\"git-log-raw-parser\",", "+        prog=\"glrp\",", "         description=\"Parses the output of 'git log -p --format=raw --show-signature --stat'\",", "     )", "+    parser.add_argument(\"--version\", action=\"version\", version=version_string())", "     parser.add_argument(", "         \"-o\", \"--output-dir\", help=\"Output commits to a folder structure\"", "     )", ""], "valid_signature": true, "fingerprint": "AFE8C5F43057C0093122299F584211AF6AB3EE12"}
{"commit": "da15fe7dd410a3189bb070b7f9f516092ecb0850", "gpg": ["Signature made Tue Jun  3 02:42:27 2025 CEST", "               using RSA key AFE8C5F43057C0093122299F584211AF6AB3EE12", "               issuer \"ole.elgesem@northern.tech\"", "Good signature from \"Ole Herman Schumacher Elgesem <ole@cfengine.com>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <olehelg@ifi.uio.no>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <olehelg@student.matnat.uio.no>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <oleherman93@gmail.com>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <ole.elgesem@northern.tech>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <ole.elgesem@cfengine.com>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <ole@northern.tech>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <olehelg@ulrik.uio.no>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <olehelg@uio.no>\" [ultimate]"], "tree": "831a47931b7c88a4630e83bdcf87947d4abaa1f8", "parent": ["40026c83bf9555dee16b58211c58207e4514bd91"], "author": {"id": "Ole Herman Schumacher Elgesem <ole.elgesem@northern.tech>", "name": "Ole Herman Schumacher Elgesem", "email": "ole.elgesem@northern.tech", "timestamp": "1748911347", "timezone": "+0200"}, "committer": {"id": "Ole Herman Schumacher Elgesem <ole.elgesem@northern.tech>", "name": "Ole Herman Schumacher Elgesem", "email": "ole.elgesem@northern.tech", "timestamp": "1748911347", "timezone": "+0200"}, "gpgsig": "-----BEGIN PGP SIGNATURE-----\n\niQJOBAABCAA4FiEEr+jF9DBXwAkxIimfWEIRr2qz7hIFAmg+RPMaHG9sZS5lbGdl\nc2VtQG5vcnRoZXJuLnRlY2gACgkQWEIRr2qz7hKemxAAmgQuozvQer4ak5pfTeaL\nkHvEe6alHytqo1+8y0Jz7KeMg2PtkMNraKClVsmSgzf/QxMYzZGZVJVg1PHhT3Tl\nPFoLG7zqzYYVHxA8rxtI077PbFlOhH+pAy0F5Yj4cx2dAxftWhKvngcfgzrZnRTB\npaYkLZE4hI4bvY5FnFl5HFfSTj61IBYxOfQsNTGyibXebB7sRfcf9n2Y/Fb0+18f\nIV/oYz7GaSvf2DdQw+uEl9UwhL9SmZVt7XE9JkEEezBWOt7SoAXo+WzCV4AU+Voq\n9IyDPLwFRmz5wum6ffLklUlPNoybWRguHsBw2kNlaTChBtWrxmr11/Kz0zaJUMmb\ncviUf6L2EaEVVIfuTKsyT1r8JLGWi7Slkmh0r5djb/OUpUBxbeXUmOvvXkfLP3nn\ng27NXCt1T7nfDptbifxtLh1mm55YsG4UDzU6vL3tLOo3odrLyfVDWc+UrhxribNE\nW7bAWGfVlau3ZyzPKVPdmAqT5EI3I9eyACXwaa7S9Zf2b1Kihg2wZtgn16VD+4XQ\nmt7ybwlnsV3lmTw6sND/cefX4cS+/Ktd879uu/u3kYnMvHc3aG3LVdc4FVW5iNTj\ndozhEQ7vl2cwtP9SZix3nJ4oBRakSf5qIYfCL2P91eLhmnIrU85ql29Gq/9bwB48\n7MYYOQ8XuwiVgk31AvWbAcI=\n=lnPO\n-----END PGP SIGNATURE-----", "message": "Bumped pypi publish action\n\nSigned-off-by: Ole Herman Schumacher Elgesem <ole.elgesem@northern.tech>", "diff": [" 1 file changed, 1 insertion(+), 1 deletion(-)", "", "diff --git a/.github/workflows/python-publish.yml b/.github/workflows/python-publish.yml", "index 465c410..2545bfd 100644", "--- a/.github/workflows/python-publish.yml", "+++ b/.github/workflows/python-publish.yml", "@@ -26,4 +26,4 @@ jobs:", "           git fetch --all --tags", "           python setup.py sdist bdist_wheel", "       - name: Publish package distributions to PyPI", "-        uses: pypa/gh-action-pypi-publish@release/v1", "+        uses: pypa/gh-action-pypi-publish@release/v1.12", ""], "valid_signature": true, "fingerprint": "AFE8C5F43057C0093122299F584211AF6AB3EE12"}
{"commit": "40026c83bf9555dee16b58211c58207e4514bd91", "gpg": ["Signature made Tue Jun  3 02:32:37 2025 CEST", "               using RSA key AFE8C5F43057C0093122299F584211AF6AB3EE12", "               issuer \"ole.elgesem@northern.tech\"", "Good signature from \"Ole Herman Schumacher Elgesem <ole@cfengine.com>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <olehelg@ifi.uio.no>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <olehelg@student.matnat.uio.no>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <oleherman93@gmail.com>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <ole.elgesem@northern.tech>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <ole.elgesem@cfengine.com>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <ole@northern.tech>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <olehelg@ulrik.uio.no>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <olehelg@uio.no>\" [ultimate]"], "tree": "057b75fe96d65bbe4cba22ad0a5b0442e13feef9", "parent": ["ec75e8ca67b9ab054b99b2112ba4d667d5a7733f"], "author": {"id": "Ole Herman Schumacher Elgesem <ole.elgesem@northern.tech>", "name": "Ole Herman Schumacher Elgesem", "email": "ole.elgesem@northern.tech", "timestamp": "1748910757", "timezone": "+0200"}, "committer": {"id": "Ole Herman Schumacher Elgesem <ole.elgesem@northern.tech>", "name": "Ole Herman Schumacher Elgesem", "email": "ole.elgesem@northern.tech", "timestamp": "1748910757", "timezone": "+0200"}, "gpgsig": "-----BEGIN PGP SIGNATURE-----\n\niQJOBAABCAA4FiEEr+jF9DBXwAkxIimfWEIRr2qz7hIFAmg+QqUaHG9sZS5lbGdl\nc2VtQG5vcnRoZXJuLnRlY2gACgkQWEIRr2qz7hI33A/9FH8fl6V47M3puFAuWHaH\n+oBdEIT/P3O7d1P/k1IV/g+fS9UM2fsbIJstD4U+KoyCZmaQOoE5FNQ4FWZmIXOm\nuUyoMlOD+ISWwS4qb/xiZXlNz8RsmhP2dar24SIFwYToN3YZRXUK91iadBEc277t\n2NKXhICadOItIf65vGSJ2ThN2VVn9rjzDUXm26+Wqaci8MrAIQNm+JrGOXPEDRuf\nG4Tz9QGM31nnUlEQeOML9a8hZZ/RHNIDNoIvrq8y+9XVBg3SBLSAk9X0LskHNA4j\n/2s2GNvLBR5VsYJ+NyhVHTxrTPJ4GqDFmucsGlwW8+wspM8EmAQPefTImuPHCrUR\ntKkulC5G15kmpRvFSVQ69n3rEj/Idc9H22p9lSLRZeqrrXxlkTxKXUw+6WGPvXMg\n4seoob76YxWuR9rPxjYO3DGB/ZEPtTnTLxI9zgM6Bx+J+HF9TKqJYFC+jDSEUXUJ\nRyPzp3h13LjMgJGlqC2I7BALVmv5Nkc5I7e0qcmSnZgxecjwiFTWaSfiCXstZwXd\nsjyrpveL8cWnF/VpPMhjOE6DjHBi7UU08KfD4tnVx2jBtasv6aZ7uuX46ZIUzC4Y\npBu9GiGmtV3pF4pcf8JDMVkA5IYYDetUaDZLzkkgHqZygjdtk/DnJORAFpr1JXeC\n4CohCaUfWKvS+ftqhBmoMjk=\n=qXVO\n-----END PGP SIGNATURE-----", "message": "Created version.py\n\nSigned-off-by: Ole Herman Schumacher Elgesem <ole.elgesem@northern.tech>", "diff": [" 1 file changed, 12 insertions(+)", "", "diff --git a/glrp/version.py b/glrp/version.py", "new file mode 100644", "index 0000000..976be74", "--- /dev/null", "+++ b/glrp/version.py", "@@ -0,0 +1,12 @@", "+import os", "+", "+", "+def string():", "+    try:", "+        with open(os.path.dirname(__file__) + \"/VERSION\", \"r\", encoding=\"utf-8\") as fh:", "+            version = fh.read().strip()", "+            if version:", "+                return version", "+    except:", "+        pass", "+    return \"unknown (git checkout)\"", ""], "valid_signature": true, "fingerprint": "AFE8C5F43057C0093122299F584211AF6AB3EE12"}
{"commit": "ec75e8ca67b9ab054b99b2112ba4d667d5a7733f", "gpg": ["Signature made Tue Jun  3 02:21:52 2025 CEST", "               using RSA key AFE8C5F43057C0093122299F584211AF6AB3EE12", "               issuer \"ole.elgesem@northern.tech\"", "Good signature from \"Ole Herman Schumacher Elgesem <ole@cfengine.com>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <olehelg@ifi.uio.no>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <olehelg@student.matnat.uio.no>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <oleherman93@gmail.com>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <ole.elgesem@northern.tech>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <ole.elgesem@cfengine.com>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <ole@northern.tech>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <olehelg@ulrik.uio.no>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <olehelg@uio.no>\" [ultimate]"], "tree": "481cf5a36c9930edbfb755a03954ec90ea141982", "parent": ["0c27052acc67e003d636f1e058d8d54c5aca279b"], "author": {"id": "Ole Herman Schumacher Elgesem <ole.elgesem@northern.tech>", "name": "Ole Herman Schumacher Elgesem", "email": "ole.elgesem@northern.tech", "timestamp": "1748910112", "timezone": "+0200"}, "committer": {"id": "Ole Herman Schumacher Elgesem <ole.elgesem@northern.tech>", "name": "Ole Herman Schumacher Elgesem", "email": "ole.elgesem@northern.tech", "timestamp": "1748910112", "timezone": "+0200"}, "gpgsig": "-----BEGIN PGP SIGNATURE-----\n\niQJOBAABCAA4FiEEr+jF9DBXwAkxIimfWEIRr2qz7hIFAmg+QCAaHG9sZS5lbGdl\nc2VtQG5vcnRoZXJuLnRlY2gACgkQWEIRr2qz7hJQGg/9FcwemDXhnwIR2dNZf6pY\n07rVpzv502fiLS+WbD9y1tW3Z39SldNhM5cTbL+SWrsQ1KeEN3hluf8WT6MD5xi/\nflaSOd34FaAqZqhYdtknTDklzviYqEN8pawwPq16SCdCml33SGT1NR9csUJ2LANN\nI1J99rgKvWxAayNnPbBPrtgbjqLkHbXwG1MZPazyyF3cRR0Ulkec6pD6cFSXNrY1\noP8IycMkOwrcnKkvwMn2cz1B+1jF/FAEfzK1uG1zBmaN/KyxcByVaRKdz5cY5CCM\neJ/mOv9YQkZasbcSmA4Wx8kIk4x1s4OhEwLLsySeJV6WcjKEaiBWg5IPgHPfAegx\nOiIfF8cYkW6h/oFYUnA+miJOdCY1Vmp7d34542+k0VGhPKCN5xKXffFZCRawlnQi\nLk+xbPOsNlXbcR0emzfPETHJ5exU/CnPAUfZ+7I6KHYl0Ofz5+eINYkakXAQWgNI\n4IWzPvJVlVF5KpXh7TkUyPTGwqumeZDVy2L0d6DHwGnGT9B27P0ph67aS2OhUMVO\nsrCrqDRE71ye1nYFTugT2l281oHsDxpOxKrRKMGvVPfNZUsWgbZQVEjJGCY5XcXr\n6WN17WW5+8dG/K6BRIu+RPzzGBRUA3E8O9650+m2SASXo2xhGF/a16nnEhODFYT6\nwn0GUw3SJNqc31zRbo8lkEQ=\n=tihr\n-----END PGP SIGNATURE-----", "message": "Updated publish workflow to use OIDC\n\nSigned-off-by: Ole Herman Schumacher Elgesem <ole.elgesem@northern.tech>", "diff": [" 1 file changed, 9 insertions(+), 11 deletions(-)", "", "diff --git a/.github/workflows/python-publish.yml b/.github/workflows/python-publish.yml", "index 2c1b132..465c410 100644", "--- a/.github/workflows/python-publish.yml", "+++ b/.github/workflows/python-publish.yml", "@@ -1,16 +1,16 @@", "-# This workflow will upload a Python Package using Twine when a release is created", "-# For more information see: https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#publishing-to-package-registries", "-", "-name: Upload Python Package", "+name: Upload Python Package to PyPI (pip)", " ", " on:", "   release:", "     types: [published]", " ", " jobs:", "-  deploy:", "+  pypi-publish:", "+    name: upload release to PyPI", "     runs-on: ubuntu-latest", "-", "+    environment: pypi", "+    permissions:", "+      id-token: write", "     steps:", "       - uses: actions/checkout@v4", "       - name: Set up Python", "@@ -21,11 +21,9 @@ jobs:", "         run: |", "           python -m pip install --upgrade pip", "           pip install setuptools wheel twine", "-      - name: Build and publish", "-        env:", "-          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}", "-          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}", "+      - name: Build", "         run: |", "           git fetch --all --tags", "           python setup.py sdist bdist_wheel", "-          twine upload dist/*", "+      - name: Publish package distributions to PyPI", "+        uses: pypa/gh-action-pypi-publish@release/v1", ""], "valid_signature": true, "fingerprint": "AFE8C5F43057C0093122299F584211AF6AB3EE12"}
{"commit": "0c27052acc67e003d636f1e058d8d54c5aca279b", "gpg": ["Signature made Tue Jun  3 02:10:39 2025 CEST", "               using RSA key B5690EEEBB952194", "Good signature from \"GitHub <noreply@github.com>\" [unknown]", "WARNING: This key is not certified with a trusted signature!", "         There is no indication that the signature belongs to the owner."], "tree": "85a96411c34a4c01cf76790d3287ca27531fe4f3", "parent": ["e723c0881cef6a8fd15bb01917e6f6f1604b89e1"], "author": {"id": "Ole Herman Schumacher Elgesem <4048546+olehermanse@users.noreply.github.com>", "name": "Ole Herman Schumacher Elgesem", "email": "4048546+olehermanse@users.noreply.github.com", "timestamp": "1748909439", "timezone": "+0200"}, "committer": {"id": "GitHub <noreply@github.com>", "name": "GitHub", "email": "noreply@github.com", "timestamp": "1748909439", "timezone": "+0200"}, "gpgsig": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJoPj1/CRC1aQ7uu5UhlAAAGEsQAFRA+QMYmGAYCWes8wIzGcWl\nf5MGNvWcnPrbhHnQje6Cy3vJS6L9M5y+n8rJWx1+oMZbIFyJTpIO/X5Gn4tl4Si1\nDtqANH1xyCQ33ohPABTKeDT1YbNr4Ykfm2FfM4JJCGkd8h7GLJT33HiP7qu9VSJ2\nFbosDPEtDoRXDzeojS0k7Jg5BLOJf+f0xRh2eUBykjo6L9N4DobyPuOeVH0tYEAS\n3WrmA8QfCo376jLZsk/7HeCwq/ssNzrhzUo/DGU5FNCENLjXAWdoJcvmazNNMaCv\nPSWtxF3rMeyOaerlFNfJqT+CjlPQxpyfjtjQ/52RdiHI4ZFtG9Ib+AQvZV9bEOcC\nbQE0CdgzqHjcpRbTIb7PcaFd1xtdTqRlZgUCUec3nQ9M2DNTE7ZjC5QaKqxSYjKZ\nSwzkBwshlr0BE4moo/ioGzK2B5VJnaQFnUVwz1q/OBylmct74hzse42vN1qMZYr6\nuuegBQGTHxBF06n3ZASvDrVEGJZQOQWZr5AzxD9HBnQashU3jhAlKEVH7ZQPbeHj\nFFbp6KL37FAHyMQ/bP3E7a4OsBBp/OYdm7XFosnl4cNwuaxLg1l66ve6QYRoUg3y\n/z2fWCvA2cmUkT2nkgLag95Fcc43931TbGcAwZeGBg1lQJNcTCEuN5UMckW9jWai\nWkNUmUU+9FmK4LvhIjV3\n=TuSg\n-----END PGP SIGNATURE-----", "message": "Delete .github/workflows/pytest-and-flake8.yml", "diff": [" 1 file changed, 39 deletions(-)", "", "diff --git a/.github/workflows/pytest-and-flake8.yml b/.github/workflows/pytest-and-flake8.yml", "deleted file mode 100644", "index 1168bd9..0000000", "--- a/.github/workflows/pytest-and-flake8.yml", "+++ /dev/null", "@@ -1,39 +0,0 @@", "-# This workflow will install Python dependencies, run tests and lint with a single version of Python", "-# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python", "-", "-name: Python application", "-", "-on:", "-  push:", "-    branches: [ \"main\" ]", "-  pull_request:", "-    branches: [ \"main\" ]", "-", "-permissions:", "-  contents: read", "-", "-jobs:", "-  build:", "-", "-    runs-on: ubuntu-latest", "-", "-    steps:", "-    - uses: actions/checkout@v4", "-    - name: Set up Python 3.10", "-      uses: actions/setup-python@v3", "-      with:", "-        python-version: \"3.10\"", "-    - name: Install dependencies", "-      run: |", "-        python -m pip install --upgrade pip", "-        pip install flake8 pytest", "-        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi", "-    - name: Lint with flake8", "-      run: |", "-        # stop the build if there are Python syntax errors or undefined names", "-        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics", "-        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide", "-        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics", "-    - name: Test with pytest", "-      run: |", "-        pytest", ""], "valid_signature": true, "fingerprint": "B5690EEEBB952194"}
{"commit": "e723c0881cef6a8fd15bb01917e6f6f1604b89e1", "gpg": ["Signature made Tue Jun  3 02:10:20 2025 CEST", "               using RSA key B5690EEEBB952194", "Good signature from \"GitHub <noreply@github.com>\" [unknown]", "WARNING: This key is not certified with a trusted signature!", "         There is no indication that the signature belongs to the owner."], "tree": "89377e8d760d1566e63f1b662767de3c8fa7a8ef", "parent": ["f95b16e5a7e080a7c7b31fb666f2cc9d7216df6d"], "author": {"id": "Ole Herman Schumacher Elgesem <4048546+olehermanse@users.noreply.github.com>", "name": "Ole Herman Schumacher Elgesem", "email": "4048546+olehermanse@users.noreply.github.com", "timestamp": "1748909420", "timezone": "+0200"}, "committer": {"id": "GitHub <noreply@github.com>", "name": "GitHub", "email": "noreply@github.com", "timestamp": "1748909420", "timezone": "+0200"}, "gpgsig": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJoPj1sCRC1aQ7uu5UhlAAAtgkQAAjL0Nma8J8yC+4VPQVgme9E\n9uikGvTh2Poky3kAxeWsFrQwVtV3FcEFijG/+nnRfY9U9bL3+GWoh4H27/jxdUc4\n5LaL75+C0VFmKKGz5WdeEAmUTaHtKiuC5Y74AtUl0/vhZK5Z/P1gg2jtmvHndXyg\ncn1zEhmdB/ds3ECIuYeCYjg+yoZvFyAwrj5zZQQQUrg8kbsI+Dt59oguNowu/rAI\noY7OGqUGa1VG/Jw1B10Ry0bkccb7HI0idNkTYd1bjLdmwujDHjBWKNMdiDu9Ffes\nG++ozDZeUl5oJCKwjRU7t6LTn97zUWO3XN0RvQaIADsQ+JcVHnnPPDLmcBXEgEon\nBAue2n93P06FM4djPtTNndZADyihYJranSwPabiqRfl+ibkpBXcXlYZMsb0CAoan\nurBjMa9J6KEz5tUXltr8XRbpUxRFLjVD04MuQnEmKeYLG3z1QEvxc41R8JkBm8Cu\n8aiwqIHcgbZ0Ns6d+SwopIrpX4GPbIxdPwr50Rb0syaHN1/WPuMi/PavECDntIKJ\nI7tL0Q9kcxzz4bs6og+OLx2oMq9JZt/v4rUxjXylkjPNIuEa7wKOF4ATUMs05z1O\n7nLsKGpXzVA7NRUK48ed3c82oAKFa1GOx0pVWqTkiYH1vE/nURljlU4w0Xv9s3vs\nCqZ64dPYey+nCp8vENEa\n=QpUk\n-----END PGP SIGNATURE-----", "message": "Create python-tests.yml", "diff": [" 1 file changed, 40 insertions(+)", "", "diff --git a/.github/workflows/python-tests.yml b/.github/workflows/python-tests.yml", "new file mode 100644", "index 0000000..a2d4832", "--- /dev/null", "+++ b/.github/workflows/python-tests.yml", "@@ -0,0 +1,40 @@", "+# This workflow will install Python dependencies, run tests and lint with a variety of Python versions", "+# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python", "+", "+name: Python version tests", "+", "+on:", "+  push:", "+    branches: [ \"main\" ]", "+  pull_request:", "+    branches: [ \"main\" ]", "+", "+jobs:", "+  build:", "+", "+    runs-on: ubuntu-latest", "+    strategy:", "+      fail-fast: false", "+      matrix:", "+        python-version: [\"3.9\", \"3.10\", \"3.11\"]", "+", "+    steps:", "+    - uses: actions/checkout@v4", "+    - name: Set up Python ${{ matrix.python-version }}", "+      uses: actions/setup-python@v3", "+      with:", "+        python-version: ${{ matrix.python-version }}", "+    - name: Install dependencies", "+      run: |", "+        python -m pip install --upgrade pip", "+        python -m pip install flake8 pytest", "+        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi", "+    - name: Lint with flake8", "+      run: |", "+        # stop the build if there are Python syntax errors or undefined names", "+        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics", "+        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide", "+        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics", "+    - name: Test with pytest", "+      run: |", "+        pytest", ""], "valid_signature": true, "fingerprint": "B5690EEEBB952194"}
{"commit": "f95b16e5a7e080a7c7b31fb666f2cc9d7216df6d", "gpg": ["Signature made Tue Jun  3 02:08:55 2025 CEST", "               using RSA key B5690EEEBB952194", "Good signature from \"GitHub <noreply@github.com>\" [unknown]", "WARNING: This key is not certified with a trusted signature!", "         There is no indication that the signature belongs to the owner."], "tree": "69fff74eb4ce46069cb485a87ba37f76e4171668", "parent": ["3dbc1a2f52b2523535474f5ec5b71dd22bd7e22d"], "author": {"id": "Ole Herman Schumacher Elgesem <4048546+olehermanse@users.noreply.github.com>", "name": "Ole Herman Schumacher Elgesem", "email": "4048546+olehermanse@users.noreply.github.com", "timestamp": "1748909335", "timezone": "+0200"}, "committer": {"id": "GitHub <noreply@github.com>", "name": "GitHub", "email": "noreply@github.com", "timestamp": "1748909335", "timezone": "+0200"}, "gpgsig": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJoPj0XCRC1aQ7uu5UhlAAAzawQAHdTO8uF1KTKNLwZ2XgyrMDW\n+3llV+a+DddEGL7LS4APTQrNI+maf4JnsKxRebnqP28Gb/7hX6QG4gtWtf1CXfIm\nFIvZVr1EJa4OrWbKpKNjStMn9OxVSXVnJX2Pnqbvc0+W/xAzjIiq7vMJ85FHKTI6\n3OepEQ8VeVmIoyxsST5ERh3SY0X1Yuqwwcn53dDvbVkHaoIqJGWjXDm5qAZhKj43\nOr01uivySBIcPSLtw6ooJQSScuZYoRQc38MU5Q6DWwPhbKekoD5qJfdCo+ZrtK1o\nAtHPCUquQO9S3zS2aVEeu4EBgYkgzZVvqV098ZzoZ5yOH2UsyvcVNUu5ogJI8W4o\nKQphudJUOGdyPx0MvVFky3eZPqR8sGJHCwP/4XFeQ+8oeVEfIl3e7NqtyLGD1QQM\nnXCwqBc9NiT1aBeGYti/XPuKcRm9EKtVUAWfYDMtZxh/2sfSL5YcSbNOcQRxok4g\nWSjmbXfV5IGybTfhGJedt4Z7srIJwISRfBeF5oLwMC6GeTvtoQh4rw2CP21rpS3C\nsu0BlIYVs627juSinxV1ilrQSvz3blqTGx0hIt0Y4XxUzXGuDjUsRk0p1BmuRMA5\nwhvLACJwBodarAQ9R81VubpinvmIW/ORWAT8NXaftkZCBTm367RqvIioxQSnf+BI\naIdEX9LBYEoNvZ58xjrU\n=yXBY\n-----END PGP SIGNATURE-----", "message": "Create pytest-and-flake8.yml", "diff": [" 1 file changed, 39 insertions(+)", "", "diff --git a/.github/workflows/pytest-and-flake8.yml b/.github/workflows/pytest-and-flake8.yml", "new file mode 100644", "index 0000000..1168bd9", "--- /dev/null", "+++ b/.github/workflows/pytest-and-flake8.yml", "@@ -0,0 +1,39 @@", "+# This workflow will install Python dependencies, run tests and lint with a single version of Python", "+# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python", "+", "+name: Python application", "+", "+on:", "+  push:", "+    branches: [ \"main\" ]", "+  pull_request:", "+    branches: [ \"main\" ]", "+", "+permissions:", "+  contents: read", "+", "+jobs:", "+  build:", "+", "+    runs-on: ubuntu-latest", "+", "+    steps:", "+    - uses: actions/checkout@v4", "+    - name: Set up Python 3.10", "+      uses: actions/setup-python@v3", "+      with:", "+        python-version: \"3.10\"", "+    - name: Install dependencies", "+      run: |", "+        python -m pip install --upgrade pip", "+        pip install flake8 pytest", "+        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi", "+    - name: Lint with flake8", "+      run: |", "+        # stop the build if there are Python syntax errors or undefined names", "+        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics", "+        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide", "+        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics", "+    - name: Test with pytest", "+      run: |", "+        pytest", ""], "valid_signature": true, "fingerprint": "B5690EEEBB952194"}
{"commit": "3dbc1a2f52b2523535474f5ec5b71dd22bd7e22d", "gpg": ["Signature made Tue Jun  3 02:07:04 2025 CEST", "               using RSA key AFE8C5F43057C0093122299F584211AF6AB3EE12", "               issuer \"ole.elgesem@northern.tech\"", "Good signature from \"Ole Herman Schumacher Elgesem <ole@cfengine.com>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <olehelg@ifi.uio.no>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <olehelg@student.matnat.uio.no>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <oleherman93@gmail.com>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <ole.elgesem@northern.tech>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <ole.elgesem@cfengine.com>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <ole@northern.tech>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <olehelg@ulrik.uio.no>\" [ultimate]", "                aka \"Ole Herman Schumacher Elgesem <olehelg@uio.no>\" [ultimate]"], "tree": "b240a060373d0a74a9c72e6777fa27601c502bb0", "author": {"id": "Ole Herman Schumacher Elgesem <ole.elgesem@northern.tech>", "name": "Ole Herman Schumacher Elgesem", "email": "ole.elgesem@northern.tech", "timestamp": "1748909223", "timezone": "+0200"}, "committer": {"id": "Ole Herman Schumacher Elgesem <ole.elgesem@northern.tech>", "name": "Ole Herman Schumacher Elgesem", "email": "ole.elgesem@northern.tech", "timestamp": "1748909223", "timezone": "+0200"}, "gpgsig": "-----BEGIN PGP SIGNATURE-----\n\niQJOBAABCAA4FiEEr+jF9DBXwAkxIimfWEIRr2qz7hIFAmg+PKgaHG9sZS5lbGdl\nc2VtQG5vcnRoZXJuLnRlY2gACgkQWEIRr2qz7hKR4RAAiCDokSJBCkfEyFDIBnIZ\n69s8IJDmdxDeGDO/v26FrsxKiGEd7akR+J3CVCOUqUOfVao91neARNyus8Oi6+bh\nxnZvv6DIJu9Nc7rZJQOgcn+CGWD14mtFer4c+2LSJHIDpmVQp9GiK4QyoU/ZrZLy\nwItjaUm99dJtBnpIQ5ZzavmKfelwu/S6Uak4GS630B/sJKaq4JZkabEZoESrMIrO\nodWyGe3eUq/qOptRXsgi7aLuqv2Cttu9V6h2IKiwj8WCMoMd/g088Jd+BJNtO4on\nZhjFHWZGhGdLx5YH7ZZ0Z625od0gftGekMHwrIsGZt5hedqPZxFm5gU3tKmFMEb5\n9SS1XGjZvYxFBzdpvLZp0v4g9vX4TCVDSIsFKOQJJvH4NVG021Pxe6eHMlriMnwG\nAZaj/gQsaCubs29mjB6GRW+yjah+EgVwAs/9IgNtkoc9QmUPrBVc0k26zeSqE433\n/dD8QNBEvdTsSuNRkf/nBYF4VssAM2qyvmT2x65PW7eNWMh1P9L4qcp92Yon/PIs\nVPSVNfXvvFRoshOHroPMi2Gx7R5xGQVKmxpq4lHFv++dTrIcR3BiJ8kCW7JX39W/\nd4x2GsWCEs7HikVD2Gccr0SF86Ch5MYLP08z2L7XfLtFb1H51joPSNZHqGKMGrMf\nH3cLWfBdCNd6alCgEuPqmnw=\n=oC7v\n-----END PGP SIGNATURE-----", "message": "Initial commit, working version\n\nSigned-off-by: Ole Herman Schumacher Elgesem <ole.elgesem@northern.tech>", "diff": [" .gitignore                           |    7 +", " LICENSE                              |   21 +", " README.md                            |   53 ++", " glrp/__init__.py                     |    8 +", " glrp/__main__.py                     |   12 +", " glrp/cli.py                          |  302 ++++++++++", " glrp/internal_parser.py              |  289 +++++++++", " requirements.txt                     |    3 +", " scripts/look_for_pulls.py            |   23 +", " setup.py                             |   53 ++", " tests/expected-01.json               |  373 ++++++++++++", " tests/expected-02.json               |  699 ++++++++++++++++++++++", " tests/first_commits.txt              | 1074 ++++++++++++++++++++++++++++++++++", " tests/test_parser.py                 |   32 +", " 15 files changed, 2980 insertions(+)", "", "diff --git a/.github/workflows/python-publish.yml b/.github/workflows/python-publish.yml", "new file mode 100644", "index 0000000..2c1b132", "--- /dev/null", "+++ b/.github/workflows/python-publish.yml", "@@ -0,0 +1,31 @@", "+# This workflow will upload a Python Package using Twine when a release is created", "+# For more information see: https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#publishing-to-package-registries", "+", "+name: Upload Python Package", "+", "+on:", "+  release:", "+    types: [published]", "+", "+jobs:", "+  deploy:", "+    runs-on: ubuntu-latest", "+", "+    steps:", "+      - uses: actions/checkout@v4", "+      - name: Set up Python", "+        uses: actions/setup-python@v5", "+        with:", "+          python-version: \"3.x\"", "+      - name: Install dependencies", "+        run: |", "+          python -m pip install --upgrade pip", "+          pip install setuptools wheel twine", "+      - name: Build and publish", "+        env:", "+          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}", "+          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}", "+        run: |", "+          git fetch --all --tags", "+          python setup.py sdist bdist_wheel", "+          twine upload dist/*", "diff --git a/.gitignore b/.gitignore", "new file mode 100644", "index 0000000..ef9b168", "--- /dev/null", "+++ b/.gitignore", "@@ -0,0 +1,7 @@", "+/core/", "+/masterfiles/", "+/out/", "+__pycache__/", "+/debug/", "+/trusted/", "+/core", "\\ No newline at end of file", "diff --git a/LICENSE b/LICENSE", "new file mode 100644", "index 0000000..6deb5f2", "--- /dev/null", "+++ b/LICENSE", "@@ -0,0 +1,21 @@", "+MIT License", "+", "+Copyright (c) 2025 Ole Herman Schumacher Elgesem", "+", "+Permission is hereby granted, free of charge, to any person obtaining a copy", "+of this software and associated documentation files (the \"Software\"), to deal", "+in the Software without restriction, including without limitation the rights", "+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell", "+copies of the Software, and to permit persons to whom the Software is", "+furnished to do so, subject to the following conditions:", "+", "+The above copyright notice and this permission notice shall be included in all", "+copies or substantial portions of the Software.", "+", "+THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR", "+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,", "+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE", "+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER", "+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,", "+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE", "+SOFTWARE.", "\\ No newline at end of file", "diff --git a/README.md b/README.md", "new file mode 100644", "index 0000000..fbeb3c9", "--- /dev/null", "+++ b/README.md", "@@ -0,0 +1,53 @@", "+# git-log-raw-parser", "+", "+A parser for parsing the command:", "+", "+```", "+git log -p --format=raw --show-signature --stat", "+```", "+", "+## Why?", "+", "+The above command provides a lot of useful information about git commits, which we can analyze, including:", "+", "+- Commit message", "+- Diffs", "+- Author name and email", "+- Committer name and email", "+- Timestamps", "+- GPG signature", "+", "+On its own, git log does not output its information in a format which is easy for other programs to use.", "+So, this tool parses the output and turns it into JSON which is more easy to analyze and check.", "+", "+## Usage", "+", "+Using it is simple, just run the `git log` command and pipe it to the standard input of `git_log_raw_parser`", "+", "+```", "+git log -p --format=raw --show-signature --stat | python3 -m glrp --output-dir=./out/", "+```", "+", "+Or perhaps a bit more realistic:", "+", "+```", "+git clone https://github.com/cfengine/core", "+(cd core && git log -p --format=raw --show-signature --stat HEAD~500..HEAD 2>/dev/null) | python3 git_log_raw_parser.py", "+```", "+", "+(Clone CFEngine core, start subshell which enters the subdirectory and runs git log for the past 500 commits).", "+", "+## Improtant notes", "+", "+**Warning:** The output of `--show-signature` varies depending on which keys you have imported / trusted in your installation of GPG.", "+Make sure you import the correct GPG keys beforehand, and don't expect output to be identical across different machines with different GPG states.", "+", "+**Warning:** Consider this a best-effort, \"lossy\" parsing.", "+Commits may contain non utf-8 characters, to avoid \"crashing\", we skip these, replacing them with question marks.", "+Thus, the parsing is lossy, don't expect all the information to be there.", "+This tool can be used for searching / analyzing commits, but don't use it as some kind of backup tool where you expect to have the ability to \"reconstruct\" the commits and repo entirely.", "+", "+## Details", "+", "+For details on how the parsing works, try running with `--debug` and look at the resulting `./debug/` folder.", "+Also, see the comments in the source code; [./git_log_raw_parser.py](./git_log_raw_parser.py)", "diff --git a/glrp/__init__.py b/glrp/__init__.py", "new file mode 100644", "index 0000000..45732c3", "--- /dev/null", "+++ b/glrp/__init__.py", "@@ -0,0 +1,8 @@", "+import os", "+", "+files = os.listdir(__path__[0])", "+modules = (", "+    x.replace(\".py\", \"\") for x in files if x.endswith(\".py\") and not x.startswith(\"__\")", "+)", "+for module in modules:", "+    __import__(\"glrp.\" + module)", "diff --git a/glrp/__main__.py b/glrp/__main__.py", "new file mode 100644", "index 0000000..5a8c7cb", "--- /dev/null", "+++ b/glrp/__main__.py", "@@ -0,0 +1,12 @@", "+#!/usr/bin/env python3", "+if __name__ == \"__main__\":", "+    import os", "+    import sys", "+", "+    above_dir = os.path.dirname(os.path.realpath(__file__)) + \"/../\"", "+    abspath = os.path.abspath(above_dir)", "+    sys.path.insert(0, abspath)", "+", "+    from glrp.cli import main", "+", "+    main()", "diff --git a/glrp/cli.py b/glrp/cli.py", "new file mode 100644", "index 0000000..405bffd", "--- /dev/null", "+++ b/glrp/cli.py", "@@ -0,0 +1,302 @@", "+import os", "+import sys", "+import argparse", "+import json", "+", "+from glrp.internal_parser import parse, parse_to_all_representations", "+from cfbs.utils import find, mkdir, rm", "+from cfbs.pretty import pretty", "+", "+# Usage:", "+# git log -p --format=raw --show-signature --stat | python3 git_log_raw_parser.py", "+", "+", "+class GlobalState:", "+    def __init__(self):", "+        self.quiet = False", "+        self.emails = {}", "+        self.names = {}", "+        self.fingerprints = {}", "+        self.unsigneds = {}", "+", "+        self.commits = {", "+            \"empty\": [],", "+            \"unsigned\": [],", "+            \"signed-trusted\": [],", "+            \"signed-untrusted\": [],", "+        }", "+", "+        self.by_name = {}", "+        self.by_email = {}", "+        self.by_fingerprint = {}", "+        self.by_id = {}", "+        self.summary = {}", "+        self.trusted = None", "+", "+        self.set_trusted_fingerprints()", "+", "+    def _get_trusted_fingerprints(self):", "+        if not os.path.isdir(\"trusted\"):", "+            return", "+        for file in find(\"trusted\", extension=\".fp\"):", "+            with open(file, \"r\") as f:", "+                for line in f:", "+                    line = line.strip()", "+                    line = line.replace(\" \", \"\")", "+                    if line:", "+                        yield line", "+", "+    def set_trusted_fingerprints(self):", "+        self.trusted = list(self._get_trusted_fingerprints())", "+", "+    def record_email(self, email):", "+        if email not in self.emails:", "+            self.emails[email] = 1", "+            # print(\"New email: \" + email)", "+        else:", "+            self.emails[email] += 1", "+", "+    def record_name(self, name):", "+        if name not in self.names:", "+            self.names[name] = 1", "+            # print(\"New name: \" + name)", "+        else:", "+            self.names[name] += 1", "+", "+    def record_fingerprint(self, fingerprint):", "+        if fingerprint not in self.fingerprints:", "+            self.fingerprints[fingerprint] = 1", "+            # print(\"New fingerprint: \" + fingerprint)", "+        else:", "+            self.fingerprints[fingerprint] += 1", "+", "+    def record_unsigned(self, unsigned):", "+        if unsigned not in self.unsigneds:", "+            self.unsigneds[unsigned] = 1", "+            # print(\"New unsigned: \" + unsigned)", "+        else:", "+            self.unsigneds[unsigned] += 1", "+", "+    def record_user(self, user):", "+        name = user[\"name\"]", "+        email = user[\"email\"]", "+        id = user[\"id\"]", "+", "+        if name not in self.by_name:", "+            self.by_name[name] = {\"emails\": [], \"fingerprints\": []}", "+        if email not in self.by_email:", "+            self.by_email[email] = {\"names\": [], \"fingerprints\": []}", "+        if id not in self.by_id:", "+            self.by_id[id] = {\"fingerprints\": []}", "+", "+        if email not in self.by_name[name][\"emails\"]:", "+            self.by_name[name][\"emails\"].append(email)", "+", "+        if name not in self.by_email[email][\"names\"]:", "+            self.by_email[email][\"names\"].append(name)", "+", "+    def record_by(self, commit):", "+        self.record_user(commit[\"author\"])", "+        self.record_user(commit[\"committer\"])", "+        id = commit[\"committer\"][\"id\"]", "+        fingerprint = commit.get(\"fingerprint\", \"unsigned\")", "+        if fingerprint != \"unsigned\":", "+            if fingerprint not in self.by_fingerprint:", "+                self.by_fingerprint[fingerprint] = {\"ids\": []}", "+            if id not in self.by_fingerprint[fingerprint][\"ids\"]:", "+                self.by_fingerprint[fingerprint][\"ids\"].append(id)", "+                if fingerprint not in self.by_id[id][\"fingerprints\"]:", "+                    self.by_id[id][\"fingerprints\"].append(fingerprint)", "+", "+    def record_commit(self, commit):", "+        self.record_by(commit)", "+        self.record_email(commit[\"author\"][\"email\"])", "+", "+        if commit[\"author\"][\"email\"] != commit[\"committer\"][\"email\"]:", "+            self.record_email(commit[\"committer\"][\"email\"])", "+", "+        self.record_name(commit[\"author\"][\"name\"])", "+        if commit[\"author\"][\"name\"] != commit[\"committer\"][\"name\"]:", "+            self.record_name(commit[\"committer\"][\"name\"])", "+", "+        if \"fingerprint\" in commit:", "+            self.record_fingerprint(", "+                commit[\"committer\"][\"id\"] + \" \" + commit[\"fingerprint\"]", "+            )", "+        else:", "+            self.record_unsigned(commit[\"committer\"][\"id\"])", "+", "+        if \"diff\" not in commit:", "+            self.commits[\"empty\"].append(commit)", "+        elif \"fingerprint\" in commit and commit[\"fingerprint\"] in self.trusted:", "+            self.commits[\"signed-trusted\"].append(commit)", "+        elif \"fingerprint\" in commit and commit[\"fingerprint\"] not in self.trusted:", "+            self.commits[\"signed-untrusted\"].append(commit)", "+        else:", "+            self.commits[\"unsigned\"].append(commit)", "+", "+    def generate_summary(self):", "+        self.by_email = {", "+            k: v", "+            for k, v in self.by_email.items()", "+            if len(v[\"names\"]) > 1 or len(v[\"fingerprints\"]) > 1", "+        }", "+        self.by_name = {", "+            k: v", "+            for k, v in self.by_name.items()", "+            if len(v[\"emails\"]) > 1 or len(v[\"fingerprints\"]) > 1", "+        }", "+        self.by_id = {k: v for k, v in self.by_id.items() if len(v[\"fingerprints\"]) > 1}", "+        self.by_fingerprint = {", "+            k: v for k, v in self.by_fingerprint.items() if len(v[\"ids\"]) > 1", "+        }", "+        self.summary = {", "+            \"emails\": self.emails,", "+            \"names\": self.names,", "+            \"fingerprints\": self.fingerprints,", "+            \"unsigneds\": self.unsigneds,", "+            \"commit_counts\": {", "+                \"empty\": len(self.commits[\"empty\"]),", "+                \"signed-trusted\": len(self.commits[\"signed-trusted\"]),", "+                \"signed-untrusted\": len(self.commits[\"signed-untrusted\"]),", "+                \"unsigned\": len(self.commits[\"unsigned\"]),", "+            },", "+            \"by_name\": self.by_name,", "+            \"by_email\": self.by_email,", "+            \"by_id\": self.by_id,", "+            \"by_fingerprint\": self.by_fingerprint,", "+        }", "+", "+", "+global_state = GlobalState()", "+", "+", "+def output_to_directory(output_dir):", "+    assert output_dir is not None and output_dir != \"\"", "+    if not output_dir.endswith(\"/\"):", "+        output_dir = output_dir + \"/\"", "+    if (", "+        not output_dir.startswith(\"./\")", "+        and not output_dir.startswith(\"/\")", "+        and not output_dir.startswith(\"~/\")", "+    ):", "+        output_dir = \"./\" + output_dir", "+", "+    assert output_dir != \"/\"", "+    assert output_dir != \"./\"", "+    assert output_dir != \"~/\"", "+    assert output_dir != \".\"", "+", "+    assert os.path.isdir(output_dir) or not os.path.exists(output_dir)", "+", "+    rm(output_dir, missing_ok=True)", "+", "+    mkdir(\"./out/\", exist_ok=True)", "+", "+    with open(\"./out/summary.json\", \"w\") as f:", "+        f.write(pretty(global_state.summary) + \"\\n\")", "+", "+", "+def dump_commit(raw_commit, split_commit, pretty_commit):", "+    sha = pretty_commit[\"sha\"]", "+    with open(f\"./debug/{sha}.1.raw.txt\", \"w\") as f:", "+        f.write(\"\\n\".join(raw_commit))", "+    with open(f\"./debug/{sha}.2.raw.json\", \"w\") as f:", "+        f.write(pretty(raw_commit))", "+    with open(f\"./debug/{sha}.3.split.json\", \"w\") as f:", "+        f.write(pretty(split_commit))", "+    with open(f\"./debug/{sha}.4.pretty.json\", \"w\") as f:", "+        f.write(pretty(pretty_commit))", "+", "+", "+def parse_logs(", "+    output_dir=None, quiet=False, debug_parser=False, summary=False, pretty_print=False", "+):", "+    assert debug_parser or not quiet or output_dir or summary", "+    # If not, there is nothing to do", "+", "+    if debug_parser:", "+        rm(\"./debug/\")", "+        mkdir(\"./debug/\")", "+        for raw_commit, split_commit, pretty_commit in parse_to_all_representations(", "+            sys.stdin", "+        ):", "+            dump_commit(raw_commit, split_commit, pretty_commit)", "+            if not quiet:", "+                if pretty_print:", "+                    print(pretty(pretty_commit))", "+                else:", "+                    print(json.dumps(pretty_commit))", "+        return", "+", "+    for commit in parse(sys.stdin):", "+        if not summary and not quiet:", "+            if pretty_print:", "+                print(pretty(commit))", "+            else:", "+                print(json.dumps(commit))", "+        if summary or output_dir:", "+            global_state.record_commit(commit)", "+", "+    if not summary and not output_dir:", "+        return", "+", "+    global_state.generate_summary()", "+", "+    if summary:", "+        print(pretty(global_state.summary))", "+    if output_dir:", "+        output_to_directory(output_dir)", "+", "+", "+def get_args():", "+    parser = argparse.ArgumentParser(", "+        prog=\"git-log-raw-parser\",", "+        description=\"Parses the output of 'git log -p --format=raw --show-signature --stat'\",", "+    )", "+    parser.add_argument(", "+        \"-o\", \"--output-dir\", help=\"Output commits to a folder structure\"", "+    )", "+    parser.add_argument(", "+        \"-q\",", "+        \"--quiet\",", "+        default=False,", "+        action=\"store_true\",", "+        help=\"Stop printing JSON commits to standard out\",", "+    )", "+    parser.add_argument(", "+        \"-d\",", "+        \"--debug\",", "+        default=False,", "+        action=\"store_true\",", "+        help=\"Store debug information to ./debug/\",", "+    )", "+    parser.add_argument(", "+        \"--summary\",", "+        default=False,", "+        action=\"store_true\",", "+        help=\"Print summary of commits\",", "+    )", "+    parser.add_argument(", "+        \"--pretty\",", "+        default=False,", "+        action=\"store_true\",", "+        help=\"Print commit JSONs on multiple lines, with indentation\",", "+    )", "+    args = parser.parse_args()", "+    return args", "+", "+", "+def main():", "+    args = get_args()", "+    parse_logs(", "+        output_dir=args.output_dir,", "+        quiet=args.quiet,", "+        debug_parser=args.debug,", "+        summary=args.summary,", "+        pretty_print=args.pretty,", "+    )", "+", "+", "+if __name__ == \"__main__\":", "+    main()", "diff --git a/glrp/internal_parser.py b/glrp/internal_parser.py", "new file mode 100644", "index 0000000..a9762fa", "--- /dev/null", "+++ b/glrp/internal_parser.py", "@@ -0,0 +1,289 @@", "+\"\"\"", "+This file contains the internal / library functions for parsing the output", "+of 'git log -p --format=raw --show-signature --stat'", "+There is intentionally no main function / CLI here, only testable and importable", "+functions to perform the parsing. CLI, and additional tracking, summaries etc.", "+are implemented in git_log_raw_parser.py", "+", "+This is done in 4 steps:", "+1. Iterate over the input stream generating lines", "+2. Iterate over lines, find where the next commit starts, and generate \"raw commits\" (list of lines within one commit)", "+3. Iterate over raw commits, find where each section starts, and generate \"split commits\"", "+4. Iterate over the split commits, generating pretty commits.", "+", "+All of this is implemented using generators / iterators, so you can process and output results", "+while later commits are still being printed / processed.", "+", "+Performance-wise, the 4 step parsing outlined above is not ideal, but it helps a lot", "+in making the code simpler to write and read and less error prone.", "+In pracitce, performance is good enough, even for hundreds, or thousands commits.", "+", "+If you want to operate on the more raw data without much translations / prettifying,", "+you can skip step 4, or steps 3 and 4.", "+", "+Note: The output of the git log command we use varies based on gpg (which keys are imported).", "+      Don't expect the same output on different machines with different gpg states.", "+", "+Note: The parsing is lossy, we reconfigure the input stream to replace unicode", "+      errors (with question marks), so don't expect the diffs or commit messages to be", "+      100% correct for these cases.", "+\"\"\"", "+", "+import sys", "+from io import TextIOWrapper", "+", "+", "+def _reconfigure(input_stream):", "+    # input_stream / sys.stdin is defined as TextIO in typeshed even though it's actually TextIOWrapper by default", "+    # This decision was made because it's common to reassign stdin / stdout / stderr:", "+    # https://github.com/python/typeshed/issues/10093", "+    # For this parser we need to use reconfigure from TextIOWrapper, so we don't", "+    # encounter exceptions for commit messages / diffs with weird characters.", "+    # So we need to assume that sys.stdin is actually TextIOWrapper,", "+    # the assertion makes this assumption explicit and makes strict typecheckers like Pyright happy.", "+    assert isinstance(input_stream, TextIOWrapper)", "+    input_stream.reconfigure(errors=\"replace\")", "+", "+", "+# Utilities:", "+", "+", "+def remove_prefix(line, prefix):", "+    assert line.startswith(prefix)", "+    offset = len(prefix)", "+    assert offset > 0", "+    return line[offset:]", "+", "+", "+def remove_suffix(line, suffix):", "+    assert line.endswith(suffix)", "+    offset = len(suffix)", "+    assert offset > 0", "+    return line[0:-offset]", "+", "+", "+def parse_author(line):", "+    author = {}", "+    split = line.split(\" \")", "+    timezone = split[-1]", "+    timestamp = split[-2]", "+    suffix = \" \" + \" \".join(split[-2:])", "+    full = remove_suffix(line, suffix)", "+    author[\"id\"] = full", "+    assert full[-1] == \">\"", "+    full = full[0:-1]", "+    split = full.split(\"<\")", "+    assert len(split) == 2", "+    author[\"name\"] = split[0].strip()", "+    author[\"email\"] = split[1].strip()", "+    author[\"timestamp\"] = timestamp", "+    author[\"timezone\"] = timezone", "+    return author", "+", "+", "+def valid_signature(commit):", "+    for line in commit[\"gpg\"]:", "+        if line.startswith(\"Good signature from \"):", "+            return True", "+    return False", "+", "+", "+# The main parsing function to use in most cases:", "+", "+", "+def parse(input_stream=None, replace_errors=True):", "+    if input_stream is None:", "+        input_stream = sys.stdin", "+    if replace_errors:", "+        _reconfigure(input_stream)", "+    lines = input_stream_to_lines(input_stream)", "+    raw_commits = lines_to_raw_commits(lines)", "+    split_commits = raw_commits_to_split_commits(raw_commits)", "+    pretty_commits = split_commits_to_pretty_commits(split_commits)", "+    for pretty_commit in pretty_commits:", "+        # TODO: Do we want to do something more here?", "+        yield pretty_commit", "+", "+", "+# Another version of parse() which gives you all 3 representations of a commit", "+# Mostly useful for debugging", "+def parse_to_all_representations(input_stream=None, replace_errors=True):", "+    if input_stream is None:", "+        input_stream = sys.stdin", "+    if replace_errors:", "+        _reconfigure(input_stream)", "+    lines = input_stream_to_lines(input_stream)", "+    raw_commits = lines_to_raw_commits(lines)", "+    for raw_commit in raw_commits:", "+        # These function normally operate on iterators which yield many elements", "+        # (the entire git log), but we can call them on a n=1 tuple as well:", "+        split_commit = next(raw_commits_to_split_commits((raw_commit,)))", "+        pretty_commit = next(split_commits_to_pretty_commits((split_commit,)))", "+        yield (raw_commit, split_commit, pretty_commit)", "+", "+", "+# The individual steps / iterators:", "+", "+", "+def input_stream_to_lines(input_stream):", "+    for line in input_stream:", "+        yield line", "+", "+", "+def lines_to_raw_commits(line_iterator):", "+    current_commit = []", "+    for line in line_iterator:", "+        assert line[-1] == \"\\n\"", "+        line = line[0:-1]", "+        if line.startswith(\"commit \"):", "+            # New commit, finalize previous", "+            if current_commit:", "+                yield current_commit", "+                current_commit = []", "+        current_commit.append(line)", "+    if current_commit:", "+        yield current_commit", "+", "+", "+def raw_commits_to_split_commits(raw_commits):", "+    for raw in raw_commits:", "+        commit = {}", "+        first_line = raw[0]", "+        assert len(first_line) == len(\"commit 680e160eef58249b1b896512d50f6342ad325f01\")", "+        assert first_line.startswith(\"commit \")", "+        commit[\"commit\"] = [first_line]", "+        lines = (l for l in raw[1:])", "+        line = next(lines)", "+        while line and line.startswith(\"gpg: \"):", "+            if \"gpg\" not in commit:", "+                commit[\"gpg\"] = []", "+            commit[\"gpg\"].append(line)", "+            line = next(lines)", "+", "+        if line and line.startswith(\"Primary key fingerprint: \"):", "+            commit[\"Primary key fingerprint\"] = [line]", "+            line = next(lines)", "+", "+        if line and line.startswith(\"     Subkey fingerprint: \"):", "+            commit[\"Subkey fingerprint\"] = [line]", "+            line = next(lines)", "+", "+        assert line and line.startswith(\"tree \")  # TODO: Always?", "+        if line and line.startswith(\"tree \"):", "+            commit[\"tree\"] = [line]", "+            line = next(lines)", "+", "+        while line and line.startswith(\"parent \"):", "+            if not \"parent\" in commit:", "+                commit[\"parent\"] = []", "+            commit[\"parent\"].append(line)", "+            line = next(lines)", "+", "+        assert line and line.startswith(\"author \")  # TODO: Always?", "+        if line and line.startswith(\"author \"):", "+            commit[\"author\"] = [line]", "+            line = next(lines)", "+", "+        assert line and line.startswith(\"committer \")  # TODO: Always?", "+        if line and line.startswith(\"committer \"):", "+            commit[\"committer\"] = [line]", "+            line = next(lines)", "+", "+        if line and line.startswith(\"gpgsig \"):", "+            commit[\"gpgsig\"] = [line]", "+            line = next(lines)", "+            while not line.startswith(\" -----END PGP SIGNATURE-----\"):", "+                assert \"BEGIN PGP SIGNATURE\" not in line", "+                commit[\"gpgsig\"].append(line)", "+                line = next(lines)", "+            assert line == \" -----END PGP SIGNATURE-----\"", "+            commit[\"gpgsig\"].append(line)", "+            line = next(lines)", "+        try:", "+            while line == \" \":", "+                line = next(lines)", "+            while line == \"\":", "+                line = next(lines)", "+            commit[\"message\"] = []", "+            while line and line != \"---\":", "+                commit[\"message\"].append(line)", "+                line = next(lines)", "+            if line and line == \"---\":", "+                commit[\"diff\"] = []", "+                line = next(lines)", "+                for line in lines:", "+                    commit[\"diff\"].append(line)", "+        except StopIteration:", "+            pass", "+        yield commit", "+", "+", "+def _remove_prefixes(commit):", "+    if \"commit\" in commit:", "+        commit[\"commit\"][0] = remove_prefix(commit[\"commit\"][0], \"commit \")", "+    if \"gpg\" in commit:", "+        commit[\"gpg\"] = [remove_prefix(x, \"gpg: \") for x in commit[\"gpg\"]]", "+    if \"Primary key fingerprint\" in commit:", "+        commit[\"Primary key fingerprint\"][0] = remove_prefix(", "+            commit[\"Primary key fingerprint\"][0], \"Primary key fingerprint: \"", "+        )", "+    if \"Subkey fingerprint\" in commit:", "+        commit[\"Subkey fingerprint\"][0] = remove_prefix(", "+            commit[\"Subkey fingerprint\"][0], \"     Subkey fingerprint: \"", "+        )", "+    if \"tree\" in commit:", "+        commit[\"tree\"][0] = remove_prefix(commit[\"tree\"][0], \"tree \")", "+    if \"parent\" in commit:", "+        commit[\"parent\"][0] = remove_prefix(commit[\"parent\"][0], \"parent \")", "+    if \"author\" in commit:", "+        commit[\"author\"][0] = remove_prefix(commit[\"author\"][0], \"author \")", "+    if \"committer\" in commit:", "+        commit[\"committer\"][0] = remove_prefix(commit[\"committer\"][0], \"committer \")", "+    if \"gpgsig\" in commit:", "+        commit[\"gpgsig\"][0] = remove_prefix(commit[\"gpgsig\"][0], \"gpgsig \")", "+", "+", "+def _strip_lists(commit):", "+    assert \"commit\" in commit and len(commit[\"commit\"]) == 1", "+    commit[\"commit\"] = commit[\"commit\"][0]", "+    assert \"tree\" in commit and len(commit[\"tree\"]) == 1", "+    commit[\"tree\"] = commit[\"tree\"][0]", "+", "+", "+def split_commits_to_pretty_commits(split_commits):", "+    for commit in split_commits:", "+        final = {}", "+        for key, value in commit.items():", "+            final[key] = value", "+        _remove_prefixes(final)", "+        _strip_lists(final)", "+        if \"gpgsig\" in final:", "+            assert final[\"gpgsig\"][0] == \"-----BEGIN PGP SIGNATURE-----\"", "+            signature = [\"-----BEGIN PGP SIGNATURE-----\"]", "+            for line in final[\"gpgsig\"][1:]:", "+                assert line.startswith(\" \")", "+                signature.append(line[1:])", "+            final[\"gpgsig\"] = \"\\n\".join(signature)", "+", "+        assert \"author\" in final", "+        final[\"author\"] = parse_author(final[\"author\"][0])", "+        assert \"committer\" in final", "+        final[\"committer\"] = parse_author(final[\"committer\"][0])", "+", "+        if \"Primary key fingerprint\" in final:", "+            del final[\"Primary key fingerprint\"]", "+", "+        if \"gpg\" in final:", "+            assert final[\"gpg\"][0].startswith(\"Signature made \")", "+            final[\"valid_signature\"] = True", "+            if not valid_signature(final):", "+                final[\"valid_signature\"] = False", "+            final[\"fingerprint\"] = remove_prefix(", "+                final[\"gpg\"][1], \"               using RSA key \"", "+            )", "+            if \"Primary key fingerprint\" in final:", "+                del final[\"Primary key fingerprint\"]", "+", "+        assert \"message\" in final", "+        final[\"message\"] = \"\\n\".join(x[4:] for x in final[\"message\"])", "+        yield final", "diff --git a/requirements.txt b/requirements.txt", "new file mode 100644", "index 0000000..8a5aa8e", "--- /dev/null", "+++ b/requirements.txt", "@@ -0,0 +1,3 @@", "+cf-remote==0.6.4", "+cfbs==4.4.0", "+requests==2.32.2", "diff --git a/scripts/look_for_pulls.py b/scripts/look_for_pulls.py", "new file mode 100644", "index 0000000..9cc9e1f", "--- /dev/null", "+++ b/scripts/look_for_pulls.py", "@@ -0,0 +1,23 @@", "+import sys", "+import os", "+", "+import requests", "+", "+pat = os.getenv(\"GH_PAT\")", "+", "+for line in sys.stdin:", "+    headers = {", "+        \"Accept\": \"application/vnd.github+json\",", "+        \"Authorization\": f\"Bearer {pat}\",", "+        \"X-GitHub-Api-Version\": \"2022-11-28\",", "+    }", "+    line = line.replace(\"github.com\", \"api.github.com/repos\").replace(\"/commit/\", \"/commits/\").strip() + \"/pulls\"", "+    r = requests.get(line, headers=headers)", "+    if r.status_code != 200:", "+        print(\"Bad status code: \" + str(r.status_code) + \" \" + line)", "+    data = r.json()", "+    if len(data) == 0:", "+        print(\"Empty: \" + line)", "+        continue", "+    target = data[0][\"url\"]", "+    print(line + \" -> \" + target)", "diff --git a/setup.py b/setup.py", "new file mode 100644", "index 0000000..55fffed", "--- /dev/null", "+++ b/setup.py", "@@ -0,0 +1,53 @@", "+import setuptools", "+import subprocess", "+import os", "+", "+glrp_version = (", "+    subprocess.run([\"git\", \"describe\", \"--tags\"], stdout=subprocess.PIPE)", "+    .stdout.decode(\"utf-8\")", "+    .strip()", "+)", "+", "+if \"-\" in glrp_version:", "+    # when not on tag, git describe outputs: \"1.3.3-22-gdf81228\"", "+    # pip has gotten strict with version numbers", "+    # so change it to: \"1.3.3+22.git.gdf81228\"", "+    # See: https://peps.python.org/pep-0440/#local-version-segments", "+    v, i, s = glrp_version.split(\"-\")", "+    glrp_version = v + \"+\" + i + \".git.\" + s", "+", "+assert \"-\" not in glrp_version", "+assert \".\" in glrp_version", "+", "+assert os.path.isfile(\"glrp/version.py\")", "+with open(\"glrp/VERSION\", \"w\", encoding=\"utf-8\") as fh:", "+    fh.write(\"%s\\n\" % glrp_version)", "+", "+with open(\"README.md\", \"r\", encoding=\"utf-8\") as fh:", "+    long_description = fh.read()", "+", "+setuptools.setup(", "+    name=\"glrp\",", "+    version=glrp_version,", "+    author=\"Northern.tech, Inc.\",", "+    author_email=\"contact@northern.tech\",", "+    description=\"Parser for git log --raw\",", "+    long_description=long_description,", "+    long_description_content_type=\"text/markdown\",", "+    url=\"https://github.com/olehermanse/glrp\",", "+    packages=setuptools.find_packages(),", "+    package_data={\"glrp\": [\"VERSION\"]},", "+    include_package_data=True,", "+    classifiers=[", "+        \"Programming Language :: Python :: 3\",", "+        \"License :: OSI Approved :: GNU General Public License v3 (GPLv3)\",", "+        \"Operating System :: OS Independent\",", "+    ],", "+    python_requires=\">=3.6\",", "+    entry_points={\"console_scripts\": [\"glrp = glrp.main:main\"]},", "+    install_requires=[", "+        \"cf-remote >= 0.6.4\",", "+        \"cfbs >= 4.4.0\",", "+        \"requests >= 2.32.2\",", "+    ],", "+)", "diff --git a/tests/expected-01.json b/tests/expected-01.json", "new file mode 100644", "index 0000000..98294af", "--- /dev/null", "+++ b/tests/expected-01.json", "@@ -0,0 +1,373 @@", "+{", "+  \"commit\": \"db6764a16702747306e851fe0744722c0d001a6f\",", "+  \"gpg\": [", "+    \"Signature made Fri Apr 25 02:43:28 2025 CEST\",", "+    \"               using RSA key AFE8C5F43057C0093122299F584211AF6AB3EE12\",", "+    \"               issuer \\\"ole.elgesem@northern.tech\\\"\",", "+    \"Good signature from \\\"Ole Herman Schumacher Elgesem <ole@cfengine.com>\\\" [ultimate]\",", "+    \"                aka \\\"Ole Herman Schumacher Elgesem <olehelg@ifi.uio.no>\\\" [ultimate]\",", "+    \"                aka \\\"Ole Herman Schumacher Elgesem <olehelg@student.matnat.uio.no>\\\" [ultimate]\",", "+    \"                aka \\\"Ole Herman Schumacher Elgesem <oleherman93@gmail.com>\\\" [ultimate]\",", "+    \"                aka \\\"Ole Herman Schumacher Elgesem <ole.elgesem@northern.tech>\\\" [ultimate]\",", "+    \"                aka \\\"Ole Herman Schumacher Elgesem <ole.elgesem@cfengine.com>\\\" [ultimate]\",", "+    \"                aka \\\"Ole Herman Schumacher Elgesem <ole@northern.tech>\\\" [ultimate]\",", "+    \"                aka \\\"Ole Herman Schumacher Elgesem <olehelg@ulrik.uio.no>\\\" [ultimate]\",", "+    \"                aka \\\"Ole Herman Schumacher Elgesem <olehelg@uio.no>\\\" [ultimate]\"", "+  ],", "+  \"tree\": \"593a58028375d27f2ffbd9c4a81a77ee68df791c\",", "+  \"parent\": [\"61c6e6461f62464e870d921d33d853ac841c7420\"],", "+  \"author\": {", "+    \"id\": \"Ole Herman Schumacher Elgesem <ole.elgesem@northern.tech>\",", "+    \"name\": \"Ole Herman Schumacher Elgesem\",", "+    \"email\": \"ole.elgesem@northern.tech\",", "+    \"timestamp\": \"1745541807\",", "+    \"timezone\": \"+0200\"", "+  },", "+  \"committer\": {", "+    \"id\": \"Ole Herman Schumacher Elgesem <ole.elgesem@northern.tech>\",", "+    \"name\": \"Ole Herman Schumacher Elgesem\",", "+    \"email\": \"ole.elgesem@northern.tech\",", "+    \"timestamp\": \"1745541807\",", "+    \"timezone\": \"+0200\"", "+  },", "+  \"gpgsig\": \"-----BEGIN PGP SIGNATURE-----\\n\\niQJOBAABCAA4FiEEr+jF9DBXwAkxIimfWEIRr2qz7hIFAmgK2rAaHG9sZS5lbGdl\\nc2VtQG5vcnRoZXJuLnRlY2gACgkQWEIRr2qz7hL/qw//fyrGzn30Cr2gGY/J9wxS\\nTuH+jd5DP5gunk4neTIsChBud+XCBOYc6/qCygu71DemWvtheEarjOviBLFnsSWH\\nNLtahhC1UCK5ETLHSTNWeJzq7WTCtInwItiaxOv8ojE7y12J1AU+969IdlGJtMv9\\ndLP08idsZZ0eJHY3TM9yihFELRvIWOzeWz+el4mXjaML23QAUmXTlZ/tgXn4on63\\nBmodNWkBkuQm5blTmuK3CZjyF4B7VTYDZM1RCBgypeC7I+ybQk4vpegOIR9Ac59Q\\ngWkYMnpZC7TX3bHjVyLRUlJlGgoknVurLGqgwsRii9jEUW181plTpRj5tcBdP7YQ\\nNyT9IyMGV3bBYwTCfc8ob48Uo5ZLa5WxUTJhL4XzxKWxE0LxNolOa9o8K4lDdMoJ\\nOdH//Yu3e+JwRDLyCl7IyhAhj9BC4If/T448qd6BAcoWWe8SSqDfsDO9rJa+lo3Y\\nyR9cab9OeotSIWpzuKr3ZJYDmY1lPxKlGQs29YOXs0EZ5idCqBZzslT9760syYcq\\nDrQ4u+Fsshdax6Td0Tr/24hiyVN+5jeXJ3UpcC3/0XDoZPVcVTAgosmnkWovMivc\\nvThXo5BS5nODNJLWAkkmJHAR7EIbD3nTFGAStSlXJZHuZ541Km2kR2Px2xeS3C3Z\\nIqjznY4+oz+9d1eUMlafe0U=\\n=m9QU\\n-----END PGP SIGNATURE-----\",", "+  \"message\": \"Fixed logic\\n\\nSigned-off-by: Ole Herman Schumacher Elgesem <ole.elgesem@northern.tech>\",", "+  \"diff\": [", "+    \" internal_parser.py    |   8 +-\",", "+    \" 2 files changed, 124 insertions(+), 95 deletions(-)\",", "+    \"\",", "+    \"diff --git a/git_log_raw_parser.py b/git_log_raw_parser.py\",", "+    \"index 1be31c7..e9332db 100644\",", "+    \"--- a/git_log_raw_parser.py\",", "+    \"+++ b/git_log_raw_parser.py\",", "+    \"@@ -1,6 +1,7 @@\",", "+    \" import os\",", "+    \" import sys\",", "+    \" import argparse\",", "+    \"+import json\",", "+    \" \",", "+    \" from internal_parser import parse, parse_to_all_representations\",", "+    \" from cfbs.utils import find, mkdir, rm\",", "+    \"@@ -35,6 +36,8 @@ class GlobalState:\",", "+    \"         self.set_trusted_fingerprints()\",", "+    \" \",", "+    \"     def _get_trusted_fingerprints(self):\",", "+    \"+        if not os.path.isdir(\\\"trusted\\\"):\",", "+    \"+            return\",", "+    \"         for file in find(\\\"trusted\\\", extension=\\\".fp\\\"):\",", "+    \"             with open(file, \\\"r\\\") as f:\",", "+    \"                 for line in f:\",", "+    \"@@ -49,28 +52,28 @@ class GlobalState:\",", "+    \"     def record_email(self, email):\",", "+    \"         if email not in self.emails:\",", "+    \"             self.emails[email] = 1\",", "+    \"-            print(\\\"New email: \\\" + email)\",", "+    \"+            # print(\\\"New email: \\\" + email)\",", "+    \"         else:\",", "+    \"             self.emails[email] += 1\",", "+    \" \",", "+    \"     def record_name(self, name):\",", "+    \"         if name not in self.names:\",", "+    \"             self.names[name] = 1\",", "+    \"-            print(\\\"New name: \\\" + name)\",", "+    \"+            # print(\\\"New name: \\\" + name)\",", "+    \"         else:\",", "+    \"             self.names[name] += 1\",", "+    \" \",", "+    \"     def record_fingerprint(self, fingerprint):\",", "+    \"         if fingerprint not in self.fingerprints:\",", "+    \"             self.fingerprints[fingerprint] = 1\",", "+    \"-            print(\\\"New fingerprint: \\\" + fingerprint)\",", "+    \"+            # print(\\\"New fingerprint: \\\" + fingerprint)\",", "+    \"         else:\",", "+    \"             self.fingerprints[fingerprint] += 1\",", "+    \" \",", "+    \"     def record_unsigned(self, unsigned):\",", "+    \"         if unsigned not in self.unsigneds:\",", "+    \"             self.unsigneds[unsigned] = 1\",", "+    \"-            print(\\\"New unsigned: \\\" + unsigned)\",", "+    \"+            # print(\\\"New unsigned: \\\" + unsigned)\",", "+    \"         else:\",", "+    \"             self.unsigneds[unsigned] += 1\",", "+    \" \",", "+    \"@@ -105,6 +108,65 @@ class GlobalState:\",", "+    \"                 if fingerprint not in self.by_id[id][\\\"fingerprints\\\"]:\",", "+    \"                     self.by_id[id][\\\"fingerprints\\\"].append(fingerprint)\",", "+    \" \",", "+    \"+    def record_commit(self, commit):\",", "+    \"+        self.record_by(commit)\",", "+    \"+        self.record_email(commit[\\\"author\\\"][\\\"email\\\"])\",", "+    \"+\",", "+    \"+        if commit[\\\"author\\\"][\\\"email\\\"] != commit[\\\"committer\\\"][\\\"email\\\"]:\",", "+    \"+            self.record_email(commit[\\\"committer\\\"][\\\"email\\\"])\",", "+    \"+\",", "+    \"+        self.record_name(commit[\\\"author\\\"][\\\"name\\\"])\",", "+    \"+        if commit[\\\"author\\\"][\\\"name\\\"] != commit[\\\"committer\\\"][\\\"name\\\"]:\",", "+    \"+            self.record_name(commit[\\\"committer\\\"][\\\"name\\\"])\",", "+    \"+\",", "+    \"+        if \\\"fingerprint\\\" in commit:\",", "+    \"+            self.record_fingerprint(\",", "+    \"+                commit[\\\"committer\\\"][\\\"id\\\"] + \\\" \\\" + commit[\\\"fingerprint\\\"]\",", "+    \"+            )\",", "+    \"+        else:\",", "+    \"+            self.record_unsigned(commit[\\\"committer\\\"][\\\"id\\\"])\",", "+    \"+\",", "+    \"+        if \\\"diff\\\" not in commit:\",", "+    \"+            self.commits[\\\"empty\\\"].append(commit)\",", "+    \"+        elif \\\"fingerprint\\\" in commit and commit[\\\"fingerprint\\\"] in self.trusted:\",", "+    \"+            self.commits[\\\"signed-trusted\\\"].append(commit)\",", "+    \"+        elif \\\"fingerprint\\\" in commit and commit[\\\"fingerprint\\\"] not in self.trusted:\",", "+    \"+            self.commits[\\\"signed-untrusted\\\"].append(commit)\",", "+    \"+        else:\",", "+    \"+            self.commits[\\\"unsigned\\\"].append(commit)\",", "+    \"+\",", "+    \"+    def generate_summary(self):\",", "+    \"+        self.by_email = {\",", "+    \"+            k: v\",", "+    \"+            for k, v in self.by_email.items()\",", "+    \"+            if len(v[\\\"names\\\"]) > 1 or len(v[\\\"fingerprints\\\"]) > 1\",", "+    \"+        }\",", "+    \"+        self.by_name = {\",", "+    \"+            k: v\",", "+    \"+            for k, v in self.by_name.items()\",", "+    \"+            if len(v[\\\"emails\\\"]) > 1 or len(v[\\\"fingerprints\\\"]) > 1\",", "+    \"+        }\",", "+    \"+        self.by_id = {k: v for k, v in self.by_id.items() if len(v[\\\"fingerprints\\\"]) > 1}\",", "+    \"+        self.by_fingerprint = {\",", "+    \"+            k: v for k, v in self.by_fingerprint.items() if len(v[\\\"ids\\\"]) > 1\",", "+    \"+        }\",", "+    \"+        self.summary = {\",", "+    \"+            \\\"emails\\\": self.emails,\",", "+    \"+            \\\"names\\\": self.names,\",", "+    \"+            \\\"fingerprints\\\": self.fingerprints,\",", "+    \"+            \\\"unsigneds\\\": self.unsigneds,\",", "+    \"+            \\\"commit_counts\\\": {\",", "+    \"+                \\\"empty\\\": len(self.commits[\\\"empty\\\"]),\",", "+    \"+                \\\"signed-trusted\\\": len(self.commits[\\\"signed-trusted\\\"]),\",", "+    \"+                \\\"signed-untrusted\\\": len(self.commits[\\\"signed-untrusted\\\"]),\",", "+    \"+                \\\"unsigned\\\": len(self.commits[\\\"unsigned\\\"]),\",", "+    \"+            },\",", "+    \"+            \\\"by_name\\\": self.by_name,\",", "+    \"+            \\\"by_email\\\": self.by_email,\",", "+    \"+            \\\"by_id\\\": self.by_id,\",", "+    \"+            \\\"by_fingerprint\\\": self.by_fingerprint,\",", "+    \"+        }\",", "+    \"+\",", "+    \" \",", "+    \" global_state = GlobalState()\",", "+    \" \",", "+    \"@@ -134,101 +196,54 @@ def output_to_directory(output_dir):\",", "+    \"     with open(\\\"./out/summary.json\\\", \\\"w\\\") as f:\",", "+    \"         f.write(pretty(global_state.summary) + \\\"\\\\n\\\")\",", "+    \" \",", "+    \"-    for key, values in global_state.commits.items():\",", "+    \"-        folder = \\\"./out/\\\" + key\",", "+    \"-        mkdir(folder)\",", "+    \"-        with open(folder + \\\".txt\\\", \\\"w\\\") as links:\",", "+    \"-            for commit in values:\",", "+    \"-                sha = commit[\\\"sha\\\"]\",", "+    \"-                links.write(\",", "+    \"-                    \\\"https://github.com/cfengine/masterfiles/commit/\\\" + sha + \\\"\\\\n\\\"\",", "+    \"-                )\",", "+    \"-                filename = folder + \\\"/\\\" + sha + \\\".json\\\"\",", "+    \"-                with open(filename, \\\"w\\\") as f:\",", "+    \"-                    f.write(pretty(commit))\",", "+    \"-\",", "+    \"-\",", "+    \"-def parse_logs(output_dir=None, quiet=False, debug_parser=False):\",", "+    \"+\",", "+    \"+def dump_commit(raw_commit, split_commit, pretty_commit):\",", "+    \"+    sha = pretty_commit[\\\"sha\\\"]\",", "+    \"+    with open(f\\\"./debug/{sha}.1.raw.txt\\\", \\\"w\\\") as f:\",", "+    \"+        f.write(\\\"\\\\n\\\".join(raw_commit))\",", "+    \"+    with open(f\\\"./debug/{sha}.2.raw.json\\\", \\\"w\\\") as f:\",", "+    \"+        f.write(pretty(raw_commit))\",", "+    \"+    with open(f\\\"./debug/{sha}.3.split.json\\\", \\\"w\\\") as f:\",", "+    \"+        f.write(pretty(split_commit))\",", "+    \"+    with open(f\\\"./debug/{sha}.4.pretty.json\\\", \\\"w\\\") as f:\",", "+    \"+        f.write(pretty(pretty_commit))\",", "+    \"+\",", "+    \"+\",", "+    \"+def parse_logs(\",", "+    \"+    output_dir=None, quiet=False, debug_parser=False, summary=False, pretty_print=False\",", "+    \"+):\",", "+    \"+    assert debug_parser or not quiet or output_dir or summary\",", "+    \"+    # If not, there is nothing to do\",", "+    \"+\",", "+    \"     if debug_parser:\",", "+    \"         rm(\\\"./debug/\\\")\",", "+    \"         mkdir(\\\"./debug/\\\")\",", "+    \"         for raw_commit, split_commit, pretty_commit in parse_to_all_representations(\",", "+    \"             sys.stdin\",", "+    \"         ):\",", "+    \"-            sha = pretty_commit[\\\"sha\\\"]\",", "+    \"-            with open(f\\\"./debug/{sha}.1.raw.txt\\\", \\\"w\\\") as f:\",", "+    \"-                f.write(\\\"\\\\n\\\".join(raw_commit))\",", "+    \"-            with open(f\\\"./debug/{sha}.2.raw.json\\\", \\\"w\\\") as f:\",", "+    \"-                f.write(pretty(raw_commit))\",", "+    \"-            with open(f\\\"./debug/{sha}.3.split.json\\\", \\\"w\\\") as f:\",", "+    \"-                f.write(pretty(split_commit))\",", "+    \"-            with open(f\\\"./debug/{sha}.4.pretty.json\\\", \\\"w\\\") as f:\",", "+    \"-                f.write(pretty(pretty_commit))\",", "+    \"+            dump_commit(raw_commit, split_commit, pretty_commit)\",", "+    \"+            if not quiet:\",", "+    \"+                if pretty_print:\",", "+    \"+                    print(pretty(pretty_commit))\",", "+    \"+                else:\",", "+    \"+                    print(json.dumps(pretty_commit))\",", "+    \"         return\",", "+    \" \",", "+    \"     for commit in parse(sys.stdin):\",", "+    \"-        global_state.record_by(commit)\",", "+    \"-        global_state.record_email(commit[\\\"author\\\"][\\\"email\\\"])\",", "+    \"-        if commit[\\\"author\\\"][\\\"email\\\"] != commit[\\\"committer\\\"][\\\"email\\\"]:\",", "+    \"-            global_state.record_email(commit[\\\"committer\\\"][\\\"email\\\"])\",", "+    \"+        if not summary and not quiet:\",", "+    \"+            if pretty_print:\",", "+    \"+                print(pretty(commit))\",", "+    \"+            else:\",", "+    \"+                print(json.dumps(commit))\",", "+    \"+        if summary or output_dir:\",", "+    \"+            global_state.record_commit(commit)\",", "+    \"+\",", "+    \"+    if not summary and not output_dir:\",", "+    \"+        return\",", "+    \" \",", "+    \"-        global_state.record_name(commit[\\\"author\\\"][\\\"name\\\"])\",", "+    \"-        if commit[\\\"author\\\"][\\\"name\\\"] != commit[\\\"committer\\\"][\\\"name\\\"]:\",", "+    \"-            global_state.record_name(commit[\\\"committer\\\"][\\\"name\\\"])\",", "+    \"+    global_state.generate_summary()\",", "+    \" \",", "+    \"-        if \\\"fingerprint\\\" in commit:\",", "+    \"-            global_state.record_fingerprint(\",", "+    \"-                commit[\\\"committer\\\"][\\\"id\\\"] + \\\" \\\" + commit[\\\"fingerprint\\\"]\",", "+    \"-            )\",", "+    \"-        else:\",", "+    \"-            global_state.record_unsigned(commit[\\\"committer\\\"][\\\"id\\\"])\",", "+    \"-\",", "+    \"-        if \\\"diff\\\" not in commit:\",", "+    \"-            global_state.commits[\\\"empty\\\"].append(commit)\",", "+    \"-        elif \\\"fingerprint\\\" in commit and commit[\\\"fingerprint\\\"] in global_state.trusted:\",", "+    \"-            global_state.commits[\\\"signed-trusted\\\"].append(commit)\",", "+    \"-        elif (\",", "+    \"-            \\\"fingerprint\\\" in commit\",", "+    \"-            and commit[\\\"fingerprint\\\"] not in global_state.trusted\",", "+    \"-        ):\",", "+    \"-            global_state.commits[\\\"signed-untrusted\\\"].append(commit)\",", "+    \"-        else:\",", "+    \"-            global_state.commits[\\\"unsigned\\\"].append(commit)\",", "+    \"-\",", "+    \"-    global_state.by_email = {\",", "+    \"-        k: v\",", "+    \"-        for k, v in global_state.by_email.items()\",", "+    \"-        if len(v[\\\"names\\\"]) > 1 or len(v[\\\"fingerprints\\\"]) > 1\",", "+    \"-    }\",", "+    \"-    global_state.by_name = {\",", "+    \"-        k: v\",", "+    \"-        for k, v in global_state.by_name.items()\",", "+    \"-        if len(v[\\\"emails\\\"]) > 1 or len(v[\\\"fingerprints\\\"]) > 1\",", "+    \"-    }\",", "+    \"-    global_state.by_id = {\",", "+    \"-        k: v for k, v in global_state.by_id.items() if len(v[\\\"fingerprints\\\"]) > 1\",", "+    \"-    }\",", "+    \"-    global_state.by_fingerprint = {\",", "+    \"-        k: v for k, v in global_state.by_fingerprint.items() if len(v[\\\"ids\\\"]) > 1\",", "+    \"-    }\",", "+    \"-    global_state.summary = {\",", "+    \"-        \\\"emails\\\": global_state.emails,\",", "+    \"-        \\\"names\\\": global_state.names,\",", "+    \"-        \\\"fingerprints\\\": global_state.fingerprints,\",", "+    \"-        \\\"unsigneds\\\": global_state.unsigneds,\",", "+    \"-        \\\"commit_counts\\\": {\",", "+    \"-            \\\"empty\\\": len(global_state.commits[\\\"empty\\\"]),\",", "+    \"-            \\\"signed-trusted\\\": len(global_state.commits[\\\"signed-trusted\\\"]),\",", "+    \"-            \\\"signed-untrusted\\\": len(global_state.commits[\\\"signed-untrusted\\\"]),\",", "+    \"-            \\\"unsigned\\\": len(global_state.commits[\\\"unsigned\\\"]),\",", "+    \"-        },\",", "+    \"-        \\\"by_name\\\": global_state.by_name,\",", "+    \"-        \\\"by_email\\\": global_state.by_email,\",", "+    \"-        \\\"by_id\\\": global_state.by_id,\",", "+    \"-        \\\"by_fingerprint\\\": global_state.by_fingerprint,\",", "+    \"-    }\",", "+    \"-\",", "+    \"-    if not quiet:\",", "+    \"+    if summary:\",", "+    \"         print(pretty(global_state.summary))\",", "+    \"     if output_dir:\",", "+    \"         output_to_directory(output_dir)\",", "+    \"@@ -256,13 +271,31 @@ def get_args():\",", "+    \"         action=\\\"store_true\\\",\",", "+    \"         help=\\\"Store debug information to ./debug/\\\",\",", "+    \"     )\",", "+    \"+    parser.add_argument(\",", "+    \"+        \\\"--summary\\\",\",", "+    \"+        default=False,\",", "+    \"+        action=\\\"store_true\\\",\",", "+    \"+        help=\\\"Print summary of commits\\\",\",", "+    \"+    )\",", "+    \"+    parser.add_argument(\",", "+    \"+        \\\"--pretty\\\",\",", "+    \"+        default=False,\",", "+    \"+        action=\\\"store_true\\\",\",", "+    \"+        help=\\\"Print commit JSONs on multiple lines, with indentation\\\",\",", "+    \"+    )\",", "+    \"     args = parser.parse_args()\",", "+    \"     return args\",", "+    \" \",", "+    \" \",", "+    \" def main():\",", "+    \"     args = get_args()\",", "+    \"-    parse_logs(output_dir=args.output_dir, quiet=args.quiet, debug_parser=args.debug)\",", "+    \"+    parse_logs(\",", "+    \"+        output_dir=args.output_dir,\",", "+    \"+        quiet=args.quiet,\",", "+    \"+        debug_parser=args.debug,\",", "+    \"+        summary=args.summary,\",", "+    \"+        pretty_print=args.pretty,\",", "+    \"+    )\",", "+    \" \",", "+    \" \",", "+    \" if __name__ == \\\"__main__\\\":\",", "+    \"diff --git a/internal_parser.py b/internal_parser.py\",", "+    \"index 179cf63..2430379 100644\",", "+    \"--- a/internal_parser.py\",", "+    \"+++ b/internal_parser.py\",", "+    \"@@ -1,5 +1,3 @@\",", "+    \"-from cfbs.pretty import pretty\",", "+    \"-\",", "+    \" \\\"\\\"\\\"\",", "+    \" This file contains the internal / library functions for parsing the output\",", "+    \" of 'git log -p --format=raw --show-signature --stat'\",", "+    \"@@ -175,7 +173,6 @@ def raw_commits_to_split_commits(raw_commits):\",", "+    \"             )\",", "+    \"             line = next(lines)\",", "+    \" \",", "+    \"-        print(pretty(raw))\",", "+    \"         assert line and line.startswith(\\\"tree \\\")  # TODO: Always?\",", "+    \"         if line and line.startswith(\\\"tree \\\"):\",", "+    \"             commit[\\\"tree\\\"] = remove_prefix(line, \\\"tree \\\")\",", "+    \"@@ -186,8 +183,6 @@ def raw_commits_to_split_commits(raw_commits):\",", "+    \"                 commit[\\\"parent\\\"] = []\",", "+    \"             commit[\\\"parent\\\"].append(remove_prefix(line, \\\"parent \\\"))\",", "+    \"             line = next(lines)\",", "+    \"-        if \\\"parent\\\" in commit:\",", "+    \"-            assert 0 < len(commit[\\\"parent\\\"]) <= 2\",", "+    \" \",", "+    \"         assert line and line.startswith(\\\"author \\\")  # TODO: Always?\",", "+    \"         if line and line.startswith(\\\"author \\\"):\",", "+    \"@@ -251,8 +246,9 @@ def split_commits_to_pretty_commits(split_commits):\",", "+    \" \",", "+    \"         if \\\"gpg\\\" in commit:\",", "+    \"             assert commit[\\\"gpg\\\"][0].startswith(\\\"Signature made \\\")\",", "+    \"+            commit[\\\"valid_signature\\\"] = True\",", "+    \"             if not valid_signature(commit):\",", "+    \"-                print(\\\"Bad signature:\\\" + pretty(commit))\",", "+    \"+                commit[\\\"valid_signature\\\"] = False\",", "+    \"             final[\\\"fingerprint\\\"] = remove_prefix(\",", "+    \"                 commit[\\\"gpg\\\"][1], \\\"               using RSA key \\\"\",", "+    \"             )\",", "+    \"\"", "+  ],", "+  \"valid_signature\": true,", "+  \"fingerprint\": \"AFE8C5F43057C0093122299F584211AF6AB3EE12\"", "+}", "diff --git a/tests/expected-02.json b/tests/expected-02.json", "new file mode 100644", "index 0000000..36b966f", "--- /dev/null", "+++ b/tests/expected-02.json", "@@ -0,0 +1,699 @@", "+{", "+  \"commit\": \"61c6e6461f62464e870d921d33d853ac841c7420\",", "+  \"gpg\": [", "+    \"Signature made Fri Apr 25 00:55:24 2025 CEST\",", "+    \"               using RSA key AFE8C5F43057C0093122299F584211AF6AB3EE12\",", "+    \"               issuer \\\"ole.elgesem@northern.tech\\\"\",", "+    \"Good signature from \\\"Ole Herman Schumacher Elgesem <ole@cfengine.com>\\\" [ultimate]\",", "+    \"                aka \\\"Ole Herman Schumacher Elgesem <olehelg@ifi.uio.no>\\\" [ultimate]\",", "+    \"                aka \\\"Ole Herman Schumacher Elgesem <olehelg@student.matnat.uio.no>\\\" [ultimate]\",", "+    \"                aka \\\"Ole Herman Schumacher Elgesem <oleherman93@gmail.com>\\\" [ultimate]\",", "+    \"                aka \\\"Ole Herman Schumacher Elgesem <ole.elgesem@northern.tech>\\\" [ultimate]\",", "+    \"                aka \\\"Ole Herman Schumacher Elgesem <ole.elgesem@cfengine.com>\\\" [ultimate]\",", "+    \"                aka \\\"Ole Herman Schumacher Elgesem <ole@northern.tech>\\\" [ultimate]\",", "+    \"                aka \\\"Ole Herman Schumacher Elgesem <olehelg@ulrik.uio.no>\\\" [ultimate]\",", "+    \"                aka \\\"Ole Herman Schumacher Elgesem <olehelg@uio.no>\\\" [ultimate]\"", "+  ],", "+  \"tree\": \"ece6177eb4489042bee34fcafc16a123f57cbc7b\",", "+  \"author\": {", "+    \"id\": \"Ole Herman Schumacher Elgesem <ole.elgesem@northern.tech>\",", "+    \"name\": \"Ole Herman Schumacher Elgesem\",", "+    \"email\": \"ole.elgesem@northern.tech\",", "+    \"timestamp\": \"1744918684\",", "+    \"timezone\": \"+0200\"", "+  },", "+  \"committer\": {", "+    \"id\": \"Ole Herman Schumacher Elgesem <ole.elgesem@northern.tech>\",", "+    \"name\": \"Ole Herman Schumacher Elgesem\",", "+    \"email\": \"ole.elgesem@northern.tech\",", "+    \"timestamp\": \"1745535319\",", "+    \"timezone\": \"+0200\"", "+  },", "+  \"gpgsig\": \"-----BEGIN PGP SIGNATURE-----\\n\\niQJOBAABCAA4FiEEr+jF9DBXwAkxIimfWEIRr2qz7hIFAmgKwVwaHG9sZS5lbGdl\\nc2VtQG5vcnRoZXJuLnRlY2gACgkQWEIRr2qz7hIMABAAqZT9E1seWQ1Vr5RasscE\\nsVb7pkQrnlH0aF4dudGxFF8GBNLRCJsUwf7r6mIjcIdKFM2DqPDIg2dor3OC2hOX\\nvFZxC87iRyX+8sYIhk7F2HNkVK8tTOwUNYm3STKF+7dYYJx5Au0I52aeaVmOnavU\\nYyx+SKNwwDsNVrTYWM2U9RyKo1PobnWwVGPbXGamA74hAg4sSPAOEGSJgfqNNRBd\\nFtEGFbt6xB1joL5WFE0ChqNgd/HBt5O//k8L9bJ0k5WwfHLZGJLQofyuI4rzkgce\\nHg6+cLFX420XWsfNoVTnTiwt7Ga1uLJP6oNBeC62QcOdnh69Cq8abOrbesiG94P1\\nwby88VBShcZbWMaYqtX5pWUmhltKG97QmU2bRCe21LLCtnq/wvdx8HmKu462xAnu\\nD5gTNHslab8joEG9CwVtUHFDX/jVNVReJduxTov2tV+QRodiFV2nf9tvHLmB1aXU\\nKe6ism4jKY+LGtp0PHr5qrPcnf+49SKF707Eh4plVlY8F2N75RxpivoQZ1CnPSAe\\nWavgiMi/mRP0y0WjlRp88C+m5cUjJe+brXQ+8Xx7FC9q1vwR1yN4UWpNcoy82z8w\\ncGA1Rbt4rAsY2IiAEsCx7TL6GSBXQ/2/M3dS1tO4C6f+R0XuXs/tY9tNCY3oph2a\\nprbPnQ0FD1M1woG7oqCvoDo=\\n=TNNi\\n-----END PGP SIGNATURE-----\",", "+  \"message\": \"Initial commit, working version\\n\\nSigned-off-by: Ole Herman Schumacher Elgesem <ole.elgesem@northern.tech>\",", "+  \"diff\": [", "+    \" README.md             |  53 ++++++++++\",", "+    \" git_log_raw_parser.py | 269 ++++++++++++++++++++++++++++++++++++++++++++++++++\",", "+    \" internal_parser.py    | 264 +++++++++++++++++++++++++++++++++++++++++++++++++\",", "+    \" look_for_pulls.py     |  23 +++++\",", "+    \" requirements.txt      |   3 +\",", "+    \" 6 files changed, 618 insertions(+)\",", "+    \"\",", "+    \"diff --git a/.gitignore b/.gitignore\",", "+    \"new file mode 100644\",", "+    \"index 0000000..4316b8d\",", "+    \"--- /dev/null\",", "+    \"+++ b/.gitignore\",", "+    \"@@ -0,0 +1,6 @@\",", "+    \"+/core/\",", "+    \"+/masterfiles/\",", "+    \"+/out/\",", "+    \"+__pycache__/\",", "+    \"+/debug/\",", "+    \"+/trusted/\",", "+    \"diff --git a/README.md b/README.md\",", "+    \"new file mode 100644\",", "+    \"index 0000000..534755a\",", "+    \"--- /dev/null\",", "+    \"+++ b/README.md\",", "+    \"@@ -0,0 +1,53 @@\",", "+    \"+# git-log-raw-parser\",", "+    \"+\",", "+    \"+A parser for parsing the command:\",", "+    \"+\",", "+    \"+```\",", "+    \"+git log -p --format=raw --show-signature --stat\",", "+    \"+```\",", "+    \"+\",", "+    \"+## Why?\",", "+    \"+\",", "+    \"+The above command provides a lot of useful information about git commits, which we can analyze, including:\",", "+    \"+\",", "+    \"+- Commit message\",", "+    \"+- Diffs\",", "+    \"+- Author name and email\",", "+    \"+- Committer name and email\",", "+    \"+- Timestamps\",", "+    \"+- GPG signature\",", "+    \"+\",", "+    \"+On its own, git log does not output its information in a format which is easy for other programs to use.\",", "+    \"+So, this tool parses the output and turns it into JSON which is more easy to analyze and check.\",", "+    \"+\",", "+    \"+## Usage\",", "+    \"+\",", "+    \"+Using it is simple, just run the `git log` command and pipe it to the standard input of `git_log_raw_parser`\",", "+    \"+\",", "+    \"+```\",", "+    \"+git log -p --format=raw --show-signature --stat | python3 git_log_raw_parser.py --output-dir=./out/\",", "+    \"+```\",", "+    \"+\",", "+    \"+Or perhaps a bit more realistic:\",", "+    \"+\",", "+    \"+```\",", "+    \"+git clone https://github.com/cfengine/core\",", "+    \"+(cd core && git log -p --format=raw --show-signature --stat HEAD~500..HEAD 2>/dev/null) | python3 git_log_raw_parser.py\",", "+    \"+```\",", "+    \"+\",", "+    \"+(Clone CFEngine core, start subshell which enters the subdirectory and runs git log for the past 500 commits).\",", "+    \"+\",", "+    \"+## Improtant notes\",", "+    \"+\",", "+    \"+**Warning:** The output of `--show-signature` varies depending on which keys you have imported / trusted in your installation of GPG.\",", "+    \"+Make sure you import the correct GPG keys beforehand, and don't expect output to be identical across different machines with different GPG states.\",", "+    \"+\",", "+    \"+**Warning:** Consider this a best-effort, \\\"lossy\\\" parsing.\",", "+    \"+Commits may contain non utf-8 characters, to avoid \\\"crashing\\\", we skip these, replacing them with question marks.\",", "+    \"+Thus, the parsing is lossy, don't expect all the information to be there.\",", "+    \"+This tool can be used for searching / analyzing commits, but don't use it as some kind of backup tool where you expect to have the ability to \\\"reconstruct\\\" the commits and repo entirely.\",", "+    \"+\",", "+    \"+## Details\",", "+    \"+\",", "+    \"+For details on how the parsing works, try running with `--debug` and look at the resulting `./debug/` folder.\",", "+    \"+Also, see the comments in the source code; [./git_log_raw_parser.py](./git_log_raw_parser.py)\",", "+    \"diff --git a/git_log_raw_parser.py b/git_log_raw_parser.py\",", "+    \"new file mode 100644\",", "+    \"index 0000000..1be31c7\",", "+    \"--- /dev/null\",", "+    \"+++ b/git_log_raw_parser.py\",", "+    \"@@ -0,0 +1,269 @@\",", "+    \"+import os\",", "+    \"+import sys\",", "+    \"+import argparse\",", "+    \"+\",", "+    \"+from internal_parser import parse, parse_to_all_representations\",", "+    \"+from cfbs.utils import find, mkdir, rm\",", "+    \"+from cfbs.pretty import pretty\",", "+    \"+\",", "+    \"+# Usage:\",", "+    \"+# git log -p --format=raw --show-signature --stat | python3 git_log_raw_parser.py\",", "+    \"+\",", "+    \"+\",", "+    \"+class GlobalState:\",", "+    \"+    def __init__(self):\",", "+    \"+        self.quiet = False\",", "+    \"+        self.emails = {}\",", "+    \"+        self.names = {}\",", "+    \"+        self.fingerprints = {}\",", "+    \"+        self.unsigneds = {}\",", "+    \"+\",", "+    \"+        self.commits = {\",", "+    \"+            \\\"empty\\\": [],\",", "+    \"+            \\\"unsigned\\\": [],\",", "+    \"+            \\\"signed-trusted\\\": [],\",", "+    \"+            \\\"signed-untrusted\\\": [],\",", "+    \"+        }\",", "+    \"+\",", "+    \"+        self.by_name = {}\",", "+    \"+        self.by_email = {}\",", "+    \"+        self.by_fingerprint = {}\",", "+    \"+        self.by_id = {}\",", "+    \"+        self.summary = {}\",", "+    \"+        self.trusted = None\",", "+    \"+\",", "+    \"+        self.set_trusted_fingerprints()\",", "+    \"+\",", "+    \"+    def _get_trusted_fingerprints(self):\",", "+    \"+        for file in find(\\\"trusted\\\", extension=\\\".fp\\\"):\",", "+    \"+            with open(file, \\\"r\\\") as f:\",", "+    \"+                for line in f:\",", "+    \"+                    line = line.strip()\",", "+    \"+                    line = line.replace(\\\" \\\", \\\"\\\")\",", "+    \"+                    if line:\",", "+    \"+                        yield line\",", "+    \"+\",", "+    \"+    def set_trusted_fingerprints(self):\",", "+    \"+        self.trusted = list(self._get_trusted_fingerprints())\",", "+    \"+\",", "+    \"+    def record_email(self, email):\",", "+    \"+        if email not in self.emails:\",", "+    \"+            self.emails[email] = 1\",", "+    \"+            print(\\\"New email: \\\" + email)\",", "+    \"+        else:\",", "+    \"+            self.emails[email] += 1\",", "+    \"+\",", "+    \"+    def record_name(self, name):\",", "+    \"+        if name not in self.names:\",", "+    \"+            self.names[name] = 1\",", "+    \"+            print(\\\"New name: \\\" + name)\",", "+    \"+        else:\",", "+    \"+            self.names[name] += 1\",", "+    \"+\",", "+    \"+    def record_fingerprint(self, fingerprint):\",", "+    \"+        if fingerprint not in self.fingerprints:\",", "+    \"+            self.fingerprints[fingerprint] = 1\",", "+    \"+            print(\\\"New fingerprint: \\\" + fingerprint)\",", "+    \"+        else:\",", "+    \"+            self.fingerprints[fingerprint] += 1\",", "+    \"+\",", "+    \"+    def record_unsigned(self, unsigned):\",", "+    \"+        if unsigned not in self.unsigneds:\",", "+    \"+            self.unsigneds[unsigned] = 1\",", "+    \"+            print(\\\"New unsigned: \\\" + unsigned)\",", "+    \"+        else:\",", "+    \"+            self.unsigneds[unsigned] += 1\",", "+    \"+\",", "+    \"+    def record_user(self, user):\",", "+    \"+        name = user[\\\"name\\\"]\",", "+    \"+        email = user[\\\"email\\\"]\",", "+    \"+        id = user[\\\"id\\\"]\",", "+    \"+\",", "+    \"+        if name not in self.by_name:\",", "+    \"+            self.by_name[name] = {\\\"emails\\\": [], \\\"fingerprints\\\": []}\",", "+    \"+        if email not in self.by_email:\",", "+    \"+            self.by_email[email] = {\\\"names\\\": [], \\\"fingerprints\\\": []}\",", "+    \"+        if id not in self.by_id:\",", "+    \"+            self.by_id[id] = {\\\"fingerprints\\\": []}\",", "+    \"+\",", "+    \"+        if email not in self.by_name[name][\\\"emails\\\"]:\",", "+    \"+            self.by_name[name][\\\"emails\\\"].append(email)\",", "+    \"+\",", "+    \"+        if name not in self.by_email[email][\\\"names\\\"]:\",", "+    \"+            self.by_email[email][\\\"names\\\"].append(name)\",", "+    \"+\",", "+    \"+    def record_by(self, commit):\",", "+    \"+        self.record_user(commit[\\\"author\\\"])\",", "+    \"+        self.record_user(commit[\\\"committer\\\"])\",", "+    \"+        id = commit[\\\"committer\\\"][\\\"id\\\"]\",", "+    \"+        fingerprint = commit.get(\\\"fingerprint\\\", \\\"unsigned\\\")\",", "+    \"+        if fingerprint != \\\"unsigned\\\":\",", "+    \"+            if fingerprint not in self.by_fingerprint:\",", "+    \"+                self.by_fingerprint[fingerprint] = {\\\"ids\\\": []}\",", "+    \"+            if id not in self.by_fingerprint[fingerprint][\\\"ids\\\"]:\",", "+    \"+                self.by_fingerprint[fingerprint][\\\"ids\\\"].append(id)\",", "+    \"+                if fingerprint not in self.by_id[id][\\\"fingerprints\\\"]:\",", "+    \"+                    self.by_id[id][\\\"fingerprints\\\"].append(fingerprint)\",", "+    \"+\",", "+    \"+\",", "+    \"+global_state = GlobalState()\",", "+    \"+\",", "+    \"+\",", "+    \"+def output_to_directory(output_dir):\",", "+    \"+    assert output_dir is not None and output_dir != \\\"\\\"\",", "+    \"+    if not output_dir.endswith(\\\"/\\\"):\",", "+    \"+        output_dir = output_dir + \\\"/\\\"\",", "+    \"+    if (\",", "+    \"+        not output_dir.startswith(\\\"./\\\")\",", "+    \"+        and not output_dir.startswith(\\\"/\\\")\",", "+    \"+        and not output_dir.startswith(\\\"~/\\\")\",", "+    \"+    ):\",", "+    \"+        output_dir = \\\"./\\\" + output_dir\",", "+    \"+\",", "+    \"+    assert output_dir != \\\"/\\\"\",", "+    \"+    assert output_dir != \\\"./\\\"\",", "+    \"+    assert output_dir != \\\"~/\\\"\",", "+    \"+    assert output_dir != \\\".\\\"\",", "+    \"+\",", "+    \"+    assert os.path.isdir(output_dir) or not os.path.exists(output_dir)\",", "+    \"+\",", "+    \"+    rm(output_dir, missing_ok=True)\",", "+    \"+\",", "+    \"+    mkdir(\\\"./out/\\\", exist_ok=True)\",", "+    \"+\",", "+    \"+    with open(\\\"./out/summary.json\\\", \\\"w\\\") as f:\",", "+    \"+        f.write(pretty(global_state.summary) + \\\"\\\\n\\\")\",", "+    \"+\",", "+    \"+    for key, values in global_state.commits.items():\",", "+    \"+        folder = \\\"./out/\\\" + key\",", "+    \"+        mkdir(folder)\",", "+    \"+        with open(folder + \\\".txt\\\", \\\"w\\\") as links:\",", "+    \"+            for commit in values:\",", "+    \"+                sha = commit[\\\"sha\\\"]\",", "+    \"+                links.write(\",", "+    \"+                    \\\"https://github.com/cfengine/masterfiles/commit/\\\" + sha + \\\"\\\\n\\\"\",", "+    \"+                )\",", "+    \"+                filename = folder + \\\"/\\\" + sha + \\\".json\\\"\",", "+    \"+                with open(filename, \\\"w\\\") as f:\",", "+    \"+                    f.write(pretty(commit))\",", "+    \"+\",", "+    \"+\",", "+    \"+def parse_logs(output_dir=None, quiet=False, debug_parser=False):\",", "+    \"+    if debug_parser:\",", "+    \"+        rm(\\\"./debug/\\\")\",", "+    \"+        mkdir(\\\"./debug/\\\")\",", "+    \"+        for raw_commit, split_commit, pretty_commit in parse_to_all_representations(\",", "+    \"+            sys.stdin\",", "+    \"+        ):\",", "+    \"+            sha = pretty_commit[\\\"sha\\\"]\",", "+    \"+            with open(f\\\"./debug/{sha}.1.raw.txt\\\", \\\"w\\\") as f:\",", "+    \"+                f.write(\\\"\\\\n\\\".join(raw_commit))\",", "+    \"+            with open(f\\\"./debug/{sha}.2.raw.json\\\", \\\"w\\\") as f:\",", "+    \"+                f.write(pretty(raw_commit))\",", "+    \"+            with open(f\\\"./debug/{sha}.3.split.json\\\", \\\"w\\\") as f:\",", "+    \"+                f.write(pretty(split_commit))\",", "+    \"+            with open(f\\\"./debug/{sha}.4.pretty.json\\\", \\\"w\\\") as f:\",", "+    \"+                f.write(pretty(pretty_commit))\",", "+    \"+        return\",", "+    \"+\",", "+    \"+    for commit in parse(sys.stdin):\",", "+    \"+        global_state.record_by(commit)\",", "+    \"+        global_state.record_email(commit[\\\"author\\\"][\\\"email\\\"])\",", "+    \"+        if commit[\\\"author\\\"][\\\"email\\\"] != commit[\\\"committer\\\"][\\\"email\\\"]:\",", "+    \"+            global_state.record_email(commit[\\\"committer\\\"][\\\"email\\\"])\",", "+    \"+\",", "+    \"+        global_state.record_name(commit[\\\"author\\\"][\\\"name\\\"])\",", "+    \"+        if commit[\\\"author\\\"][\\\"name\\\"] != commit[\\\"committer\\\"][\\\"name\\\"]:\",", "+    \"+            global_state.record_name(commit[\\\"committer\\\"][\\\"name\\\"])\",", "+    \"+\",", "+    \"+        if \\\"fingerprint\\\" in commit:\",", "+    \"+            global_state.record_fingerprint(\",", "+    \"+                commit[\\\"committer\\\"][\\\"id\\\"] + \\\" \\\" + commit[\\\"fingerprint\\\"]\",", "+    \"+            )\",", "+    \"+        else:\",", "+    \"+            global_state.record_unsigned(commit[\\\"committer\\\"][\\\"id\\\"])\",", "+    \"+\",", "+    \"+        if \\\"diff\\\" not in commit:\",", "+    \"+            global_state.commits[\\\"empty\\\"].append(commit)\",", "+    \"+        elif \\\"fingerprint\\\" in commit and commit[\\\"fingerprint\\\"] in global_state.trusted:\",", "+    \"+            global_state.commits[\\\"signed-trusted\\\"].append(commit)\",", "+    \"+        elif (\",", "+    \"+            \\\"fingerprint\\\" in commit\",", "+    \"+            and commit[\\\"fingerprint\\\"] not in global_state.trusted\",", "+    \"+        ):\",", "+    \"+            global_state.commits[\\\"signed-untrusted\\\"].append(commit)\",", "+    \"+        else:\",", "+    \"+            global_state.commits[\\\"unsigned\\\"].append(commit)\",", "+    \"+\",", "+    \"+    global_state.by_email = {\",", "+    \"+        k: v\",", "+    \"+        for k, v in global_state.by_email.items()\",", "+    \"+        if len(v[\\\"names\\\"]) > 1 or len(v[\\\"fingerprints\\\"]) > 1\",", "+    \"+    }\",", "+    \"+    global_state.by_name = {\",", "+    \"+        k: v\",", "+    \"+        for k, v in global_state.by_name.items()\",", "+    \"+        if len(v[\\\"emails\\\"]) > 1 or len(v[\\\"fingerprints\\\"]) > 1\",", "+    \"+    }\",", "+    \"+    global_state.by_id = {\",", "+    \"+        k: v for k, v in global_state.by_id.items() if len(v[\\\"fingerprints\\\"]) > 1\",", "+    \"+    }\",", "+    \"+    global_state.by_fingerprint = {\",", "+    \"+        k: v for k, v in global_state.by_fingerprint.items() if len(v[\\\"ids\\\"]) > 1\",", "+    \"+    }\",", "+    \"+    global_state.summary = {\",", "+    \"+        \\\"emails\\\": global_state.emails,\",", "+    \"+        \\\"names\\\": global_state.names,\",", "+    \"+        \\\"fingerprints\\\": global_state.fingerprints,\",", "+    \"+        \\\"unsigneds\\\": global_state.unsigneds,\",", "+    \"+        \\\"commit_counts\\\": {\",", "+    \"+            \\\"empty\\\": len(global_state.commits[\\\"empty\\\"]),\",", "+    \"+            \\\"signed-trusted\\\": len(global_state.commits[\\\"signed-trusted\\\"]),\",", "+    \"+            \\\"signed-untrusted\\\": len(global_state.commits[\\\"signed-untrusted\\\"]),\",", "+    \"+            \\\"unsigned\\\": len(global_state.commits[\\\"unsigned\\\"]),\",", "+    \"+        },\",", "+    \"+        \\\"by_name\\\": global_state.by_name,\",", "+    \"+        \\\"by_email\\\": global_state.by_email,\",", "+    \"+        \\\"by_id\\\": global_state.by_id,\",", "+    \"+        \\\"by_fingerprint\\\": global_state.by_fingerprint,\",", "+    \"+    }\",", "+    \"+\",", "+    \"+    if not quiet:\",", "+    \"+        print(pretty(global_state.summary))\",", "+    \"+    if output_dir:\",", "+    \"+        output_to_directory(output_dir)\",", "+    \"+\",", "+    \"+\",", "+    \"+def get_args():\",", "+    \"+    parser = argparse.ArgumentParser(\",", "+    \"+        prog=\\\"git-log-raw-parser\\\",\",", "+    \"+        description=\\\"Parses the output of 'git log -p --format=raw --show-signature --stat'\\\",\",", "+    \"+    )\",", "+    \"+    parser.add_argument(\",", "+    \"+        \\\"-o\\\", \\\"--output-dir\\\", help=\\\"Output commits to a folder structure\\\"\",", "+    \"+    )\",", "+    \"+    parser.add_argument(\",", "+    \"+        \\\"-q\\\",\",", "+    \"+        \\\"--quiet\\\",\",", "+    \"+        default=False,\",", "+    \"+        action=\\\"store_true\\\",\",", "+    \"+        help=\\\"Stop printing JSON commits to standard out\\\",\",", "+    \"+    )\",", "+    \"+    parser.add_argument(\",", "+    \"+        \\\"-d\\\",\",", "+    \"+        \\\"--debug\\\",\",", "+    \"+        default=False,\",", "+    \"+        action=\\\"store_true\\\",\",", "+    \"+        help=\\\"Store debug information to ./debug/\\\",\",", "+    \"+    )\",", "+    \"+    args = parser.parse_args()\",", "+    \"+    return args\",", "+    \"+\",", "+    \"+\",", "+    \"+def main():\",", "+    \"+    args = get_args()\",", "+    \"+    parse_logs(output_dir=args.output_dir, quiet=args.quiet, debug_parser=args.debug)\",", "+    \"+\",", "+    \"+\",", "+    \"+if __name__ == \\\"__main__\\\":\",", "+    \"+    main()\",", "+    \"diff --git a/internal_parser.py b/internal_parser.py\",", "+    \"new file mode 100644\",", "+    \"index 0000000..179cf63\",", "+    \"--- /dev/null\",", "+    \"+++ b/internal_parser.py\",", "+    \"@@ -0,0 +1,264 @@\",", "+    \"+from cfbs.pretty import pretty\",", "+    \"+\",", "+    \"+\\\"\\\"\\\"\",", "+    \"+This file contains the internal / library functions for parsing the output\",", "+    \"+of 'git log -p --format=raw --show-signature --stat'\",", "+    \"+There is intentionally no main function / CLI here, only testable and importable\",", "+    \"+functions to perform the parsing. CLI, and additional tracking, summaries etc.\",", "+    \"+are implemented in git_log_raw_parser.py\",", "+    \"+\",", "+    \"+This is done in 4 steps:\",", "+    \"+1. Iterate over the input stream generating lines\",", "+    \"+2. Iterate over lines, find where the next commit starts, and generate \\\"raw commits\\\" (list of lines within one commit)\",", "+    \"+3. Iterate over raw commits, find where each section starts, and generate \\\"split commits\\\"\",", "+    \"+4. Iterate over the split commits, generating pretty commits.\",", "+    \"+\",", "+    \"+All of this is implemented using generators / iterators, so you can process and output results\",", "+    \"+while later commits are still being printed / processed.\",", "+    \"+\",", "+    \"+Performance-wise, the 4 step parsing outlined above is not ideal, but it helps a lot\",", "+    \"+in making the code simpler to write and read and less error prone.\",", "+    \"+In pracitce, performance is good enough, even for hundreds, or thousands commits.\",", "+    \"+\",", "+    \"+If you want to operate on the more raw data without much translations / prettifying,\",", "+    \"+you can skip step 4, or steps 3 and 4.\",", "+    \"+\",", "+    \"+Note: The output of the git log command we use varies based on gpg (which keys are imported).\",", "+    \"+      Don't expect the same output on different machines with different gpg states.\",", "+    \"+\",", "+    \"+Note: The parsing is lossy, we reconfigure the input stream to replace unicode\",", "+    \"+      errors (with question marks), so don't expect the diffs or commit messages to be\",", "+    \"+      100% correct for these cases.\",", "+    \"+\\\"\\\"\\\"\",", "+    \"+\",", "+    \"+import sys\",", "+    \"+from io import TextIOWrapper\",", "+    \"+\",", "+    \"+\",", "+    \"+def _reconfigure(input_stream):\",", "+    \"+    # input_stream / sys.stdin is defined as TextIO in typeshed even though it's actually TextIOWrapper by default\",", "+    \"+    # This decision was made because it's common to reassign stdin / stdout / stderr:\",", "+    \"+    # https://github.com/python/typeshed/issues/10093\",", "+    \"+    # For this parser we need to use reconfigure from TextIOWrapper, so we don't\",", "+    \"+    # encounter exceptions for commit messages / diffs with weird characters.\",", "+    \"+    # So we need to assume that sys.stdin is actually TextIOWrapper,\",", "+    \"+    # the assertion makes this assumption explicit and makes strict typecheckers like Pyright happy.\",", "+    \"+    assert isinstance(input_stream, TextIOWrapper)\",", "+    \"+    input_stream.reconfigure(errors=\\\"replace\\\")\",", "+    \"+\",", "+    \"+\",", "+    \"+# Utilities:\",", "+    \"+\",", "+    \"+\",", "+    \"+def remove_prefix(line, prefix):\",", "+    \"+    assert line.startswith(prefix)\",", "+    \"+    offset = len(prefix)\",", "+    \"+    assert offset > 0\",", "+    \"+    return line[offset:]\",", "+    \"+\",", "+    \"+\",", "+    \"+def remove_suffix(line, suffix):\",", "+    \"+    assert line.endswith(suffix)\",", "+    \"+    offset = len(suffix)\",", "+    \"+    assert offset > 0\",", "+    \"+    return line[0:-offset]\",", "+    \"+\",", "+    \"+\",", "+    \"+def parse_author(line):\",", "+    \"+    author = {}\",", "+    \"+    split = line.split(\\\" \\\")\",", "+    \"+    timezone = split[-1]\",", "+    \"+    timestamp = split[-2]\",", "+    \"+    suffix = \\\" \\\" + \\\" \\\".join(split[-2:])\",", "+    \"+    full = remove_suffix(line, suffix)\",", "+    \"+    author[\\\"id\\\"] = full\",", "+    \"+    assert full[-1] == \\\">\\\"\",", "+    \"+    full = full[0:-1]\",", "+    \"+    split = full.split(\\\"<\\\")\",", "+    \"+    assert len(split) == 2\",", "+    \"+    author[\\\"name\\\"] = split[0].strip()\",", "+    \"+    author[\\\"email\\\"] = split[1].strip()\",", "+    \"+    author[\\\"timestamp\\\"] = timestamp\",", "+    \"+    author[\\\"timezone\\\"] = timezone\",", "+    \"+    return author\",", "+    \"+\",", "+    \"+\",", "+    \"+def valid_signature(commit):\",", "+    \"+    for line in commit[\\\"gpg\\\"]:\",", "+    \"+        if line.startswith(\\\"Good signature from \\\"):\",", "+    \"+            return True\",", "+    \"+    return False\",", "+    \"+\",", "+    \"+\",", "+    \"+# The main parsing function to use in most cases:\",", "+    \"+\",", "+    \"+\",", "+    \"+def parse(input_stream=None, replace_errors=True):\",", "+    \"+    if input_stream is None:\",", "+    \"+        input_stream = sys.stdin\",", "+    \"+    if replace_errors:\",", "+    \"+        _reconfigure(input_stream)\",", "+    \"+    lines = input_stream_to_lines(input_stream)\",", "+    \"+    raw_commits = lines_to_raw_commits(lines)\",", "+    \"+    split_commits = raw_commits_to_split_commits(raw_commits)\",", "+    \"+    pretty_commits = split_commits_to_pretty_commits(split_commits)\",", "+    \"+    for pretty_commit in pretty_commits:\",", "+    \"+        # TODO: Do we want to do something more here?\",", "+    \"+        yield pretty_commit\",", "+    \"+\",", "+    \"+\",", "+    \"+# Another version of parse() which gives you all 3 representations of a commit\",", "+    \"+# Mostly useful for debugging\",", "+    \"+def parse_to_all_representations(input_stream=None, replace_errors=True):\",", "+    \"+    if input_stream is None:\",", "+    \"+        input_stream = sys.stdin\",", "+    \"+    if replace_errors:\",", "+    \"+        _reconfigure(input_stream)\",", "+    \"+    lines = input_stream_to_lines(input_stream)\",", "+    \"+    raw_commits = lines_to_raw_commits(lines)\",", "+    \"+    for raw_commit in raw_commits:\",", "+    \"+        # These function normally operate on iterators which yield many elements\",", "+    \"+        # (the entire git log), but we can call them on a n=1 tuple as well:\",", "+    \"+        split_commit = next(raw_commits_to_split_commits((raw_commit,)))\",", "+    \"+        pretty_commit = next(split_commits_to_pretty_commits((split_commit,)))\",", "+    \"+        yield (raw_commit, split_commit, pretty_commit)\",", "+    \"+\",", "+    \"+\",", "+    \"+# The individual steps / iterators:\",", "+    \"+\",", "+    \"+\",", "+    \"+def input_stream_to_lines(input_stream):\",", "+    \"+    for line in input_stream:\",", "+    \"+        yield line\",", "+    \"+\",", "+    \"+\",", "+    \"+def lines_to_raw_commits(line_iterator):\",", "+    \"+    current_commit = []\",", "+    \"+    for line in line_iterator:\",", "+    \"+        assert line[-1] == \\\"\\\\n\\\"\",", "+    \"+        line = line[0:-1]\",", "+    \"+        if line.startswith(\\\"commit \\\"):\",", "+    \"+            # New commit, finalize previous\",", "+    \"+            if current_commit:\",", "+    \"+                yield current_commit\",", "+    \"+                current_commit = []\",", "+    \"+        current_commit.append(line)\",", "+    \"+    if current_commit:\",", "+    \"+        yield current_commit\",", "+    \"+\",", "+    \"+\",", "+    \"+def raw_commits_to_split_commits(raw_commits):\",", "+    \"+    for raw in raw_commits:\",", "+    \"+        commit = {}\",", "+    \"+        first_line = raw[0]\",", "+    \"+        assert len(first_line) == len(\\\"commit 680e160eef58249b1b896512d50f6342ad325f01\\\")\",", "+    \"+        assert first_line.startswith(\\\"commit \\\")\",", "+    \"+        commit[\\\"sha\\\"] = remove_prefix(first_line, \\\"commit \\\")\",", "+    \"+        lines = (l for l in raw[1:])\",", "+    \"+        line = next(lines)\",", "+    \"+        while line and line.startswith(\\\"gpg: \\\"):\",", "+    \"+            line = remove_prefix(line, \\\"gpg: \\\")\",", "+    \"+            if \\\"gpg\\\" not in commit:\",", "+    \"+                commit[\\\"gpg\\\"] = []\",", "+    \"+            commit[\\\"gpg\\\"].append(line)\",", "+    \"+            line = next(lines)\",", "+    \"+\",", "+    \"+        if line and line.startswith(\\\"Primary key fingerprint: \\\"):\",", "+    \"+            commit[\\\"Primary key fingerprint\\\"] = remove_prefix(\",", "+    \"+                line, \\\"Primary key fingerprint: \\\"\",", "+    \"+            )\",", "+    \"+            line = next(lines)\",", "+    \"+\",", "+    \"+        if line and line.startswith(\\\"     Subkey fingerprint: \\\"):\",", "+    \"+            commit[\\\"Subkey fingerprint\\\"] = remove_prefix(\",", "+    \"+                line, \\\"     Subkey fingerprint: \\\"\",", "+    \"+            )\",", "+    \"+            line = next(lines)\",", "+    \"+\",", "+    \"+        print(pretty(raw))\",", "+    \"+        assert line and line.startswith(\\\"tree \\\")  # TODO: Always?\",", "+    \"+        if line and line.startswith(\\\"tree \\\"):\",", "+    \"+            commit[\\\"tree\\\"] = remove_prefix(line, \\\"tree \\\")\",", "+    \"+            line = next(lines)\",", "+    \"+\",", "+    \"+        while line and line.startswith(\\\"parent \\\"):\",", "+    \"+            if not \\\"parent\\\" in commit:\",", "+    \"+                commit[\\\"parent\\\"] = []\",", "+    \"+            commit[\\\"parent\\\"].append(remove_prefix(line, \\\"parent \\\"))\",", "+    \"+            line = next(lines)\",", "+    \"+        if \\\"parent\\\" in commit:\",", "+    \"+            assert 0 < len(commit[\\\"parent\\\"]) <= 2\",", "+    \"+\",", "+    \"+        assert line and line.startswith(\\\"author \\\")  # TODO: Always?\",", "+    \"+        if line and line.startswith(\\\"author \\\"):\",", "+    \"+            commit[\\\"author\\\"] = remove_prefix(line, \\\"author \\\")\",", "+    \"+            line = next(lines)\",", "+    \"+\",", "+    \"+        assert line and line.startswith(\\\"committer \\\")  # TODO: Always?\",", "+    \"+        if line and line.startswith(\\\"committer \\\"):\",", "+    \"+            commit[\\\"committer\\\"] = remove_prefix(line, \\\"committer \\\")\",", "+    \"+            line = next(lines)\",", "+    \"+\",", "+    \"+        if line and line.startswith(\\\"gpgsig \\\"):\",", "+    \"+            commit[\\\"gpgsig\\\"] = [remove_prefix(line, \\\"gpgsig \\\")]\",", "+    \"+            line = next(lines)\",", "+    \"+            while not line.startswith(\\\" -----END PGP SIGNATURE-----\\\"):\",", "+    \"+                assert \\\"BEGIN PGP SIGNATURE\\\" not in line\",", "+    \"+                commit[\\\"gpgsig\\\"].append(line)\",", "+    \"+                line = next(lines)\",", "+    \"+            assert line == \\\" -----END PGP SIGNATURE-----\\\"\",", "+    \"+            commit[\\\"gpgsig\\\"].append(line)\",", "+    \"+            line = next(lines)\",", "+    \"+        try:\",", "+    \"+            while line == \\\" \\\":\",", "+    \"+                line = next(lines)\",", "+    \"+            while line == \\\"\\\":\",", "+    \"+                line = next(lines)\",", "+    \"+            commit[\\\"message\\\"] = []\",", "+    \"+            while line and line != \\\"---\\\":\",", "+    \"+                commit[\\\"message\\\"].append(line)\",", "+    \"+                line = next(lines)\",", "+    \"+            if line and line == \\\"---\\\":\",", "+    \"+                commit[\\\"diff\\\"] = []\",", "+    \"+                line = next(lines)\",", "+    \"+                for line in lines:\",", "+    \"+                    commit[\\\"diff\\\"].append(line)\",", "+    \"+        except StopIteration:\",", "+    \"+            pass\",", "+    \"+        yield commit\",", "+    \"+\",", "+    \"+\",", "+    \"+def split_commits_to_pretty_commits(split_commits):\",", "+    \"+    for commit in split_commits:\",", "+    \"+        final = {}\",", "+    \"+        for key, value in commit.items():\",", "+    \"+            final[key] = value\",", "+    \"+        if \\\"gpgsig\\\" in final:\",", "+    \"+            assert final[\\\"gpgsig\\\"][0] == \\\"-----BEGIN PGP SIGNATURE-----\\\"\",", "+    \"+            signature = [\\\"-----BEGIN PGP SIGNATURE-----\\\"]\",", "+    \"+            for line in final[\\\"gpgsig\\\"][1:]:\",", "+    \"+                assert line.startswith(\\\" \\\")\",", "+    \"+                signature.append(line[1:])\",", "+    \"+            final[\\\"gpgsig\\\"] = \\\"\\\\n\\\".join(signature)\",", "+    \"+\",", "+    \"+        assert \\\"author\\\" in final\",", "+    \"+        final[\\\"author\\\"] = parse_author(final[\\\"author\\\"])\",", "+    \"+        assert \\\"committer\\\" in final\",", "+    \"+        final[\\\"committer\\\"] = parse_author(final[\\\"committer\\\"])\",", "+    \"+\",", "+    \"+        if \\\"Primary key fingerprint\\\" in final:\",", "+    \"+            del final[\\\"Primary key fingerprint\\\"]\",", "+    \"+\",", "+    \"+        if \\\"gpg\\\" in commit:\",", "+    \"+            assert commit[\\\"gpg\\\"][0].startswith(\\\"Signature made \\\")\",", "+    \"+            if not valid_signature(commit):\",", "+    \"+                print(\\\"Bad signature:\\\" + pretty(commit))\",", "+    \"+            final[\\\"fingerprint\\\"] = remove_prefix(\",", "+    \"+                commit[\\\"gpg\\\"][1], \\\"               using RSA key \\\"\",", "+    \"+            )\",", "+    \"+            if \\\"Primary key fingerprint\\\" in final:\",", "+    \"+                del final[\\\"Primary key fingerprint\\\"]\",", "+    \"+\",", "+    \"+        assert \\\"message\\\" in final\",", "+    \"+        final[\\\"message\\\"] = \\\"\\\\n\\\".join(x[4:] for x in final[\\\"message\\\"])\",", "+    \"+        yield final\",", "+    \"diff --git a/look_for_pulls.py b/look_for_pulls.py\",", "+    \"new file mode 100644\",", "+    \"index 0000000..9cc9e1f\",", "+    \"--- /dev/null\",", "+    \"+++ b/look_for_pulls.py\",", "+    \"@@ -0,0 +1,23 @@\",", "+    \"+import sys\",", "+    \"+import os\",", "+    \"+\",", "+    \"+import requests\",", "+    \"+\",", "+    \"+pat = os.getenv(\\\"GH_PAT\\\")\",", "+    \"+\",", "+    \"+for line in sys.stdin:\",", "+    \"+    headers = {\",", "+    \"+        \\\"Accept\\\": \\\"application/vnd.github+json\\\",\",", "+    \"+        \\\"Authorization\\\": f\\\"Bearer {pat}\\\",\",", "+    \"+        \\\"X-GitHub-Api-Version\\\": \\\"2022-11-28\\\",\",", "+    \"+    }\",", "+    \"+    line = line.replace(\\\"github.com\\\", \\\"api.github.com/repos\\\").replace(\\\"/commit/\\\", \\\"/commits/\\\").strip() + \\\"/pulls\\\"\",", "+    \"+    r = requests.get(line, headers=headers)\",", "+    \"+    if r.status_code != 200:\",", "+    \"+        print(\\\"Bad status code: \\\" + str(r.status_code) + \\\" \\\" + line)\",", "+    \"+    data = r.json()\",", "+    \"+    if len(data) == 0:\",", "+    \"+        print(\\\"Empty: \\\" + line)\",", "+    \"+        continue\",", "+    \"+    target = data[0][\\\"url\\\"]\",", "+    \"+    print(line + \\\" -> \\\" + target)\",", "+    \"diff --git a/requirements.txt b/requirements.txt\",", "+    \"new file mode 100644\",", "+    \"index 0000000..30b6f90\",", "+    \"--- /dev/null\",", "+    \"+++ b/requirements.txt\",", "+    \"@@ -0,0 +1,3 @@\",", "+    \"+cf-remote==0.6.4\",", "+    \"+cfbs==4.4.0\",", "+    \"+requests==2.31.0\"", "+  ],", "+  \"valid_signature\": true,", "+  \"fingerprint\": \"AFE8C5F43057C0093122299F584211AF6AB3EE12\"", "+}", "diff --git a/tests/first_commits.txt b/tests/first_commits.txt", "new file mode 100644", "index 0000000..feac65c", "--- /dev/null", "+++ b/tests/first_commits.txt", "@@ -0,0 +1,1074 @@", "+commit db6764a16702747306e851fe0744722c0d001a6f", "+gpg: Signature made Fri Apr 25 02:43:28 2025 CEST", "+gpg:                using RSA key AFE8C5F43057C0093122299F584211AF6AB3EE12", "+gpg:                issuer \"ole.elgesem@northern.tech\"", "+gpg: Good signature from \"Ole Herman Schumacher Elgesem <ole@cfengine.com>\" [ultimate]", "+gpg:                 aka \"Ole Herman Schumacher Elgesem <olehelg@ifi.uio.no>\" [ultimate]", "+gpg:                 aka \"Ole Herman Schumacher Elgesem <olehelg@student.matnat.uio.no>\" [ultimate]", "+gpg:                 aka \"Ole Herman Schumacher Elgesem <oleherman93@gmail.com>\" [ultimate]", "+gpg:                 aka \"Ole Herman Schumacher Elgesem <ole.elgesem@northern.tech>\" [ultimate]", "+gpg:                 aka \"Ole Herman Schumacher Elgesem <ole.elgesem@cfengine.com>\" [ultimate]", "+gpg:                 aka \"Ole Herman Schumacher Elgesem <ole@northern.tech>\" [ultimate]", "+gpg:                 aka \"Ole Herman Schumacher Elgesem <olehelg@ulrik.uio.no>\" [ultimate]", "+gpg:                 aka \"Ole Herman Schumacher Elgesem <olehelg@uio.no>\" [ultimate]", "+tree 593a58028375d27f2ffbd9c4a81a77ee68df791c", "+parent 61c6e6461f62464e870d921d33d853ac841c7420", "+author Ole Herman Schumacher Elgesem <ole.elgesem@northern.tech> 1745541807 +0200", "+committer Ole Herman Schumacher Elgesem <ole.elgesem@northern.tech> 1745541807 +0200", "+gpgsig -----BEGIN PGP SIGNATURE-----", "+ ", "+ iQJOBAABCAA4FiEEr+jF9DBXwAkxIimfWEIRr2qz7hIFAmgK2rAaHG9sZS5lbGdl", "+ c2VtQG5vcnRoZXJuLnRlY2gACgkQWEIRr2qz7hL/qw//fyrGzn30Cr2gGY/J9wxS", "+ TuH+jd5DP5gunk4neTIsChBud+XCBOYc6/qCygu71DemWvtheEarjOviBLFnsSWH", "+ NLtahhC1UCK5ETLHSTNWeJzq7WTCtInwItiaxOv8ojE7y12J1AU+969IdlGJtMv9", "+ dLP08idsZZ0eJHY3TM9yihFELRvIWOzeWz+el4mXjaML23QAUmXTlZ/tgXn4on63", "+ BmodNWkBkuQm5blTmuK3CZjyF4B7VTYDZM1RCBgypeC7I+ybQk4vpegOIR9Ac59Q", "+ gWkYMnpZC7TX3bHjVyLRUlJlGgoknVurLGqgwsRii9jEUW181plTpRj5tcBdP7YQ", "+ NyT9IyMGV3bBYwTCfc8ob48Uo5ZLa5WxUTJhL4XzxKWxE0LxNolOa9o8K4lDdMoJ", "+ OdH//Yu3e+JwRDLyCl7IyhAhj9BC4If/T448qd6BAcoWWe8SSqDfsDO9rJa+lo3Y", "+ yR9cab9OeotSIWpzuKr3ZJYDmY1lPxKlGQs29YOXs0EZ5idCqBZzslT9760syYcq", "+ DrQ4u+Fsshdax6Td0Tr/24hiyVN+5jeXJ3UpcC3/0XDoZPVcVTAgosmnkWovMivc", "+ vThXo5BS5nODNJLWAkkmJHAR7EIbD3nTFGAStSlXJZHuZ541Km2kR2Px2xeS3C3Z", "+ IqjznY4+oz+9d1eUMlafe0U=", "+ =m9QU", "+ -----END PGP SIGNATURE-----", "+", "+    Fixed logic", "+    ", "+    Signed-off-by: Ole Herman Schumacher Elgesem <ole.elgesem@northern.tech>", "+---", "+ git_log_raw_parser.py | 211 +++++++++++++++++++++++++++++---------------------", "+ internal_parser.py    |   8 +-", "+ 2 files changed, 124 insertions(+), 95 deletions(-)", "+", "+diff --git a/git_log_raw_parser.py b/git_log_raw_parser.py", "+index 1be31c7..e9332db 100644", "+--- a/git_log_raw_parser.py", "++++ b/git_log_raw_parser.py", "+@@ -1,6 +1,7 @@", "+ import os", "+ import sys", "+ import argparse", "++import json", "+ ", "+ from internal_parser import parse, parse_to_all_representations", "+ from cfbs.utils import find, mkdir, rm", "+@@ -35,6 +36,8 @@ class GlobalState:", "+         self.set_trusted_fingerprints()", "+ ", "+     def _get_trusted_fingerprints(self):", "++        if not os.path.isdir(\"trusted\"):", "++            return", "+         for file in find(\"trusted\", extension=\".fp\"):", "+             with open(file, \"r\") as f:", "+                 for line in f:", "+@@ -49,28 +52,28 @@ class GlobalState:", "+     def record_email(self, email):", "+         if email not in self.emails:", "+             self.emails[email] = 1", "+-            print(\"New email: \" + email)", "++            # print(\"New email: \" + email)", "+         else:", "+             self.emails[email] += 1", "+ ", "+     def record_name(self, name):", "+         if name not in self.names:", "+             self.names[name] = 1", "+-            print(\"New name: \" + name)", "++            # print(\"New name: \" + name)", "+         else:", "+             self.names[name] += 1", "+ ", "+     def record_fingerprint(self, fingerprint):", "+         if fingerprint not in self.fingerprints:", "+             self.fingerprints[fingerprint] = 1", "+-            print(\"New fingerprint: \" + fingerprint)", "++            # print(\"New fingerprint: \" + fingerprint)", "+         else:", "+             self.fingerprints[fingerprint] += 1", "+ ", "+     def record_unsigned(self, unsigned):", "+         if unsigned not in self.unsigneds:", "+             self.unsigneds[unsigned] = 1", "+-            print(\"New unsigned: \" + unsigned)", "++            # print(\"New unsigned: \" + unsigned)", "+         else:", "+             self.unsigneds[unsigned] += 1", "+ ", "+@@ -105,6 +108,65 @@ class GlobalState:", "+                 if fingerprint not in self.by_id[id][\"fingerprints\"]:", "+                     self.by_id[id][\"fingerprints\"].append(fingerprint)", "+ ", "++    def record_commit(self, commit):", "++        self.record_by(commit)", "++        self.record_email(commit[\"author\"][\"email\"])", "++", "++        if commit[\"author\"][\"email\"] != commit[\"committer\"][\"email\"]:", "++            self.record_email(commit[\"committer\"][\"email\"])", "++", "++        self.record_name(commit[\"author\"][\"name\"])", "++        if commit[\"author\"][\"name\"] != commit[\"committer\"][\"name\"]:", "++            self.record_name(commit[\"committer\"][\"name\"])", "++", "++        if \"fingerprint\" in commit:", "++            self.record_fingerprint(", "++                commit[\"committer\"][\"id\"] + \" \" + commit[\"fingerprint\"]", "++            )", "++        else:", "++            self.record_unsigned(commit[\"committer\"][\"id\"])", "++", "++        if \"diff\" not in commit:", "++            self.commits[\"empty\"].append(commit)", "++        elif \"fingerprint\" in commit and commit[\"fingerprint\"] in self.trusted:", "++            self.commits[\"signed-trusted\"].append(commit)", "++        elif \"fingerprint\" in commit and commit[\"fingerprint\"] not in self.trusted:", "++            self.commits[\"signed-untrusted\"].append(commit)", "++        else:", "++            self.commits[\"unsigned\"].append(commit)", "++", "++    def generate_summary(self):", "++        self.by_email = {", "++            k: v", "++            for k, v in self.by_email.items()", "++            if len(v[\"names\"]) > 1 or len(v[\"fingerprints\"]) > 1", "++        }", "++        self.by_name = {", "++            k: v", "++            for k, v in self.by_name.items()", "++            if len(v[\"emails\"]) > 1 or len(v[\"fingerprints\"]) > 1", "++        }", "++        self.by_id = {k: v for k, v in self.by_id.items() if len(v[\"fingerprints\"]) > 1}", "++        self.by_fingerprint = {", "++            k: v for k, v in self.by_fingerprint.items() if len(v[\"ids\"]) > 1", "++        }", "++        self.summary = {", "++            \"emails\": self.emails,", "++            \"names\": self.names,", "++            \"fingerprints\": self.fingerprints,", "++            \"unsigneds\": self.unsigneds,", "++            \"commit_counts\": {", "++                \"empty\": len(self.commits[\"empty\"]),", "++                \"signed-trusted\": len(self.commits[\"signed-trusted\"]),", "++                \"signed-untrusted\": len(self.commits[\"signed-untrusted\"]),", "++                \"unsigned\": len(self.commits[\"unsigned\"]),", "++            },", "++            \"by_name\": self.by_name,", "++            \"by_email\": self.by_email,", "++            \"by_id\": self.by_id,", "++            \"by_fingerprint\": self.by_fingerprint,", "++        }", "++", "+ ", "+ global_state = GlobalState()", "+ ", "+@@ -134,101 +196,54 @@ def output_to_directory(output_dir):", "+     with open(\"./out/summary.json\", \"w\") as f:", "+         f.write(pretty(global_state.summary) + \"\\n\")", "+ ", "+-    for key, values in global_state.commits.items():", "+-        folder = \"./out/\" + key", "+-        mkdir(folder)", "+-        with open(folder + \".txt\", \"w\") as links:", "+-            for commit in values:", "+-                sha = commit[\"sha\"]", "+-                links.write(", "+-                    \"https://github.com/cfengine/masterfiles/commit/\" + sha + \"\\n\"", "+-                )", "+-                filename = folder + \"/\" + sha + \".json\"", "+-                with open(filename, \"w\") as f:", "+-                    f.write(pretty(commit))", "+-", "+-", "+-def parse_logs(output_dir=None, quiet=False, debug_parser=False):", "++", "++def dump_commit(raw_commit, split_commit, pretty_commit):", "++    sha = pretty_commit[\"sha\"]", "++    with open(f\"./debug/{sha}.1.raw.txt\", \"w\") as f:", "++        f.write(\"\\n\".join(raw_commit))", "++    with open(f\"./debug/{sha}.2.raw.json\", \"w\") as f:", "++        f.write(pretty(raw_commit))", "++    with open(f\"./debug/{sha}.3.split.json\", \"w\") as f:", "++        f.write(pretty(split_commit))", "++    with open(f\"./debug/{sha}.4.pretty.json\", \"w\") as f:", "++        f.write(pretty(pretty_commit))", "++", "++", "++def parse_logs(", "++    output_dir=None, quiet=False, debug_parser=False, summary=False, pretty_print=False", "++):", "++    assert debug_parser or not quiet or output_dir or summary", "++    # If not, there is nothing to do", "++", "+     if debug_parser:", "+         rm(\"./debug/\")", "+         mkdir(\"./debug/\")", "+         for raw_commit, split_commit, pretty_commit in parse_to_all_representations(", "+             sys.stdin", "+         ):", "+-            sha = pretty_commit[\"sha\"]", "+-            with open(f\"./debug/{sha}.1.raw.txt\", \"w\") as f:", "+-                f.write(\"\\n\".join(raw_commit))", "+-            with open(f\"./debug/{sha}.2.raw.json\", \"w\") as f:", "+-                f.write(pretty(raw_commit))", "+-            with open(f\"./debug/{sha}.3.split.json\", \"w\") as f:", "+-                f.write(pretty(split_commit))", "+-            with open(f\"./debug/{sha}.4.pretty.json\", \"w\") as f:", "+-                f.write(pretty(pretty_commit))", "++            dump_commit(raw_commit, split_commit, pretty_commit)", "++            if not quiet:", "++                if pretty_print:", "++                    print(pretty(pretty_commit))", "++                else:", "++                    print(json.dumps(pretty_commit))", "+         return", "+ ", "+     for commit in parse(sys.stdin):", "+-        global_state.record_by(commit)", "+-        global_state.record_email(commit[\"author\"][\"email\"])", "+-        if commit[\"author\"][\"email\"] != commit[\"committer\"][\"email\"]:", "+-            global_state.record_email(commit[\"committer\"][\"email\"])", "++        if not summary and not quiet:", "++            if pretty_print:", "++                print(pretty(commit))", "++            else:", "++                print(json.dumps(commit))", "++        if summary or output_dir:", "++            global_state.record_commit(commit)", "++", "++    if not summary and not output_dir:", "++        return", "+ ", "+-        global_state.record_name(commit[\"author\"][\"name\"])", "+-        if commit[\"author\"][\"name\"] != commit[\"committer\"][\"name\"]:", "+-            global_state.record_name(commit[\"committer\"][\"name\"])", "++    global_state.generate_summary()", "+ ", "+-        if \"fingerprint\" in commit:", "+-            global_state.record_fingerprint(", "+-                commit[\"committer\"][\"id\"] + \" \" + commit[\"fingerprint\"]", "+-            )", "+-        else:", "+-            global_state.record_unsigned(commit[\"committer\"][\"id\"])", "+-", "+-        if \"diff\" not in commit:", "+-            global_state.commits[\"empty\"].append(commit)", "+-        elif \"fingerprint\" in commit and commit[\"fingerprint\"] in global_state.trusted:", "+-            global_state.commits[\"signed-trusted\"].append(commit)", "+-        elif (", "+-            \"fingerprint\" in commit", "+-            and commit[\"fingerprint\"] not in global_state.trusted", "+-        ):", "+-            global_state.commits[\"signed-untrusted\"].append(commit)", "+-        else:", "+-            global_state.commits[\"unsigned\"].append(commit)", "+-", "+-    global_state.by_email = {", "+-        k: v", "+-        for k, v in global_state.by_email.items()", "+-        if len(v[\"names\"]) > 1 or len(v[\"fingerprints\"]) > 1", "+-    }", "+-    global_state.by_name = {", "+-        k: v", "+-        for k, v in global_state.by_name.items()", "+-        if len(v[\"emails\"]) > 1 or len(v[\"fingerprints\"]) > 1", "+-    }", "+-    global_state.by_id = {", "+-        k: v for k, v in global_state.by_id.items() if len(v[\"fingerprints\"]) > 1", "+-    }", "+-    global_state.by_fingerprint = {", "+-        k: v for k, v in global_state.by_fingerprint.items() if len(v[\"ids\"]) > 1", "+-    }", "+-    global_state.summary = {", "+-        \"emails\": global_state.emails,", "+-        \"names\": global_state.names,", "+-        \"fingerprints\": global_state.fingerprints,", "+-        \"unsigneds\": global_state.unsigneds,", "+-        \"commit_counts\": {", "+-            \"empty\": len(global_state.commits[\"empty\"]),", "+-            \"signed-trusted\": len(global_state.commits[\"signed-trusted\"]),", "+-            \"signed-untrusted\": len(global_state.commits[\"signed-untrusted\"]),", "+-            \"unsigned\": len(global_state.commits[\"unsigned\"]),", "+-        },", "+-        \"by_name\": global_state.by_name,", "+-        \"by_email\": global_state.by_email,", "+-        \"by_id\": global_state.by_id,", "+-        \"by_fingerprint\": global_state.by_fingerprint,", "+-    }", "+-", "+-    if not quiet:", "++    if summary:", "+         print(pretty(global_state.summary))", "+     if output_dir:", "+         output_to_directory(output_dir)", "+@@ -256,13 +271,31 @@ def get_args():", "+         action=\"store_true\",", "+         help=\"Store debug information to ./debug/\",", "+     )", "++    parser.add_argument(", "++        \"--summary\",", "++        default=False,", "++        action=\"store_true\",", "++        help=\"Print summary of commits\",", "++    )", "++    parser.add_argument(", "++        \"--pretty\",", "++        default=False,", "++        action=\"store_true\",", "++        help=\"Print commit JSONs on multiple lines, with indentation\",", "++    )", "+     args = parser.parse_args()", "+     return args", "+ ", "+ ", "+ def main():", "+     args = get_args()", "+-    parse_logs(output_dir=args.output_dir, quiet=args.quiet, debug_parser=args.debug)", "++    parse_logs(", "++        output_dir=args.output_dir,", "++        quiet=args.quiet,", "++        debug_parser=args.debug,", "++        summary=args.summary,", "++        pretty_print=args.pretty,", "++    )", "+ ", "+ ", "+ if __name__ == \"__main__\":", "+diff --git a/internal_parser.py b/internal_parser.py", "+index 179cf63..2430379 100644", "+--- a/internal_parser.py", "++++ b/internal_parser.py", "+@@ -1,5 +1,3 @@", "+-from cfbs.pretty import pretty", "+-", "+ \"\"\"", "+ This file contains the internal / library functions for parsing the output", "+ of 'git log -p --format=raw --show-signature --stat'", "+@@ -175,7 +173,6 @@ def raw_commits_to_split_commits(raw_commits):", "+             )", "+             line = next(lines)", "+ ", "+-        print(pretty(raw))", "+         assert line and line.startswith(\"tree \")  # TODO: Always?", "+         if line and line.startswith(\"tree \"):", "+             commit[\"tree\"] = remove_prefix(line, \"tree \")", "+@@ -186,8 +183,6 @@ def raw_commits_to_split_commits(raw_commits):", "+                 commit[\"parent\"] = []", "+             commit[\"parent\"].append(remove_prefix(line, \"parent \"))", "+             line = next(lines)", "+-        if \"parent\" in commit:", "+-            assert 0 < len(commit[\"parent\"]) <= 2", "+ ", "+         assert line and line.startswith(\"author \")  # TODO: Always?", "+         if line and line.startswith(\"author \"):", "+@@ -251,8 +246,9 @@ def split_commits_to_pretty_commits(split_commits):", "+ ", "+         if \"gpg\" in commit:", "+             assert commit[\"gpg\"][0].startswith(\"Signature made \")", "++            commit[\"valid_signature\"] = True", "+             if not valid_signature(commit):", "+-                print(\"Bad signature:\" + pretty(commit))", "++                commit[\"valid_signature\"] = False", "+             final[\"fingerprint\"] = remove_prefix(", "+                 commit[\"gpg\"][1], \"               using RSA key \"", "+             )", "+", "+commit 61c6e6461f62464e870d921d33d853ac841c7420", "+gpg: Signature made Fri Apr 25 00:55:24 2025 CEST", "+gpg:                using RSA key AFE8C5F43057C0093122299F584211AF6AB3EE12", "+gpg:                issuer \"ole.elgesem@northern.tech\"", "+gpg: Good signature from \"Ole Herman Schumacher Elgesem <ole@cfengine.com>\" [ultimate]", "+gpg:                 aka \"Ole Herman Schumacher Elgesem <olehelg@ifi.uio.no>\" [ultimate]", "+gpg:                 aka \"Ole Herman Schumacher Elgesem <olehelg@student.matnat.uio.no>\" [ultimate]", "+gpg:                 aka \"Ole Herman Schumacher Elgesem <oleherman93@gmail.com>\" [ultimate]", "+gpg:                 aka \"Ole Herman Schumacher Elgesem <ole.elgesem@northern.tech>\" [ultimate]", "+gpg:                 aka \"Ole Herman Schumacher Elgesem <ole.elgesem@cfengine.com>\" [ultimate]", "+gpg:                 aka \"Ole Herman Schumacher Elgesem <ole@northern.tech>\" [ultimate]", "+gpg:                 aka \"Ole Herman Schumacher Elgesem <olehelg@ulrik.uio.no>\" [ultimate]", "+gpg:                 aka \"Ole Herman Schumacher Elgesem <olehelg@uio.no>\" [ultimate]", "+tree ece6177eb4489042bee34fcafc16a123f57cbc7b", "+author Ole Herman Schumacher Elgesem <ole.elgesem@northern.tech> 1744918684 +0200", "+committer Ole Herman Schumacher Elgesem <ole.elgesem@northern.tech> 1745535319 +0200", "+gpgsig -----BEGIN PGP SIGNATURE-----", "+ ", "+ iQJOBAABCAA4FiEEr+jF9DBXwAkxIimfWEIRr2qz7hIFAmgKwVwaHG9sZS5lbGdl", "+ c2VtQG5vcnRoZXJuLnRlY2gACgkQWEIRr2qz7hIMABAAqZT9E1seWQ1Vr5RasscE", "+ sVb7pkQrnlH0aF4dudGxFF8GBNLRCJsUwf7r6mIjcIdKFM2DqPDIg2dor3OC2hOX", "+ vFZxC87iRyX+8sYIhk7F2HNkVK8tTOwUNYm3STKF+7dYYJx5Au0I52aeaVmOnavU", "+ Yyx+SKNwwDsNVrTYWM2U9RyKo1PobnWwVGPbXGamA74hAg4sSPAOEGSJgfqNNRBd", "+ FtEGFbt6xB1joL5WFE0ChqNgd/HBt5O//k8L9bJ0k5WwfHLZGJLQofyuI4rzkgce", "+ Hg6+cLFX420XWsfNoVTnTiwt7Ga1uLJP6oNBeC62QcOdnh69Cq8abOrbesiG94P1", "+ wby88VBShcZbWMaYqtX5pWUmhltKG97QmU2bRCe21LLCtnq/wvdx8HmKu462xAnu", "+ D5gTNHslab8joEG9CwVtUHFDX/jVNVReJduxTov2tV+QRodiFV2nf9tvHLmB1aXU", "+ Ke6ism4jKY+LGtp0PHr5qrPcnf+49SKF707Eh4plVlY8F2N75RxpivoQZ1CnPSAe", "+ WavgiMi/mRP0y0WjlRp88C+m5cUjJe+brXQ+8Xx7FC9q1vwR1yN4UWpNcoy82z8w", "+ cGA1Rbt4rAsY2IiAEsCx7TL6GSBXQ/2/M3dS1tO4C6f+R0XuXs/tY9tNCY3oph2a", "+ prbPnQ0FD1M1woG7oqCvoDo=", "+ =TNNi", "+ -----END PGP SIGNATURE-----", "+", "+    Initial commit, working version", "+    ", "+    Signed-off-by: Ole Herman Schumacher Elgesem <ole.elgesem@northern.tech>", "+---", "+ .gitignore            |   6 ++", "+ README.md             |  53 ++++++++++", "+ git_log_raw_parser.py | 269 ++++++++++++++++++++++++++++++++++++++++++++++++++", "+ internal_parser.py    | 264 +++++++++++++++++++++++++++++++++++++++++++++++++", "+ look_for_pulls.py     |  23 +++++", "+ requirements.txt      |   3 +", "+ 6 files changed, 618 insertions(+)", "+", "+diff --git a/.gitignore b/.gitignore", "+new file mode 100644", "+index 0000000..4316b8d", "+--- /dev/null", "++++ b/.gitignore", "+@@ -0,0 +1,6 @@", "++/core/", "++/masterfiles/", "++/out/", "++__pycache__/", "++/debug/", "++/trusted/", "+diff --git a/README.md b/README.md", "+new file mode 100644", "+index 0000000..534755a", "+--- /dev/null", "++++ b/README.md", "+@@ -0,0 +1,53 @@", "++# git-log-raw-parser", "++", "++A parser for parsing the command:", "++", "++```", "++git log -p --format=raw --show-signature --stat", "++```", "++", "++## Why?", "++", "++The above command provides a lot of useful information about git commits, which we can analyze, including:", "++", "++- Commit message", "++- Diffs", "++- Author name and email", "++- Committer name and email", "++- Timestamps", "++- GPG signature", "++", "++On its own, git log does not output its information in a format which is easy for other programs to use.", "++So, this tool parses the output and turns it into JSON which is more easy to analyze and check.", "++", "++## Usage", "++", "++Using it is simple, just run the `git log` command and pipe it to the standard input of `git_log_raw_parser`", "++", "++```", "++git log -p --format=raw --show-signature --stat | python3 git_log_raw_parser.py --output-dir=./out/", "++```", "++", "++Or perhaps a bit more realistic:", "++", "++```", "++git clone https://github.com/cfengine/core", "++(cd core && git log -p --format=raw --show-signature --stat HEAD~500..HEAD 2>/dev/null) | python3 git_log_raw_parser.py", "++```", "++", "++(Clone CFEngine core, start subshell which enters the subdirectory and runs git log for the past 500 commits).", "++", "++## Improtant notes", "++", "++**Warning:** The output of `--show-signature` varies depending on which keys you have imported / trusted in your installation of GPG.", "++Make sure you import the correct GPG keys beforehand, and don't expect output to be identical across different machines with different GPG states.", "++", "++**Warning:** Consider this a best-effort, \"lossy\" parsing.", "++Commits may contain non utf-8 characters, to avoid \"crashing\", we skip these, replacing them with question marks.", "++Thus, the parsing is lossy, don't expect all the information to be there.", "++This tool can be used for searching / analyzing commits, but don't use it as some kind of backup tool where you expect to have the ability to \"reconstruct\" the commits and repo entirely.", "++", "++## Details", "++", "++For details on how the parsing works, try running with `--debug` and look at the resulting `./debug/` folder.", "++Also, see the comments in the source code; [./git_log_raw_parser.py](./git_log_raw_parser.py)", "+diff --git a/git_log_raw_parser.py b/git_log_raw_parser.py", "+new file mode 100644", "+index 0000000..1be31c7", "+--- /dev/null", "++++ b/git_log_raw_parser.py", "+@@ -0,0 +1,269 @@", "++import os", "++import sys", "++import argparse", "++", "++from internal_parser import parse, parse_to_all_representations", "++from cfbs.utils import find, mkdir, rm", "++from cfbs.pretty import pretty", "++", "++# Usage:", "++# git log -p --format=raw --show-signature --stat | python3 git_log_raw_parser.py", "++", "++", "++class GlobalState:", "++    def __init__(self):", "++        self.quiet = False", "++        self.emails = {}", "++        self.names = {}", "++        self.fingerprints = {}", "++        self.unsigneds = {}", "++", "++        self.commits = {", "++            \"empty\": [],", "++            \"unsigned\": [],", "++            \"signed-trusted\": [],", "++            \"signed-untrusted\": [],", "++        }", "++", "++        self.by_name = {}", "++        self.by_email = {}", "++        self.by_fingerprint = {}", "++        self.by_id = {}", "++        self.summary = {}", "++        self.trusted = None", "++", "++        self.set_trusted_fingerprints()", "++", "++    def _get_trusted_fingerprints(self):", "++        for file in find(\"trusted\", extension=\".fp\"):", "++            with open(file, \"r\") as f:", "++                for line in f:", "++                    line = line.strip()", "++                    line = line.replace(\" \", \"\")", "++                    if line:", "++                        yield line", "++", "++    def set_trusted_fingerprints(self):", "++        self.trusted = list(self._get_trusted_fingerprints())", "++", "++    def record_email(self, email):", "++        if email not in self.emails:", "++            self.emails[email] = 1", "++            print(\"New email: \" + email)", "++        else:", "++            self.emails[email] += 1", "++", "++    def record_name(self, name):", "++        if name not in self.names:", "++            self.names[name] = 1", "++            print(\"New name: \" + name)", "++        else:", "++            self.names[name] += 1", "++", "++    def record_fingerprint(self, fingerprint):", "++        if fingerprint not in self.fingerprints:", "++            self.fingerprints[fingerprint] = 1", "++            print(\"New fingerprint: \" + fingerprint)", "++        else:", "++            self.fingerprints[fingerprint] += 1", "++", "++    def record_unsigned(self, unsigned):", "++        if unsigned not in self.unsigneds:", "++            self.unsigneds[unsigned] = 1", "++            print(\"New unsigned: \" + unsigned)", "++        else:", "++            self.unsigneds[unsigned] += 1", "++", "++    def record_user(self, user):", "++        name = user[\"name\"]", "++        email = user[\"email\"]", "++        id = user[\"id\"]", "++", "++        if name not in self.by_name:", "++            self.by_name[name] = {\"emails\": [], \"fingerprints\": []}", "++        if email not in self.by_email:", "++            self.by_email[email] = {\"names\": [], \"fingerprints\": []}", "++        if id not in self.by_id:", "++            self.by_id[id] = {\"fingerprints\": []}", "++", "++        if email not in self.by_name[name][\"emails\"]:", "++            self.by_name[name][\"emails\"].append(email)", "++", "++        if name not in self.by_email[email][\"names\"]:", "++            self.by_email[email][\"names\"].append(name)", "++", "++    def record_by(self, commit):", "++        self.record_user(commit[\"author\"])", "++        self.record_user(commit[\"committer\"])", "++        id = commit[\"committer\"][\"id\"]", "++        fingerprint = commit.get(\"fingerprint\", \"unsigned\")", "++        if fingerprint != \"unsigned\":", "++            if fingerprint not in self.by_fingerprint:", "++                self.by_fingerprint[fingerprint] = {\"ids\": []}", "++            if id not in self.by_fingerprint[fingerprint][\"ids\"]:", "++                self.by_fingerprint[fingerprint][\"ids\"].append(id)", "++                if fingerprint not in self.by_id[id][\"fingerprints\"]:", "++                    self.by_id[id][\"fingerprints\"].append(fingerprint)", "++", "++", "++global_state = GlobalState()", "++", "++", "++def output_to_directory(output_dir):", "++    assert output_dir is not None and output_dir != \"\"", "++    if not output_dir.endswith(\"/\"):", "++        output_dir = output_dir + \"/\"", "++    if (", "++        not output_dir.startswith(\"./\")", "++        and not output_dir.startswith(\"/\")", "++        and not output_dir.startswith(\"~/\")", "++    ):", "++        output_dir = \"./\" + output_dir", "++", "++    assert output_dir != \"/\"", "++    assert output_dir != \"./\"", "++    assert output_dir != \"~/\"", "++    assert output_dir != \".\"", "++", "++    assert os.path.isdir(output_dir) or not os.path.exists(output_dir)", "++", "++    rm(output_dir, missing_ok=True)", "++", "++    mkdir(\"./out/\", exist_ok=True)", "++", "++    with open(\"./out/summary.json\", \"w\") as f:", "++        f.write(pretty(global_state.summary) + \"\\n\")", "++", "++    for key, values in global_state.commits.items():", "++        folder = \"./out/\" + key", "++        mkdir(folder)", "++        with open(folder + \".txt\", \"w\") as links:", "++            for commit in values:", "++                sha = commit[\"sha\"]", "++                links.write(", "++                    \"https://github.com/cfengine/masterfiles/commit/\" + sha + \"\\n\"", "++                )", "++                filename = folder + \"/\" + sha + \".json\"", "++                with open(filename, \"w\") as f:", "++                    f.write(pretty(commit))", "++", "++", "++def parse_logs(output_dir=None, quiet=False, debug_parser=False):", "++    if debug_parser:", "++        rm(\"./debug/\")", "++        mkdir(\"./debug/\")", "++        for raw_commit, split_commit, pretty_commit in parse_to_all_representations(", "++            sys.stdin", "++        ):", "++            sha = pretty_commit[\"sha\"]", "++            with open(f\"./debug/{sha}.1.raw.txt\", \"w\") as f:", "++                f.write(\"\\n\".join(raw_commit))", "++            with open(f\"./debug/{sha}.2.raw.json\", \"w\") as f:", "++                f.write(pretty(raw_commit))", "++            with open(f\"./debug/{sha}.3.split.json\", \"w\") as f:", "++                f.write(pretty(split_commit))", "++            with open(f\"./debug/{sha}.4.pretty.json\", \"w\") as f:", "++                f.write(pretty(pretty_commit))", "++        return", "++", "++    for commit in parse(sys.stdin):", "++        global_state.record_by(commit)", "++        global_state.record_email(commit[\"author\"][\"email\"])", "++        if commit[\"author\"][\"email\"] != commit[\"committer\"][\"email\"]:", "++            global_state.record_email(commit[\"committer\"][\"email\"])", "++", "++        global_state.record_name(commit[\"author\"][\"name\"])", "++        if commit[\"author\"][\"name\"] != commit[\"committer\"][\"name\"]:", "++            global_state.record_name(commit[\"committer\"][\"name\"])", "++", "++        if \"fingerprint\" in commit:", "++            global_state.record_fingerprint(", "++                commit[\"committer\"][\"id\"] + \" \" + commit[\"fingerprint\"]", "++            )", "++        else:", "++            global_state.record_unsigned(commit[\"committer\"][\"id\"])", "++", "++        if \"diff\" not in commit:", "++            global_state.commits[\"empty\"].append(commit)", "++        elif \"fingerprint\" in commit and commit[\"fingerprint\"] in global_state.trusted:", "++            global_state.commits[\"signed-trusted\"].append(commit)", "++        elif (", "++            \"fingerprint\" in commit", "++            and commit[\"fingerprint\"] not in global_state.trusted", "++        ):", "++            global_state.commits[\"signed-untrusted\"].append(commit)", "++        else:", "++            global_state.commits[\"unsigned\"].append(commit)", "++", "++    global_state.by_email = {", "++        k: v", "++        for k, v in global_state.by_email.items()", "++        if len(v[\"names\"]) > 1 or len(v[\"fingerprints\"]) > 1", "++    }", "++    global_state.by_name = {", "++        k: v", "++        for k, v in global_state.by_name.items()", "++        if len(v[\"emails\"]) > 1 or len(v[\"fingerprints\"]) > 1", "++    }", "++    global_state.by_id = {", "++        k: v for k, v in global_state.by_id.items() if len(v[\"fingerprints\"]) > 1", "++    }", "++    global_state.by_fingerprint = {", "++        k: v for k, v in global_state.by_fingerprint.items() if len(v[\"ids\"]) > 1", "++    }", "++    global_state.summary = {", "++        \"emails\": global_state.emails,", "++        \"names\": global_state.names,", "++        \"fingerprints\": global_state.fingerprints,", "++        \"unsigneds\": global_state.unsigneds,", "++        \"commit_counts\": {", "++            \"empty\": len(global_state.commits[\"empty\"]),", "++            \"signed-trusted\": len(global_state.commits[\"signed-trusted\"]),", "++            \"signed-untrusted\": len(global_state.commits[\"signed-untrusted\"]),", "++            \"unsigned\": len(global_state.commits[\"unsigned\"]),", "++        },", "++        \"by_name\": global_state.by_name,", "++        \"by_email\": global_state.by_email,", "++        \"by_id\": global_state.by_id,", "++        \"by_fingerprint\": global_state.by_fingerprint,", "++    }", "++", "++    if not quiet:", "++        print(pretty(global_state.summary))", "++    if output_dir:", "++        output_to_directory(output_dir)", "++", "++", "++def get_args():", "++    parser = argparse.ArgumentParser(", "++        prog=\"git-log-raw-parser\",", "++        description=\"Parses the output of 'git log -p --format=raw --show-signature --stat'\",", "++    )", "++    parser.add_argument(", "++        \"-o\", \"--output-dir\", help=\"Output commits to a folder structure\"", "++    )", "++    parser.add_argument(", "++        \"-q\",", "++        \"--quiet\",", "++        default=False,", "++        action=\"store_true\",", "++        help=\"Stop printing JSON commits to standard out\",", "++    )", "++    parser.add_argument(", "++        \"-d\",", "++        \"--debug\",", "++        default=False,", "++        action=\"store_true\",", "++        help=\"Store debug information to ./debug/\",", "++    )", "++    args = parser.parse_args()", "++    return args", "++", "++", "++def main():", "++    args = get_args()", "++    parse_logs(output_dir=args.output_dir, quiet=args.quiet, debug_parser=args.debug)", "++", "++", "++if __name__ == \"__main__\":", "++    main()", "+diff --git a/internal_parser.py b/internal_parser.py", "+new file mode 100644", "+index 0000000..179cf63", "+--- /dev/null", "++++ b/internal_parser.py", "+@@ -0,0 +1,264 @@", "++from cfbs.pretty import pretty", "++", "++\"\"\"", "++This file contains the internal / library functions for parsing the output", "++of 'git log -p --format=raw --show-signature --stat'", "++There is intentionally no main function / CLI here, only testable and importable", "++functions to perform the parsing. CLI, and additional tracking, summaries etc.", "++are implemented in git_log_raw_parser.py", "++", "++This is done in 4 steps:", "++1. Iterate over the input stream generating lines", "++2. Iterate over lines, find where the next commit starts, and generate \"raw commits\" (list of lines within one commit)", "++3. Iterate over raw commits, find where each section starts, and generate \"split commits\"", "++4. Iterate over the split commits, generating pretty commits.", "++", "++All of this is implemented using generators / iterators, so you can process and output results", "++while later commits are still being printed / processed.", "++", "++Performance-wise, the 4 step parsing outlined above is not ideal, but it helps a lot", "++in making the code simpler to write and read and less error prone.", "++In pracitce, performance is good enough, even for hundreds, or thousands commits.", "++", "++If you want to operate on the more raw data without much translations / prettifying,", "++you can skip step 4, or steps 3 and 4.", "++", "++Note: The output of the git log command we use varies based on gpg (which keys are imported).", "++      Don't expect the same output on different machines with different gpg states.", "++", "++Note: The parsing is lossy, we reconfigure the input stream to replace unicode", "++      errors (with question marks), so don't expect the diffs or commit messages to be", "++      100% correct for these cases.", "++\"\"\"", "++", "++import sys", "++from io import TextIOWrapper", "++", "++", "++def _reconfigure(input_stream):", "++    # input_stream / sys.stdin is defined as TextIO in typeshed even though it's actually TextIOWrapper by default", "++    # This decision was made because it's common to reassign stdin / stdout / stderr:", "++    # https://github.com/python/typeshed/issues/10093", "++    # For this parser we need to use reconfigure from TextIOWrapper, so we don't", "++    # encounter exceptions for commit messages / diffs with weird characters.", "++    # So we need to assume that sys.stdin is actually TextIOWrapper,", "++    # the assertion makes this assumption explicit and makes strict typecheckers like Pyright happy.", "++    assert isinstance(input_stream, TextIOWrapper)", "++    input_stream.reconfigure(errors=\"replace\")", "++", "++", "++# Utilities:", "++", "++", "++def remove_prefix(line, prefix):", "++    assert line.startswith(prefix)", "++    offset = len(prefix)", "++    assert offset > 0", "++    return line[offset:]", "++", "++", "++def remove_suffix(line, suffix):", "++    assert line.endswith(suffix)", "++    offset = len(suffix)", "++    assert offset > 0", "++    return line[0:-offset]", "++", "++", "++def parse_author(line):", "++    author = {}", "++    split = line.split(\" \")", "++    timezone = split[-1]", "++    timestamp = split[-2]", "++    suffix = \" \" + \" \".join(split[-2:])", "++    full = remove_suffix(line, suffix)", "++    author[\"id\"] = full", "++    assert full[-1] == \">\"", "++    full = full[0:-1]", "++    split = full.split(\"<\")", "++    assert len(split) == 2", "++    author[\"name\"] = split[0].strip()", "++    author[\"email\"] = split[1].strip()", "++    author[\"timestamp\"] = timestamp", "++    author[\"timezone\"] = timezone", "++    return author", "++", "++", "++def valid_signature(commit):", "++    for line in commit[\"gpg\"]:", "++        if line.startswith(\"Good signature from \"):", "++            return True", "++    return False", "++", "++", "++# The main parsing function to use in most cases:", "++", "++", "++def parse(input_stream=None, replace_errors=True):", "++    if input_stream is None:", "++        input_stream = sys.stdin", "++    if replace_errors:", "++        _reconfigure(input_stream)", "++    lines = input_stream_to_lines(input_stream)", "++    raw_commits = lines_to_raw_commits(lines)", "++    split_commits = raw_commits_to_split_commits(raw_commits)", "++    pretty_commits = split_commits_to_pretty_commits(split_commits)", "++    for pretty_commit in pretty_commits:", "++        # TODO: Do we want to do something more here?", "++        yield pretty_commit", "++", "++", "++# Another version of parse() which gives you all 3 representations of a commit", "++# Mostly useful for debugging", "++def parse_to_all_representations(input_stream=None, replace_errors=True):", "++    if input_stream is None:", "++        input_stream = sys.stdin", "++    if replace_errors:", "++        _reconfigure(input_stream)", "++    lines = input_stream_to_lines(input_stream)", "++    raw_commits = lines_to_raw_commits(lines)", "++    for raw_commit in raw_commits:", "++        # These function normally operate on iterators which yield many elements", "++        # (the entire git log), but we can call them on a n=1 tuple as well:", "++        split_commit = next(raw_commits_to_split_commits((raw_commit,)))", "++        pretty_commit = next(split_commits_to_pretty_commits((split_commit,)))", "++        yield (raw_commit, split_commit, pretty_commit)", "++", "++", "++# The individual steps / iterators:", "++", "++", "++def input_stream_to_lines(input_stream):", "++    for line in input_stream:", "++        yield line", "++", "++", "++def lines_to_raw_commits(line_iterator):", "++    current_commit = []", "++    for line in line_iterator:", "++        assert line[-1] == \"\\n\"", "++        line = line[0:-1]", "++        if line.startswith(\"commit \"):", "++            # New commit, finalize previous", "++            if current_commit:", "++                yield current_commit", "++                current_commit = []", "++        current_commit.append(line)", "++    if current_commit:", "++        yield current_commit", "++", "++", "++def raw_commits_to_split_commits(raw_commits):", "++    for raw in raw_commits:", "++        commit = {}", "++        first_line = raw[0]", "++        assert len(first_line) == len(\"commit 680e160eef58249b1b896512d50f6342ad325f01\")", "++        assert first_line.startswith(\"commit \")", "++        commit[\"sha\"] = remove_prefix(first_line, \"commit \")", "++        lines = (l for l in raw[1:])", "++        line = next(lines)", "++        while line and line.startswith(\"gpg: \"):", "++            line = remove_prefix(line, \"gpg: \")", "++            if \"gpg\" not in commit:", "++                commit[\"gpg\"] = []", "++            commit[\"gpg\"].append(line)", "++            line = next(lines)", "++", "++        if line and line.startswith(\"Primary key fingerprint: \"):", "++            commit[\"Primary key fingerprint\"] = remove_prefix(", "++                line, \"Primary key fingerprint: \"", "++            )", "++            line = next(lines)", "++", "++        if line and line.startswith(\"     Subkey fingerprint: \"):", "++            commit[\"Subkey fingerprint\"] = remove_prefix(", "++                line, \"     Subkey fingerprint: \"", "++            )", "++            line = next(lines)", "++", "++        print(pretty(raw))", "++        assert line and line.startswith(\"tree \")  # TODO: Always?", "++        if line and line.startswith(\"tree \"):", "++            commit[\"tree\"] = remove_prefix(line, \"tree \")", "++            line = next(lines)", "++", "++        while line and line.startswith(\"parent \"):", "++            if not \"parent\" in commit:", "++                commit[\"parent\"] = []", "++            commit[\"parent\"].append(remove_prefix(line, \"parent \"))", "++            line = next(lines)", "++        if \"parent\" in commit:", "++            assert 0 < len(commit[\"parent\"]) <= 2", "++", "++        assert line and line.startswith(\"author \")  # TODO: Always?", "++        if line and line.startswith(\"author \"):", "++            commit[\"author\"] = remove_prefix(line, \"author \")", "++            line = next(lines)", "++", "++        assert line and line.startswith(\"committer \")  # TODO: Always?", "++        if line and line.startswith(\"committer \"):", "++            commit[\"committer\"] = remove_prefix(line, \"committer \")", "++            line = next(lines)", "++", "++        if line and line.startswith(\"gpgsig \"):", "++            commit[\"gpgsig\"] = [remove_prefix(line, \"gpgsig \")]", "++            line = next(lines)", "++            while not line.startswith(\" -----END PGP SIGNATURE-----\"):", "++                assert \"BEGIN PGP SIGNATURE\" not in line", "++                commit[\"gpgsig\"].append(line)", "++                line = next(lines)", "++            assert line == \" -----END PGP SIGNATURE-----\"", "++            commit[\"gpgsig\"].append(line)", "++            line = next(lines)", "++        try:", "++            while line == \" \":", "++                line = next(lines)", "++            while line == \"\":", "++                line = next(lines)", "++            commit[\"message\"] = []", "++            while line and line != \"---\":", "++                commit[\"message\"].append(line)", "++                line = next(lines)", "++            if line and line == \"---\":", "++                commit[\"diff\"] = []", "++                line = next(lines)", "++                for line in lines:", "++                    commit[\"diff\"].append(line)", "++        except StopIteration:", "++            pass", "++        yield commit", "++", "++", "++def split_commits_to_pretty_commits(split_commits):", "++    for commit in split_commits:", "++        final = {}", "++        for key, value in commit.items():", "++            final[key] = value", "++        if \"gpgsig\" in final:", "++            assert final[\"gpgsig\"][0] == \"-----BEGIN PGP SIGNATURE-----\"", "++            signature = [\"-----BEGIN PGP SIGNATURE-----\"]", "++            for line in final[\"gpgsig\"][1:]:", "++                assert line.startswith(\" \")", "++                signature.append(line[1:])", "++            final[\"gpgsig\"] = \"\\n\".join(signature)", "++", "++        assert \"author\" in final", "++        final[\"author\"] = parse_author(final[\"author\"])", "++        assert \"committer\" in final", "++        final[\"committer\"] = parse_author(final[\"committer\"])", "++", "++        if \"Primary key fingerprint\" in final:", "++            del final[\"Primary key fingerprint\"]", "++", "++        if \"gpg\" in commit:", "++            assert commit[\"gpg\"][0].startswith(\"Signature made \")", "++            if not valid_signature(commit):", "++                print(\"Bad signature:\" + pretty(commit))", "++            final[\"fingerprint\"] = remove_prefix(", "++                commit[\"gpg\"][1], \"               using RSA key \"", "++            )", "++            if \"Primary key fingerprint\" in final:", "++                del final[\"Primary key fingerprint\"]", "++", "++        assert \"message\" in final", "++        final[\"message\"] = \"\\n\".join(x[4:] for x in final[\"message\"])", "++        yield final", "+diff --git a/look_for_pulls.py b/look_for_pulls.py", "+new file mode 100644", "+index 0000000..9cc9e1f", "+--- /dev/null", "++++ b/look_for_pulls.py", "+@@ -0,0 +1,23 @@", "++import sys", "++import os", "++", "++import requests", "++", "++pat = os.getenv(\"GH_PAT\")", "++", "++for line in sys.stdin:", "++    headers = {", "++        \"Accept\": \"application/vnd.github+json\",", "++        \"Authorization\": f\"Bearer {pat}\",", "++        \"X-GitHub-Api-Version\": \"2022-11-28\",", "++    }", "++    line = line.replace(\"github.com\", \"api.github.com/repos\").replace(\"/commit/\", \"/commits/\").strip() + \"/pulls\"", "++    r = requests.get(line, headers=headers)", "++    if r.status_code != 200:", "++        print(\"Bad status code: \" + str(r.status_code) + \" \" + line)", "++    data = r.json()", "++    if len(data) == 0:", "++        print(\"Empty: \" + line)", "++        continue", "++    target = data[0][\"url\"]", "++    print(line + \" -> \" + target)", "+diff --git a/requirements.txt b/requirements.txt", "+new file mode 100644", "+index 0000000..30b6f90", "+--- /dev/null", "++++ b/requirements.txt", "+@@ -0,0 +1,3 @@", "++cf-remote==0.6.4", "++cfbs==4.4.0", "++requests==2.31.0", "diff --git a/tests/test_parser.py b/tests/test_parser.py", "new file mode 100644", "index 0000000..07c8979", "--- /dev/null", "+++ b/tests/test_parser.py", "@@ -0,0 +1,32 @@", "+import sys", "+", "+from cfbs.pretty import pretty", "+", "+sys.path.append(\".\")", "+import glrp.internal_parser as internal_parser", "+", "+", "+def test_basic():", "+    with open(\"tests/first_commits.txt\", \"r\") as f:", "+        lines = f.readlines()", "+    content = \"\".join(lines)", "+    result = internal_parser.parse_to_all_representations(lines, replace_errors=False)", "+    result = list(result)", "+    assert len(result) == 2", "+    assert len(result[0]) == 3", "+    raw_content = \"\"", "+    for raw_commit, split_commit, pretty_commit in result:", "+        raw_content += \"\\n\".join(raw_commit) + \"\\n\"", "+    assert raw_content == content", "+", "+    expected = []", "+    with open(\"tests/expected-01.json\", \"r\") as f:", "+        expected.append(f.read())", "+    with open(\"tests/expected-02.json\", \"r\") as f:", "+        expected.append(f.read())", "+    end_result = internal_parser.parse(lines, replace_errors=False)", "+    end_result = [pretty(x) + \"\\n\" for x in end_result]", "+", "+    assert len(end_result) == 2", "+    assert end_result[0] == expected[0]", "+    assert end_result[1] == expected[1]"], "valid_signature": true, "fingerprint": "AFE8C5F43057C0093122299F584211AF6AB3EE12"}
